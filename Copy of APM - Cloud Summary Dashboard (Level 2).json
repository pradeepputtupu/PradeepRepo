{
  "allowPreview": true,
  "assetSharingUrl": "https://apmsandbox.my.salesforce.com/analytics/wave/dashboard?assetId=0FKf2000000MKxyGAG&orgId=00Df2000001LxAD&loginHost=na53.salesforce.com&urlType=sharing",
  "createdBy": {
    "id": "005f2000009PkNIAA0",
    "name": "Pradeep Puttupu",
    "profilePhotoUrl": "https://apmsandbox--c.na53.content.force.com/profilephoto/005/T"
  },
  "createdDate": "2018-10-30T06:24:10.000Z",
  "datasets": [
    {
      "id": "0Fbf2000000HtY7CAK",
      "label": "APM_ACV1",
      "name": "APM_ACV",
      "url": "/services/data/v42.0/wave/datasets/0Fbf2000000HtY7CAK"
    },
    {
      "id": "0Fbf2000000HtYVCA0",
      "label": "APM_AOV",
      "name": "APM_AOV",
      "url": "/services/data/v42.0/wave/datasets/0Fbf2000000HtYVCA0"
    },
    {
      "id": "0Fbf2000000HtYaCAK",
      "label": "APM_Attrition",
      "name": "APM_Attrition",
      "url": "/services/data/v42.0/wave/datasets/0Fbf2000000HtYaCAK"
    },
    {
      "id": "0Fbf2000000HtZRCA0",
      "label": "APM_HC",
      "name": "APM_HC",
      "url": "/services/data/v42.0/wave/datasets/0Fbf2000000HtZRCA0"
    },
    {
      "id": "0Fbf2000000HtZlCAK",
      "label": "APM_MARKET_CUSTOMER",
      "name": "APM_MARKET_CUSTOMER",
      "url": "/services/data/v42.0/wave/datasets/0Fbf2000000HtZlCAK"
    },
    {
      "id": "0Fbf2000000HtZqCAK",
      "label": "APM_MARKET_SHARE",
      "name": "APM_MARKET_SHARE",
      "url": "/services/data/v42.0/wave/datasets/0Fbf2000000HtZqCAK"
    },
    {
      "id": "0Fbf2000000HtaPCAS",
      "label": "APM_Pipegen1",
      "name": "APM_Pipegen1",
      "url": "/services/data/v42.0/wave/datasets/0Fbf2000000HtaPCAS"
    },
    {
      "id": "0Fbf2000000HtaZCAS",
      "label": "APM_REDACCOUNTS",
      "name": "APM_REDACCOUNTS",
      "url": "/services/data/v42.0/wave/datasets/0Fbf2000000HtaZCAS"
    },
    {
      "id": "0Fbf2000000HtaeCAC",
      "label": "APM_SWE_INFRA",
      "name": "APM_SWE_INFRA",
      "url": "/services/data/v42.0/wave/datasets/0Fbf2000000HtaeCAC"
    },
    {
      "id": "0Fbf2000000HtajCAC",
      "label": "APM_T_P",
      "name": "APM_T_P",
      "url": "/services/data/v42.0/wave/datasets/0Fbf2000000HtajCAC"
    },
    {
      "id": "0Fbf2000000HtaoCAC",
      "label": "APM_T_P__Transactions",
      "name": "APM_T_P_Transactions",
      "url": "/services/data/v42.0/wave/datasets/0Fbf2000000HtaoCAC"
    },
    {
      "id": "0Fbf2000000HtatCAC",
      "label": "APM_TECH_AVAILABILITY",
      "name": "APM_TECH_AVAILABILITY",
      "url": "/services/data/v42.0/wave/datasets/0Fbf2000000HtatCAC"
    },
    {
      "id": "0Fbf2000000HteBCAS",
      "label": "Master_Hierarchy",
      "name": "Master_Hierarchy",
      "url": "/services/data/v42.0/wave/datasets/0Fbf2000000HteBCAS"
    },
    {
      "id": "0Fbf2000000TWH7CAO",
      "label": "APM_AE",
      "name": "APM_AE",
      "url": "/services/data/v42.0/wave/datasets/0Fbf2000000TWH7CAO"
    }
  ],
  "files": [
    {
      "contentType": "image/png",
      "fileLength": 20248,
      "fileName": "assetPreviewThumb",
      "id": "0FJf2000000L5PVGA0",
      "lastModifiedDate": "2018-10-30T06:24:17.000Z",
      "url": "/services/data/v42.0/wave/lenses/0FKf2000000MKxyGAG/files/0FJf2000000L5PVGA0"
    }
  ],
  "folder": {
    "id": "005f2000009PkNIAA0",
    "label": "Pradeep Puttupu"
  },
  "id": "0FKf2000000MKxyGAG",
  "label": "Copy of APM - Cloud Summary Dashboard (Level 2)",
  "lastAccessedDate": "2018-10-30T17:08:08.000Z",
  "lastModifiedBy": {
    "id": "005f2000009PkNIAA0",
    "name": "Pradeep Puttupu",
    "profilePhotoUrl": "https://apmsandbox--c.na53.content.force.com/profilephoto/005/T"
  },
  "lastModifiedDate": "2018-10-30T06:24:10.000Z",
  "mobileDisabled": true,
  "name": "Copy_of_APM_Cloud_Summary_Dashboard_Level_2",
  "permissions": {
    "manage": true,
    "modify": true,
    "view": true
  },
  "refreshDate": "2019-01-16T20:43:20.000Z",
  "state": {
    "dataSourceLinks": [
      {
        "fields": [
          {
            "dataSourceName": "APM_ACV",
            "dataSourceType": "saql",
            "fieldName": "Lead"
          },
          {
            "dataSourceName": "APM_AOV",
            "dataSourceType": "saql",
            "fieldName": "Lead"
          },
          {
            "dataSourceName": "APM_Attrition",
            "dataSourceType": "saql",
            "fieldName": "Lead"
          },
          {
            "dataSourceName": "APM_Pipegen1",
            "dataSourceType": "saql",
            "fieldName": "Lead"
          },
          {
            "dataSourceName": "APM_HC",
            "dataSourceType": "saql",
            "fieldName": "Lead"
          },
          {
            "dataSourceName": "APM_SWE_INFRA",
            "dataSourceType": "saql",
            "fieldName": "Lead"
          },
          {
            "dataSourceName": "APM_MARKET_CUSTOMER",
            "dataSourceType": "saql",
            "fieldName": "Lead"
          },
          {
            "dataSourceName": "APM_MARKET_SHARE",
            "dataSourceType": "saql",
            "fieldName": "Lead"
          },
          {
            "dataSourceName": "APM_TECH_AVAILABILITY",
            "dataSourceType": "saql",
            "fieldName": "Lead"
          },
          {
            "dataSourceName": "APM_T_P",
            "dataSourceType": "saql",
            "fieldName": "Lead"
          },
          {
            "dataSourceName": "APM_T_P_Transactions",
            "dataSourceType": "saql",
            "fieldName": "Lead"
          },
          {
            "dataSourceName": "APM_REDACCOUNTS",
            "dataSourceType": "saql",
            "fieldName": "Lead"
          }
        ],
        "label": "Lead",
        "name": "Link_1018"
      },
      {
        "fields": [
          {
            "dataSourceName": "APM_ACV",
            "dataSourceType": "saql",
            "fieldName": "Industry"
          },
          {
            "dataSourceName": "APM_AOV",
            "dataSourceType": "saql",
            "fieldName": "Industry"
          },
          {
            "dataSourceName": "APM_Attrition",
            "dataSourceType": "saql",
            "fieldName": "Industry"
          },
          {
            "dataSourceName": "APM_Pipegen1",
            "dataSourceType": "saql",
            "fieldName": "Industry"
          },
          {
            "dataSourceName": "APM_HC",
            "dataSourceType": "saql",
            "fieldName": "Industry"
          },
          {
            "dataSourceName": "APM_SWE_INFRA",
            "dataSourceType": "saql",
            "fieldName": "Industry"
          },
          {
            "dataSourceName": "APM_REDACCOUNTS",
            "dataSourceType": "saql",
            "fieldName": "Industry"
          },
          {
            "dataSourceName": "APM_T_P",
            "dataSourceType": "saql",
            "fieldName": "Industry"
          },
          {
            "dataSourceName": "APM_TECH_AVAILABILITY",
            "dataSourceType": "saql",
            "fieldName": "Industry"
          },
          {
            "dataSourceName": "APM_T_P_Transactions",
            "dataSourceType": "saql",
            "fieldName": "Industries"
          },
          {
            "dataSourceName": "APM_MARKET_CUSTOMER",
            "dataSourceType": "saql",
            "fieldName": "Industry"
          },
          {
            "dataSourceName": "APM_MARKET_SHARE",
            "dataSourceType": "saql",
            "fieldName": "Industry"
          }
        ],
        "label": "Industry",
        "name": "Link_1302"
      },
      {
        "fields": [
          {
            "dataSourceName": "APM_ACV",
            "dataSourceType": "saql",
            "fieldName": "Region"
          },
          {
            "dataSourceName": "APM_AOV",
            "dataSourceType": "saql",
            "fieldName": "Region"
          },
          {
            "dataSourceName": "APM_Attrition",
            "dataSourceType": "saql",
            "fieldName": "Region"
          },
          {
            "dataSourceName": "APM_Pipegen1",
            "dataSourceType": "saql",
            "fieldName": "Region"
          },
          {
            "dataSourceName": "APM_HC",
            "dataSourceType": "saql",
            "fieldName": "Region"
          },
          {
            "dataSourceName": "APM_SWE_INFRA",
            "dataSourceType": "saql",
            "fieldName": "Region"
          },
          {
            "dataSourceName": "APM_REDACCOUNTS",
            "dataSourceType": "saql",
            "fieldName": "Industry"
          },
          {
            "dataSourceName": "APM_T_P",
            "dataSourceType": "saql",
            "fieldName": "Region"
          },
          {
            "dataSourceName": "APM_TECH_AVAILABILITY",
            "dataSourceType": "saql",
            "fieldName": "Region"
          },
          {
            "dataSourceName": "APM_T_P_Transactions",
            "dataSourceType": "saql",
            "fieldName": "Region"
          },
          {
            "dataSourceName": "APM_MARKET_CUSTOMER",
            "dataSourceType": "saql",
            "fieldName": "Region"
          },
          {
            "dataSourceName": "APM_MARKET_SHARE",
            "dataSourceType": "saql",
            "fieldName": "Region"
          }
        ],
        "label": "Region",
        "name": "Link_1318"
      },
      {
        "fields": [
          {
            "dataSourceName": "APM_ACV",
            "dataSourceType": "saql",
            "fieldName": "Country"
          },
          {
            "dataSourceName": "APM_AOV",
            "dataSourceType": "saql",
            "fieldName": "Country"
          },
          {
            "dataSourceName": "APM_Attrition",
            "dataSourceType": "saql",
            "fieldName": "Region"
          },
          {
            "dataSourceName": "APM_Pipegen1",
            "dataSourceType": "saql",
            "fieldName": "Country"
          },
          {
            "dataSourceName": "APM_HC",
            "dataSourceType": "saql",
            "fieldName": "Country"
          },
          {
            "dataSourceName": "APM_SWE_INFRA",
            "dataSourceType": "saql",
            "fieldName": "Country"
          },
          {
            "dataSourceName": "APM_REDACCOUNTS",
            "dataSourceType": "saql",
            "fieldName": "Country"
          },
          {
            "dataSourceName": "APM_T_P",
            "dataSourceType": "saql",
            "fieldName": "Country"
          },
          {
            "dataSourceName": "APM_T_P_Transactions",
            "dataSourceType": "saql",
            "fieldName": "Country"
          },
          {
            "dataSourceName": "APM_MARKET_CUSTOMER",
            "dataSourceType": "saql",
            "fieldName": "Country"
          },
          {
            "dataSourceName": "APM_MARKET_SHARE",
            "dataSourceType": "saql",
            "fieldName": "Country"
          },
          {
            "dataSourceName": "APM_TECH_AVAILABILITY",
            "dataSourceType": "saql",
            "fieldName": "Country"
          }
        ],
        "label": "Country",
        "name": "Link_1336"
      },
      {
        "fields": [
          {
            "dataSourceName": "APM_ACV",
            "dataSourceType": "saql",
            "fieldName": "Segment"
          },
          {
            "dataSourceName": "APM_AOV",
            "dataSourceType": "saql",
            "fieldName": "Segment"
          },
          {
            "dataSourceName": "APM_Attrition",
            "dataSourceType": "saql",
            "fieldName": "Segment"
          },
          {
            "dataSourceName": "APM_Pipegen1",
            "dataSourceType": "saql",
            "fieldName": "Segment"
          },
          {
            "dataSourceName": "APM_HC",
            "dataSourceType": "saql",
            "fieldName": "Segment"
          },
          {
            "dataSourceName": "APM_SWE_INFRA",
            "dataSourceType": "saql",
            "fieldName": "Segment"
          },
          {
            "dataSourceName": "APM_REDACCOUNTS",
            "dataSourceType": "saql",
            "fieldName": "Segment"
          },
          {
            "dataSourceName": "APM_T_P",
            "dataSourceType": "saql",
            "fieldName": "Segment"
          },
          {
            "dataSourceName": "APM_T_P_Transactions",
            "dataSourceType": "saql",
            "fieldName": "Segment"
          },
          {
            "dataSourceName": "APM_TECH_AVAILABILITY",
            "dataSourceType": "saql",
            "fieldName": "Segment"
          },
          {
            "dataSourceName": "APM_MARKET_CUSTOMER",
            "dataSourceType": "saql",
            "fieldName": "Segment"
          },
          {
            "dataSourceName": "APM_MARKET_SHARE",
            "dataSourceType": "saql",
            "fieldName": "Segment"
          }
        ],
        "label": "Segment",
        "name": "Link_55"
      },
      {
        "fields": [
          {
            "dataSourceName": "Master_Hierarchy",
            "dataSourceType": "saql",
            "fieldName": "Level_1"
          },
          {
            "dataSourceName": "APM_ACV",
            "dataSourceType": "saql",
            "fieldName": "Cloud"
          },
          {
            "dataSourceName": "APM_AOV",
            "dataSourceType": "saql",
            "fieldName": "Cloud"
          },
          {
            "dataSourceName": "APM_Attrition",
            "dataSourceType": "saql",
            "fieldName": "Cloud"
          },
          {
            "dataSourceName": "APM_Pipegen1",
            "dataSourceType": "saql",
            "fieldName": "Cloud"
          },
          {
            "dataSourceName": "APM_HC",
            "dataSourceType": "saql",
            "fieldName": "Cloud"
          },
          {
            "dataSourceName": "APM_SWE_INFRA",
            "dataSourceType": "saql",
            "fieldName": "Cloud"
          },
          {
            "dataSourceName": "APM_REDACCOUNTS",
            "dataSourceType": "saql",
            "fieldName": "Cloud"
          },
          {
            "dataSourceName": "APM_T_P",
            "dataSourceType": "saql",
            "fieldName": "Cloud"
          },
          {
            "dataSourceName": "APM_TECH_AVAILABILITY",
            "dataSourceType": "saql",
            "fieldName": "Cloud"
          },
          {
            "dataSourceName": "APM_T_P_Transactions",
            "dataSourceType": "saql",
            "fieldName": "Cloud"
          },
          {
            "dataSourceName": "APM_MARKET_CUSTOMER",
            "dataSourceType": "saql",
            "fieldName": "Cloud"
          },
          {
            "dataSourceName": "APM_MARKET_SHARE",
            "dataSourceType": "saql",
            "fieldName": "Cloud"
          }
        ],
        "label": "Cloud Connection",
        "name": "Link_1340"
      },
      {
        "fields": [
          {
            "dataSourceName": "Master_Hierarchy",
            "dataSourceType": "saql",
            "fieldName": "Level_2"
          },
          {
            "dataSourceName": "APM_ACV",
            "dataSourceType": "saql",
            "fieldName": "Subcloud"
          },
          {
            "dataSourceName": "APM_AOV",
            "dataSourceType": "saql",
            "fieldName": "Subcloud"
          },
          {
            "dataSourceName": "APM_Attrition",
            "dataSourceType": "saql",
            "fieldName": "Subcloud"
          },
          {
            "dataSourceName": "APM_Pipegen1",
            "dataSourceType": "saql",
            "fieldName": "Subcloud"
          },
          {
            "dataSourceName": "APM_HC",
            "dataSourceType": "saql",
            "fieldName": "Subcloud"
          },
          {
            "dataSourceName": "APM_SWE_INFRA",
            "dataSourceType": "saql",
            "fieldName": "Subcloud"
          },
          {
            "dataSourceName": "APM_REDACCOUNTS",
            "dataSourceType": "saql",
            "fieldName": "Subcloud"
          },
          {
            "dataSourceName": "APM_T_P",
            "dataSourceType": "saql",
            "fieldName": "Subcloud"
          },
          {
            "dataSourceName": "APM_T_P_Transactions",
            "dataSourceType": "saql",
            "fieldName": "Subcloud"
          },
          {
            "dataSourceName": "APM_TECH_AVAILABILITY",
            "dataSourceType": "saql",
            "fieldName": "Subcloud"
          },
          {
            "dataSourceName": "APM_MARKET_CUSTOMER",
            "dataSourceType": "saql",
            "fieldName": "Subcloud"
          },
          {
            "dataSourceName": "APM_MARKET_SHARE",
            "dataSourceType": "saql",
            "fieldName": "Cloud"
          }
        ],
        "label": "Sub Cloud Connection",
        "name": "Link_1389"
      },
      {
        "fields": [
          {
            "dataSourceName": "APM_ACV",
            "dataSourceType": "saql",
            "fieldName": "Lead_1"
          },
          {
            "dataSourceName": "APM_AOV",
            "dataSourceType": "saql",
            "fieldName": "Lead_1"
          },
          {
            "dataSourceName": "APM_Attrition",
            "dataSourceType": "saql",
            "fieldName": "Lead_1"
          },
          {
            "dataSourceName": "APM_HC",
            "dataSourceType": "saql",
            "fieldName": "Lead_1"
          },
          {
            "dataSourceName": "APM_SWE_INFRA",
            "dataSourceType": "saql",
            "fieldName": "Lead_1"
          },
          {
            "dataSourceName": "APM_Pipegen1",
            "dataSourceType": "saql",
            "fieldName": "Lead_1"
          },
          {
            "dataSourceName": "APM_REDACCOUNTS",
            "dataSourceType": "saql",
            "fieldName": "Lead_1"
          },
          {
            "dataSourceName": "APM_T_P",
            "dataSourceType": "saql",
            "fieldName": "Lead_1"
          },
          {
            "dataSourceName": "APM_TECH_AVAILABILITY",
            "dataSourceType": "saql",
            "fieldName": "Lead_1"
          },
          {
            "dataSourceName": "APM_T_P_Transactions",
            "dataSourceType": "saql",
            "fieldName": "Lead_1"
          },
          {
            "dataSourceName": "APM_MARKET_CUSTOMER",
            "dataSourceType": "saql",
            "fieldName": "Lead_1"
          },
          {
            "dataSourceName": "APM_MARKET_SHARE",
            "dataSourceType": "saql",
            "fieldName": "Lead_1"
          }
        ],
        "label": "Lead+1",
        "name": "Link_3761"
      }
    ],
    "filters": [],
    "gridLayouts": [
      {
        "maxWidth": 1540,
        "name": "Default",
        "numColumns": 36,
        "pages": [
          {
            "label": "Financial Measures",
            "name": "328a689d-17a8-489e-b41c-d6dbaedbf3ac",
            "widgets": [
              {
                "colspan": 4,
                "column": 8,
                "name": "listselector_8",
                "row": 1,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "table_4",
                "row": 18,
                "rowspan": 3,
                "widgetStyle": {
                  "borderEdges": []
                }
              },
              {
                "colspan": 8,
                "column": 0,
                "name": "link_1",
                "row": 12,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 1,
                "column": 13,
                "name": "text_3",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 4,
                "column": 18,
                "name": "listselector_3",
                "row": 1,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 3,
                "column": 9,
                "name": "listselector_4",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "table_7",
                "row": 21,
                "rowspan": 4,
                "widgetStyle": {
                  "backgroundColor": "#FFFFFF",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 1,
                "column": 8,
                "name": "text_1",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "container_2",
                "row": 15,
                "rowspan": 71,
                "widgetStyle": {
                  "borderEdges": []
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "container_3",
                "row": 0,
                "rowspan": 12,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 2,
                "column": 0,
                "name": "image_1",
                "row": 1,
                "rowspan": 6,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderEdges": []
                }
              },
              {
                "colspan": 4,
                "column": 32,
                "name": "image_2",
                "row": 1,
                "rowspan": 6,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "image_3",
                "row": 86,
                "rowspan": 8,
                "widgetStyle": {
                  "backgroundColor": "#FFFFFF",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "table_14",
                "row": 25,
                "rowspan": 47,
                "widgetStyle": {
                  "borderEdges": []
                }
              },
              {
                "colspan": 4,
                "column": 3,
                "name": "link_13",
                "row": 6,
                "rowspan": 2,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "rgba(0, 135, 255, 0)",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 16,
                  "borderWidth": 2
                }
              },
              {
                "colspan": 4,
                "column": 23,
                "name": "listselector_10",
                "row": 1,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 4,
                "column": 28,
                "name": "listselector_7",
                "row": 1,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderEdges": []
                }
              },
              {
                "colspan": 3,
                "column": 14,
                "name": "listselector_12",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 1,
                "column": 3,
                "name": "text_4",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 4,
                "column": 3,
                "name": "listselector_2",
                "row": 1,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(230, 236, 242, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 4,
                "column": 13,
                "name": "listselector_1",
                "row": 1,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "container_7",
                "row": 12,
                "rowspan": 3,
                "widgetStyle": {
                  "borderEdges": []
                }
              },
              {
                "colspan": 7,
                "column": 8,
                "name": "link_14",
                "row": 12,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "#FFFFFF",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 7,
                "column": 15,
                "name": "link_16",
                "row": 12,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 7,
                "column": 22,
                "name": "link_17",
                "row": 12,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 7,
                "column": 29,
                "name": "link_18",
                "row": 12,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 4,
                "column": 28,
                "name": "listselector_5",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 29,
                "column": 0,
                "name": "text_6",
                "row": 74,
                "rowspan": 12,
                "widgetStyle": {
                  "backgroundColor": "#FFFFFF",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 2,
                "column": 34,
                "name": "image_4",
                "row": 82,
                "rowspan": 3,
                "widgetStyle": {
                  "borderEdges": []
                }
              }
            ]
          },
          {
            "label": "Hide Filter - Financial Measures",
            "name": "fb908427-d26f-49fe-94a4-3ae9d59e11df",
            "widgets": [
              {
                "colspan": 36,
                "column": 0,
                "name": "table_4",
                "row": 11,
                "rowspan": 3,
                "widgetStyle": {
                  "borderEdges": []
                }
              },
              {
                "colspan": 8,
                "column": 0,
                "name": "link_1",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "table_7",
                "row": 14,
                "rowspan": 4,
                "widgetStyle": {
                  "backgroundColor": "#FFFFFF",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "container_2",
                "row": 8,
                "rowspan": 70,
                "widgetStyle": {
                  "borderEdges": []
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "container_3",
                "row": 0,
                "rowspan": 5,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 2,
                "column": 0,
                "name": "image_1",
                "row": 0,
                "rowspan": 5,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderEdges": []
                }
              },
              {
                "colspan": 4,
                "column": 32,
                "name": "image_2",
                "row": 0,
                "rowspan": 5,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "image_3",
                "row": 78,
                "rowspan": 8,
                "widgetStyle": {
                  "backgroundColor": "#FFFFFF",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "table_14",
                "row": 18,
                "rowspan": 47,
                "widgetStyle": {
                  "borderEdges": []
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "container_7",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "borderEdges": []
                }
              },
              {
                "colspan": 7,
                "column": 8,
                "name": "link_14",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "#FFFFFF",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 29,
                "column": 0,
                "name": "text_6",
                "row": 66,
                "rowspan": 12,
                "widgetStyle": {
                  "backgroundColor": "#FFFFFF",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 2,
                "column": 34,
                "name": "image_4",
                "row": 74,
                "rowspan": 3,
                "widgetStyle": {
                  "borderEdges": []
                }
              },
              {
                "colspan": 7,
                "column": 15,
                "name": "link_12",
                "row": 1,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 7,
                "column": 15,
                "name": "link_21",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 7,
                "column": 29,
                "name": "link_31",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 7,
                "column": 22,
                "name": "link_30",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              }
            ]
          },
          {
            "label": "Distribution HC",
            "name": "a32a622b-f247-47ef-92af-1ce8fe739626",
            "widgets": [
              {
                "colspan": 1,
                "column": 13,
                "name": "text_3",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 4,
                "column": 28,
                "name": "listselector_5",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 4,
                "column": 8,
                "name": "listselector_8",
                "row": 1,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 3,
                "column": 9,
                "name": "listselector_4",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "table_15",
                "row": 18,
                "rowspan": 3,
                "widgetStyle": {
                  "borderEdges": []
                }
              },
              {
                "colspan": 8,
                "column": 0,
                "name": "link_1",
                "row": 12,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "table_12",
                "row": 21,
                "rowspan": 4,
                "widgetStyle": {
                  "backgroundColor": "#FFFFFF",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 1,
                "column": 8,
                "name": "text_1",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 4,
                "column": 18,
                "name": "listselector_3",
                "row": 1,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "container_2",
                "row": 15,
                "rowspan": 66,
                "widgetStyle": {
                  "borderEdges": []
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "container_3",
                "row": 0,
                "rowspan": 12,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 2,
                "column": 0,
                "name": "image_1",
                "row": 1,
                "rowspan": 6,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderEdges": []
                }
              },
              {
                "colspan": 4,
                "column": 32,
                "name": "image_2",
                "row": 1,
                "rowspan": 6,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "image_3",
                "row": 81,
                "rowspan": 8,
                "widgetStyle": {
                  "backgroundColor": "#FFFFFF",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 4,
                "column": 3,
                "name": "link_10",
                "row": 6,
                "rowspan": 2,
                "widgetStyle": {
                  "backgroundColor": "rgba(242, 246, 250, 0)",
                  "borderColor": "rgba(0, 135, 255, 0.01)",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 16,
                  "borderWidth": 2
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "table_9",
                "row": 25,
                "rowspan": 45,
                "widgetStyle": {
                  "backgroundColor": "#FFFFFF",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 4,
                "column": 28,
                "name": "listselector_7",
                "row": 1,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderEdges": []
                }
              },
              {
                "colspan": 4,
                "column": 23,
                "name": "listselector_10",
                "row": 1,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 3,
                "column": 14,
                "name": "listselector_12",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 1,
                "column": 3,
                "name": "text_4",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 4,
                "column": 3,
                "name": "listselector_2",
                "row": 1,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(230, 236, 242, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 4,
                "column": 13,
                "name": "listselector_1",
                "row": 1,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "container_9",
                "row": 12,
                "rowspan": 3,
                "widgetStyle": {
                  "borderEdges": []
                }
              },
              {
                "colspan": 7,
                "column": 8,
                "name": "link_23",
                "row": 12,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 7,
                "column": 15,
                "name": "link_24",
                "row": 12,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "#FFFFFF",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 7,
                "column": 22,
                "name": "link_25",
                "row": 12,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 7,
                "column": 29,
                "name": "link_26",
                "row": 12,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 35,
                "column": 0,
                "name": "text_8",
                "row": 71,
                "rowspan": 9,
                "widgetStyle": {
                  "backgroundColor": "#FFFFFF",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 7,
                "column": 15,
                "name": "link_15",
                "row": 8,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              }
            ]
          },
          {
            "label": "Hide Filters - Distribution HC",
            "name": "4fad4e26-13b7-4d45-bae5-fa096fab3892",
            "widgets": [
              {
                "colspan": 36,
                "column": 0,
                "name": "table_15",
                "row": 11,
                "rowspan": 3,
                "widgetStyle": {
                  "borderEdges": []
                }
              },
              {
                "colspan": 8,
                "column": 0,
                "name": "link_1",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "table_12",
                "row": 14,
                "rowspan": 4,
                "widgetStyle": {
                  "backgroundColor": "#FFFFFF",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "container_2",
                "row": 8,
                "rowspan": 66,
                "widgetStyle": {
                  "borderEdges": []
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "container_3",
                "row": 0,
                "rowspan": 5,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 2,
                "column": 0,
                "name": "image_1",
                "row": 0,
                "rowspan": 5,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderEdges": []
                }
              },
              {
                "colspan": 4,
                "column": 32,
                "name": "image_2",
                "row": 0,
                "rowspan": 5,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "image_3",
                "row": 74,
                "rowspan": 8,
                "widgetStyle": {
                  "backgroundColor": "#FFFFFF",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "table_9",
                "row": 18,
                "rowspan": 46,
                "widgetStyle": {
                  "backgroundColor": "#FFFFFF",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "container_9",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "borderEdges": []
                }
              },
              {
                "colspan": 7,
                "column": 15,
                "name": "link_24",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "#FFFFFF",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 35,
                "column": 0,
                "name": "text_8",
                "row": 65,
                "rowspan": 9,
                "widgetStyle": {
                  "backgroundColor": "#FFFFFF",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 7,
                "column": 15,
                "name": "link_19",
                "row": 1,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 7,
                "column": 8,
                "name": "link_22",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 7,
                "column": 29,
                "name": "link_31",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 7,
                "column": 22,
                "name": "link_30",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              }
            ]
          },
          {
            "label": "T&amp;P Measures",
            "name": "20eda594-98ea-486b-aa1c-9d12c3aa2b7a",
            "widgets": [
              {
                "colspan": 4,
                "column": 8,
                "name": "listselector_8",
                "row": 1,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 4,
                "column": 28,
                "name": "listselector_5",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "table_8",
                "row": 18,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "#FFFFFF",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "table_16",
                "row": 21,
                "rowspan": 4,
                "widgetStyle": {
                  "backgroundColor": "#FFFFFF",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 8,
                "column": 0,
                "name": "link_1",
                "row": 12,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 1,
                "column": 13,
                "name": "text_3",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 4,
                "column": 18,
                "name": "listselector_3",
                "row": 1,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 3,
                "column": 9,
                "name": "listselector_4",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 1,
                "column": 8,
                "name": "text_1",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "container_2",
                "row": 15,
                "rowspan": 68,
                "widgetStyle": {
                  "borderEdges": []
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "container_3",
                "row": 0,
                "rowspan": 12,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 2,
                "column": 0,
                "name": "image_1",
                "row": 1,
                "rowspan": 6,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderEdges": []
                }
              },
              {
                "colspan": 4,
                "column": 32,
                "name": "image_2",
                "row": 1,
                "rowspan": 6,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "image_3",
                "row": 83,
                "rowspan": 8,
                "widgetStyle": {
                  "backgroundColor": "#FFFFFF",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 4,
                "column": 3,
                "name": "link_13",
                "row": 6,
                "rowspan": 2,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "rgba(0, 135, 255, 0)",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 16,
                  "borderWidth": 2
                }
              },
              {
                "colspan": 4,
                "column": 23,
                "name": "listselector_10",
                "row": 1,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 4,
                "column": 28,
                "name": "listselector_7",
                "row": 1,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderEdges": []
                }
              },
              {
                "colspan": 3,
                "column": 14,
                "name": "listselector_12",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 1,
                "column": 3,
                "name": "text_4",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 4,
                "column": 3,
                "name": "listselector_2",
                "row": 1,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(230, 236, 242, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 4,
                "column": 13,
                "name": "listselector_1",
                "row": 1,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 35,
                "column": 0,
                "name": "text_5",
                "row": 73,
                "rowspan": 9,
                "widgetStyle": {
                  "borderEdges": []
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "table_19",
                "row": 25,
                "rowspan": 47,
                "widgetStyle": {
                  "backgroundColor": "#FFFFFF",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "container_7",
                "row": 12,
                "rowspan": 3,
                "widgetStyle": {
                  "borderEdges": []
                }
              },
              {
                "colspan": 7,
                "column": 29,
                "name": "link_6",
                "row": 12,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 7,
                "column": 22,
                "name": "link_7",
                "row": 12,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "#FFFFFF",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 7,
                "column": 15,
                "name": "link_8",
                "row": 12,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 7,
                "column": 8,
                "name": "link_9",
                "row": 12,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 7,
                "column": 15,
                "name": "link_20",
                "row": 8,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              }
            ]
          },
          {
            "label": "Hide Filters - T&amp;P Measures",
            "name": "d00384c1-6182-44f8-9c73-d72c18c67e14",
            "widgets": [
              {
                "colspan": 36,
                "column": 0,
                "name": "table_8",
                "row": 11,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "#FFFFFF",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "table_16",
                "row": 14,
                "rowspan": 4,
                "widgetStyle": {
                  "backgroundColor": "#FFFFFF",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 8,
                "column": 0,
                "name": "link_1",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "container_2",
                "row": 8,
                "rowspan": 67,
                "widgetStyle": {
                  "borderEdges": []
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "container_3",
                "row": 0,
                "rowspan": 5,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 2,
                "column": 0,
                "name": "image_1",
                "row": 0,
                "rowspan": 5,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderEdges": []
                }
              },
              {
                "colspan": 4,
                "column": 32,
                "name": "image_2",
                "row": 0,
                "rowspan": 5,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "image_3",
                "row": 75,
                "rowspan": 8,
                "widgetStyle": {
                  "backgroundColor": "#FFFFFF",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 35,
                "column": 0,
                "name": "text_5",
                "row": 65,
                "rowspan": 9,
                "widgetStyle": {
                  "borderEdges": []
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "table_19",
                "row": 18,
                "rowspan": 46,
                "widgetStyle": {
                  "backgroundColor": "#FFFFFF",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "container_7",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "borderEdges": []
                }
              },
              {
                "colspan": 7,
                "column": 22,
                "name": "link_7",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "#FFFFFF",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 7,
                "column": 15,
                "name": "link_27",
                "row": 1,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 7,
                "column": 8,
                "name": "link_22",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 7,
                "column": 15,
                "name": "link_21",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 7,
                "column": 29,
                "name": "link_31",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              }
            ]
          },
          {
            "label": "Market Details",
            "name": "db7c532f-d5f4-4511-a109-e262585c6082",
            "widgets": [
              {
                "colspan": 4,
                "column": 8,
                "name": "listselector_8",
                "row": 1,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 4,
                "column": 28,
                "name": "listselector_5",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 8,
                "column": 0,
                "name": "link_1",
                "row": 12,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 1,
                "column": 13,
                "name": "text_3",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 4,
                "column": 18,
                "name": "listselector_3",
                "row": 1,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 3,
                "column": 9,
                "name": "listselector_4",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 1,
                "column": 8,
                "name": "text_1",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "container_2",
                "row": 15,
                "rowspan": 66,
                "widgetStyle": {
                  "borderEdges": []
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "container_3",
                "row": 0,
                "rowspan": 12,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 2,
                "column": 0,
                "name": "image_1",
                "row": 1,
                "rowspan": 6,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderEdges": []
                }
              },
              {
                "colspan": 4,
                "column": 32,
                "name": "image_2",
                "row": 1,
                "rowspan": 6,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "image_3",
                "row": 81,
                "rowspan": 8,
                "widgetStyle": {
                  "backgroundColor": "#FFFFFF",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 4,
                "column": 3,
                "name": "link_13",
                "row": 6,
                "rowspan": 2,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "rgba(0, 135, 255, 0)",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 16,
                  "borderWidth": 2
                }
              },
              {
                "colspan": 4,
                "column": 23,
                "name": "listselector_10",
                "row": 1,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 4,
                "column": 28,
                "name": "listselector_7",
                "row": 1,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderEdges": []
                }
              },
              {
                "colspan": 3,
                "column": 14,
                "name": "listselector_12",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 1,
                "column": 3,
                "name": "text_4",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 4,
                "column": 3,
                "name": "listselector_2",
                "row": 1,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(230, 236, 242, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 4,
                "column": 13,
                "name": "listselector_1",
                "row": 1,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgba(255, 255, 255, 0)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "table_20",
                "row": 18,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "#FFFFFF",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "table_21",
                "row": 21,
                "rowspan": 4,
                "widgetStyle": {
                  "backgroundColor": "#FFFFFF",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "table_23",
                "row": 25,
                "rowspan": 46,
                "widgetStyle": {
                  "backgroundColor": "#FFFFFF",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "container_7",
                "row": 12,
                "rowspan": 3,
                "widgetStyle": {
                  "borderEdges": []
                }
              },
              {
                "colspan": 7,
                "column": 8,
                "name": "link_2",
                "row": 12,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 7,
                "column": 15,
                "name": "link_3",
                "row": 12,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 7,
                "column": 22,
                "name": "link_4",
                "row": 12,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 7,
                "column": 29,
                "name": "link_5",
                "row": 12,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "#FFFFFF",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 35,
                "column": 0,
                "name": "text_2",
                "row": 72,
                "rowspan": 8,
                "widgetStyle": {
                  "backgroundColor": "#FFFFFF",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 7,
                "column": 15,
                "name": "link_28",
                "row": 8,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              }
            ]
          },
          {
            "label": "Hide Filters - Market Details",
            "name": "34f375e9-4d4a-41f6-8d43-a7a27c89a90f",
            "widgets": [
              {
                "colspan": 8,
                "column": 0,
                "name": "link_1",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "container_2",
                "row": 8,
                "rowspan": 66,
                "widgetStyle": {
                  "borderEdges": []
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "container_3",
                "row": 0,
                "rowspan": 5,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 2,
                "column": 0,
                "name": "image_1",
                "row": 0,
                "rowspan": 5,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderEdges": []
                }
              },
              {
                "colspan": 4,
                "column": 32,
                "name": "image_2",
                "row": 0,
                "rowspan": 5,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "image_3",
                "row": 74,
                "rowspan": 8,
                "widgetStyle": {
                  "backgroundColor": "#FFFFFF",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "table_20",
                "row": 11,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "#FFFFFF",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "table_21",
                "row": 14,
                "rowspan": 4,
                "widgetStyle": {
                  "backgroundColor": "#FFFFFF",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "table_23",
                "row": 18,
                "rowspan": 46,
                "widgetStyle": {
                  "backgroundColor": "#FFFFFF",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 36,
                "column": 0,
                "name": "container_7",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "borderEdges": []
                }
              },
              {
                "colspan": 7,
                "column": 29,
                "name": "link_5",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "#FFFFFF",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 35,
                "column": 0,
                "name": "text_2",
                "row": 65,
                "rowspan": 8,
                "widgetStyle": {
                  "backgroundColor": "#FFFFFF",
                  "borderColor": "#E6ECF2",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 7,
                "column": 15,
                "name": "link_29",
                "row": 1,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 7,
                "column": 22,
                "name": "link_30",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 7,
                "column": 8,
                "name": "link_22",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              },
              {
                "colspan": 7,
                "column": 15,
                "name": "link_21",
                "row": 5,
                "rowspan": 3,
                "widgetStyle": {
                  "backgroundColor": "rgb(225, 243, 251)",
                  "borderColor": "#FFFFFF",
                  "borderEdges": [
                    "all"
                  ],
                  "borderRadius": 0,
                  "borderWidth": 1
                }
              }
            ]
          }
        ],
        "rowHeight": "fine",
        "selectors": [],
        "style": {
          "alignmentX": "left",
          "alignmentY": "top",
          "backgroundColor": "#E6ECF2",
          "cellSpacingX": 0,
          "cellSpacingY": 0,
          "fit": "original",
          "gutterColor": "#E6ECF2"
        },
        "version": 1
      }
    ],
    "layouts": [],
    "steps": {
      "Table_Page_4_Header_Top": {
        "broadcastFacet": true,
        "groups": [],
        "label": "Table_Page_4_Header_Top",
        "numbers": [],
        "query": "MasterHierarchy = load &quot;Master_Hierarchy&quot;;\nresult_Total = group MasterHierarchy by all;\nresult_Total = foreach result_Total generate &quot;  &quot; as &#39;$ values in millions&#39;, &quot;Customer #                      &quot; as &#39;Customer #&#39;,&quot;Market Share                      &quot; as &#39;TAM $ &amp; Market Share %&#39;,&quot;Red Accounts                      &quot; as &#39;Red Accounts&#39;;",
        "receiveFacet": true,
        "selectMode": "none",
        "strings": [],
        "type": "saql",
        "useGlobal": true,
        "visualizationParameters": {
          "parameters": {
            "autoFitMode": "none",
            "showValues": true,
            "bins": {
              "breakpoints": {
                "high": 100,
                "low": 0
              },
              "bands": {
                "high": {
                  "color": "#008000",
                  "label": ""
                },
                "low": {
                  "color": "#B22222",
                  "label": ""
                },
                "medium": {
                  "color": "#ffa500",
                  "label": ""
                }
              }
            },
            "legend": {
              "showHeader": true,
              "show": true,
              "customSize": "auto",
              "position": "right-top",
              "inside": false
            },
            "axisMode": "multi",
            "tooltip": {
              "showBinLabel": true,
              "measures": "",
              "showPercentage": true,
              "showDimensions": true,
              "showMeasures": true,
              "customizeTooltip": false,
              "dimensions": ""
            },
            "visualizationType": "hbar",
            "title": {
              "fontSize": 14,
              "subtitleFontSize": 11,
              "label": "",
              "align": "center",
              "subtitleLabel": ""
            },
            "binValues": false,
            "trellis": {
              "flipLabels": false,
              "showGridLines": true,
              "size": [
                100,
                100
              ],
              "enable": false,
              "type": "x",
              "chartsPerLine": 4
            },
            "measureAxis2": {
              "sqrtScale": false,
              "showTitle": true,
              "showAxis": true,
              "title": "",
              "customDomain": {
                "showDomain": false
              }
            },
            "measureAxis1": {
              "sqrtScale": false,
              "showTitle": true,
              "showAxis": true,
              "title": "",
              "customDomain": {
                "showDomain": false
              }
            },
            "theme": "wave",
            "dimensionAxis": {
              "showTitle": true,
              "customSize": "auto",
              "showAxis": true,
              "title": "",
              "icons": {
                "useIcons": false,
                "iconProps": {
                  "fit": "cover",
                  "column": "",
                  "type": "round"
                }
              }
            }
          },
          "type": "chart",
          "visualizationType": "hbar"
        }
      },
      "Table_Page_1_Header_Top": {
        "broadcastFacet": true,
        "groups": [],
        "label": "Table_Page_1_Header_Top",
        "numbers": [],
        "query": "MasterHierarchy = load &quot;Master_Hierarchy&quot;;\nresult_Total = group MasterHierarchy by all;\nresult_Total = foreach result_Total generate &quot;$ values in millions&quot; as &#39;$ values in millions&#39;, &quot;ACV                            &quot; as &#39;ACV&#39;, &quot;AOV                            &quot; as &#39;AOV&#39;, &quot;ATTRITION                            &quot; as &#39;ATTRITION&#39;, &quot;PipeGen                            &quot; as &#39;Pipeline&#39;;",
        "receiveFacet": true,
        "selectMode": "none",
        "strings": [],
        "type": "saql",
        "useGlobal": true,
        "visualizationParameters": {
          "parameters": {
            "autoFitMode": "none",
            "showValues": true,
            "bins": {
              "breakpoints": {
                "high": 100,
                "low": 0
              },
              "bands": {
                "high": {
                  "color": "#008000",
                  "label": ""
                },
                "low": {
                  "color": "#B22222",
                  "label": ""
                },
                "medium": {
                  "color": "#ffa500",
                  "label": ""
                }
              }
            },
            "legend": {
              "showHeader": true,
              "show": true,
              "customSize": "auto",
              "position": "right-top",
              "inside": false
            },
            "axisMode": "multi",
            "tooltip": {
              "showBinLabel": true,
              "measures": "",
              "showPercentage": true,
              "showDimensions": true,
              "showMeasures": true,
              "customizeTooltip": false,
              "dimensions": ""
            },
            "visualizationType": "hbar",
            "title": {
              "fontSize": 14,
              "subtitleFontSize": 11,
              "label": "",
              "align": "center",
              "subtitleLabel": ""
            },
            "binValues": false,
            "trellis": {
              "flipLabels": false,
              "showGridLines": true,
              "size": [
                100,
                100
              ],
              "enable": false,
              "type": "x",
              "chartsPerLine": 4
            },
            "measureAxis2": {
              "sqrtScale": false,
              "showTitle": true,
              "showAxis": true,
              "title": "",
              "customDomain": {
                "showDomain": false
              }
            },
            "measureAxis1": {
              "sqrtScale": false,
              "showTitle": true,
              "showAxis": true,
              "title": "",
              "customDomain": {
                "showDomain": false
              }
            },
            "theme": "wave",
            "dimensionAxis": {
              "showTitle": true,
              "customSize": "auto",
              "showAxis": true,
              "title": "",
              "icons": {
                "useIcons": false,
                "iconProps": {
                  "fit": "cover",
                  "column": "",
                  "type": "round"
                }
              }
            }
          },
          "type": "chart",
          "visualizationType": "hbar"
        }
      },
      "Static_Cloud_Filter": {
        "broadcastFacet": true,
        "label": "Static_Cloud_Filter",
        "selectMode": "singlerequired",
        "start": "{&quot;display&quot;:[&quot;Clouds&quot;]}",
        "type": "staticflex",
        "values": [
          "{&quot;display&quot;:&quot;Clouds&quot;,&quot;filter&quot;:&quot;[&#92;&quot;Marketing Cloud&#92;&quot;, &#92;&quot;Other&#92;&quot;, &#92;&quot;Quip&#92;&quot;, &#92;&quot;Sales Cloud&#92;&quot;, &#92;&quot;Salesforce Platform&#92;&quot;, &#92;&quot;Service Cloud&#92;&quot;, &#92;&quot;Commerce Cloud&#92;&quot;, &#92;&quot;Success Cloud&#92;&quot;,&#92;&quot;Core Premier (A la Carte) &amp; Priority&#92;&quot;,&#92;&quot;Integration Cloud&#92;&quot;,&#92;&quot;Other CSG&#92;&quot;,&#92;&quot;N/A&#92;&quot;]&quot;,&quot;filter_REDACCOUNTS&quot;:&quot;[&#92;&quot;Marketing Cloud&#92;&quot;, &#92;&quot;Other&#92;&quot;, &#92;&quot;Quip&#92;&quot;, &#92;&quot;Sales Cloud&#92;&quot;, &#92;&quot;Salesforce Platform&#92;&quot;, &#92;&quot;Service Cloud&#92;&quot;, &#92;&quot;Commerce Cloud&#92;&quot;, &#92;&quot;Success Cloud&#92;&quot;,&#92;&quot;Core Premier (A la Carte) &amp; Priority&#92;&quot;,&#92;&quot;Integration Cloud&#92;&quot;]&quot;,&quot;static_country_logic&quot;:&quot;case when (&#39;Region&#39; == &#92;&quot;AMER&#92;&quot; &amp;&amp; (&#39;Country&#39; ==  &#92;&quot;Canada&#92;&quot; ))then &#92;&quot;Canada&#92;&quot; when (&#39;Region&#39; == &#92;&quot;AMER&#92;&quot; &amp;&amp; (&#39;Country&#39; ==  &#92;&quot;United States&#92;&quot; ))then &#92;&quot;United States&#92;&quot; when (&#39;Region&#39; == &#92;&quot;AMER&#92;&quot;)then &#92;&quot;RO AMER&#92;&quot; when  (&#39;Region&#39; == &#92;&quot;EMEA&#92;&quot; &amp;&amp; (&#39;Country&#39; ==  &#92;&quot;United Kingdom&#92;&quot; ))then &#92;&quot;United Kingdom&#92;&quot;  when  (&#39;Region&#39; == &#92;&quot;EMEA&#92;&quot; &amp;&amp; (&#39;Country&#39; ==  &#92;&quot;France&#92;&quot; ))then &#92;&quot;France&#92;&quot; when (&#39;Region&#39; == &#92;&quot;EMEA&#92;&quot; &amp;&amp; (&#39;Country&#39; ==  &#92;&quot;Germany&#92;&quot; ))then &#92;&quot;Germany&#92;&quot; when  (&#39;Region&#39; == &#92;&quot;EMEA&#92;&quot; &amp;&amp; (&#39;Country&#39; ==  &#92;&quot;Netherlands&#92;&quot; ))then &#92;&quot;Netherlands&#92;&quot; when (&#39;Region&#39; == &#92;&quot;EMEA&#92;&quot; ) then &#92;&quot;RO EMEA&#92;&quot; when  (&#39;Region&#39; == &#92;&quot;APAC&#92;&quot; &amp;&amp; (&#39;Country&#39; ==  &#92;&quot;Australia&#92;&quot; ))then &#92;&quot;ANZ&#92;&quot;  when  (&#39;Region&#39; == &#92;&quot;APAC&#92;&quot; &amp;&amp; (&#39;Country&#39; ==  &#92;&quot;ANZ&#92;&quot; ))then &#92;&quot;ANZ&#92;&quot;when  (&#39;Region&#39; == &#92;&quot;APAC&#92;&quot; &amp;&amp; (&#39;Country&#39; ==  &#92;&quot;India&#92;&quot; ))then &#92;&quot;India&#92;&quot;  when  (&#39;Region&#39; == &#92;&quot;APAC&#92;&quot; )then &#92;&quot;RO APAC&#92;&quot;  when  (&#39;Region&#39; == &#92;&quot;APAC&#92;&quot; )then &#92;&quot;RO APAC&#92;&quot;  when  (&#39;Region&#39; == &#92;&quot;JP&#92;&quot; &amp;&amp; (&#39;Country&#39; ==  &#92;&quot;Japan&#92;&quot; ))then &#92;&quot;Japan&#92;&quot; when (&#39;Region&#39; == &#92;&quot;JP&#92;&quot; &amp;&amp; (&#39;Country&#39; == &#92;&quot;South Korea&#92;&quot;)) then &#92;&quot;South Korea&#92;&quot; when  (&#39;Region&#39; == &#92;&quot;JP&#92;&quot;  )then &#92;&quot;RO JP&#92;&quot;  when  (&#39;Region&#39; == &#92;&quot;LACA&#92;&quot; &amp;&amp; (&#39;Country&#39; ==  &#92;&quot;Brazil&#92;&quot; ))then &#92;&quot;Brazil&#92;&quot; when (&#39;Region&#39; == &#92;&quot;LACA&#92;&quot; )then &#92;&quot;RO LACA&#92;&quot; when (&#39;Region&#39; == &#92;&quot;Other&#92;&quot; )then &#92;&quot;Other&#92;&quot; else &#92;&quot;ERROR&#92;&quot; end&quot;}"
        ]
      },
      "Filter_Lead": {
        "broadcastFacet": true,
        "groups": [
          "Lead"
        ],
        "numbers": [],
        "query": "q = load &quot;APM_ACV&quot;;\nq = group q by (&#39;Lead&#39;);\nq = foreach q generate case when &#39;Lead&#39; == &quot;Tony Owens&quot; then &quot;1. Tony Owens&quot; when &#39;Lead&#39; == &quot;Brian Millham&quot; then &quot;2. Brian Millham&quot; when &#39;Lead&#39; == &quot;Miguel Milano&quot; then &quot;3. Miguel Milano&quot; when &#39;Lead&#39; == &quot;Mark Innes&quot; then &quot;4. Mark Innes&quot; when &#39;Lead&#39; == &quot;Shinichi Koide&quot; then &quot;5. Shinichi Koide&quot; when &#39;Lead&#39; == &quot;Dave Rey&quot; then &quot;6. Dave Rey&quot; when &#39;Lead&#39; == &quot;Maria Martinez&quot; then &quot;7. Maria Martinez&quot;else &quot;9. unkown&quot; end as Lead_Rank  ,&#39;Lead&#39; as &#39;Lead&#39;, count() as &#39;count&#39;;\nq = order q by &#39;Lead_Rank&#39; asc;\nq = limit q 2000;",
        "receiveFacet": true,
        "selectMode": "multi",
        "strings": [
          "Lead"
        ],
        "type": "saql",
        "useGlobal": true,
        "visualizationParameters": {
          "parameters": {
            "autoFitMode": "none",
            "showValues": true,
            "bins": {
              "breakpoints": {
                "high": 100,
                "low": 0
              },
              "bands": {
                "high": {
                  "color": "#008000",
                  "label": ""
                },
                "low": {
                  "color": "#B22222",
                  "label": ""
                },
                "medium": {
                  "color": "#ffa500",
                  "label": ""
                }
              }
            },
            "legend": {
              "showHeader": true,
              "show": true,
              "customSize": "auto",
              "position": "right-top",
              "inside": false
            },
            "axisMode": "multi",
            "tooltip": {
              "showBinLabel": true,
              "measures": "",
              "showPercentage": true,
              "showDimensions": true,
              "showMeasures": true,
              "customizeTooltip": false,
              "dimensions": ""
            },
            "visualizationType": "hbar",
            "title": {
              "fontSize": 14,
              "subtitleFontSize": 11,
              "label": "",
              "align": "center",
              "subtitleLabel": ""
            },
            "binValues": false,
            "trellis": {
              "flipLabels": false,
              "showGridLines": true,
              "size": [
                100,
                100
              ],
              "enable": false,
              "type": "x",
              "chartsPerLine": 4
            },
            "measureAxis2": {
              "sqrtScale": false,
              "showTitle": true,
              "showAxis": true,
              "title": "",
              "customDomain": {
                "showDomain": false
              }
            },
            "measureAxis1": {
              "sqrtScale": false,
              "showTitle": true,
              "showAxis": true,
              "title": "",
              "customDomain": {
                "showDomain": false
              }
            },
            "theme": "wave",
            "dimensionAxis": {
              "showTitle": true,
              "customSize": "auto",
              "showAxis": true,
              "title": "",
              "icons": {
                "useIcons": false,
                "iconProps": {
                  "fit": "cover",
                  "column": "",
                  "type": "round"
                }
              }
            }
          },
          "type": "chart"
        }
      },
      "Table_Page_3_Header": {
        "broadcastFacet": true,
        "groups": [],
        "label": "Table_Page_3_Header",
        "numbers": [],
        "query": "MasterHierarchy = load &quot;Master_Hierarchy&quot;;\nMasterHierarchy = filter MasterHierarchy by &#39;Level_1&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nACV = load &quot;APM_ACV&quot;;\nACV = filter ACV by &#39;Segment&#39; != &quot;CSG&quot;;\nACV = filter ACV by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nACV = filter ACV by {{column(Filter_Lead_1.selection,[&quot;Lead_1&quot;]).asEquality(&#39;Lead_1&#39;)}};\nACV = filter ACV by {{column(Filter_Segment.selection,[&quot;Segment&quot;]).asEquality(&#39;Segment&#39;)}};\nACV = filter ACV by {{column(Filter_Industry.selection,[&quot;Industry&quot;]).asEquality(&#39;Industry&#39;)}};\nACV = filter ACV by {{column(Filter_Lead.selection,[&quot;Lead&quot;]).asEquality(&#39;Lead&#39;)}};\nACV = filter ACV by {{column(Filter_Cloud.selection,[&quot;Cloud&quot;]).asEquality(&#39;Cloud&#39;)}};\nACV = filter ACV by &#39;Cloud&#39; in {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};;\nACV = group ACV by (&#39;Cloud&#39;,&#39;Subcloud&#39;, &#39;Quarter&#39;,&#39;Month&#39;, &#39;Fiscal_Year&#39;, &#39;Region&#39; , &#39;Country&#39;);\nACV = foreach ACV generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39; ,&#39;Month&#39; as &#39;Month&#39;,sum(&#39;ACV&#39;) as &#39;ACV&#39;, &#39;Region&#39; as &#39;Region&#39;,  {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; ACV = filter ACV by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}} ;\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD NONE For Fake Header line----------------------------------------------------------------------------------------------------------------------------------------------------------\n\nAPM_None = load &quot;APM_ACV&quot;;\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------FILTER ACV----------------------------------------------------------------------------------------------------------------------------------------------------------\n\nq2_CYACV = filter ACV by &#39;Month&#39; in   {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}}  &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYACV = filter ACV by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}}  &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYACV = filter ACV by &#39;Month&#39; in   {{cell(Selector_Quarter.selection,0,&quot;YTD_Month&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYACV = filter ACV by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;YTD_Month&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nn\nAOV = load &quot;APM_AOV&quot;;\nAOV = filter AOV by &#39;Segment&#39; != &quot;CSG&quot;;\nAOV = filter AOV by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\n--AOV = filter AOV by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nAOV = foreach AOV generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;AOV&#39;) as &#39;AOV&#39;,&#39;Region&#39; as &#39;Region&#39;,  {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39;; AOV = filter AOV by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------FILTER AOV ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nq2_CYAOV = filter AOV by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYAOV = filter AOV by &#39;Month&#39; in   {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYAOV = filter AOV by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;YTD_Month_cum&quot;).asString()}}&amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYAOV = filter AOV by &#39;Month&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Month_cum&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------/////////////////////////////-----------LOAD ATTRITION ----------------/////////////////////////////////////////\n\nAttrition = load &quot;APM_Attrition&quot;; Attrition = filter Attrition by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}} ;\nAttrition = filter Attrition by &#39;Segment&#39; != &quot;CSG&quot;;\nAttrition = filter Attrition by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nAttrition = filter Attrition by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nAttrition = foreach Attrition generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Attrition_Product&#39;)*-1 as &#39;Attrition_Product&#39;, sum(&#39;TTM_Product&#39;)*-1 as &#39;TTM_Product&#39;,sum(&#39;AOV_twelve_month_ago_Product&#39;) as &#39;AOV_twelve_month_ago&#39;,&#39;Region&#39; as &#39;Region&#39;;\n----------------------------------------------------------------------------------------------FILTER ATTRITION -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nq2_CYATT = filter Attrition by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYATT = filter Attrition by &#39;Month&#39; in   {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYATT = filter Attrition by &#39;Month&#39; in   {{cell(Selector_Quarter.selection,0,&quot;YTD_Month&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYATT = filter Attrition by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;YTD_Month&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq4_CYATT = filter Attrition by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;YTD_Month_cum&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\n------------------------------------------------------------------------------------------------------------------------------------------------LOAD PIPEGEN--------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nPipegen = load &quot;APM_Pipegen1&quot;;\nPipegen = filter Pipegen by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};Pipegen = filter Pipegen by &#39;Segment&#39; != &quot;CSG&quot;;\nPipegen = filter Pipegen by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nPipegen = group Pipegen by (&#39;Fiscal_Year&#39;,&#39;Quarter&#39;, &#39;Region&#39;, &#39;Cloud&#39;, &#39;Month&#39;,&#39;Subcloud&#39;, &#39;Cloud_2&#39;,&#39;Country&#39;);\nPipegen = foreach Pipegen generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Pipegen&#39;) as &#39;Pipegen&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; Pipegen = filter Pipegen by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}} ;;\n\nq2_CYPipegen = filter Pipegen by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYPipegen = filter Pipegen by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYPipegen = filter Pipegen by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_pipegen&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYPipegen = filter Pipegen by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_pipegen&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD /FILTER HC---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nHC = load &quot;APM_HC&quot;;\nHC = filter HC by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nHC = foreach HC generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;SE&#39;) as &#39;SE&#39;,sum(&#39;AE&#39;) as &#39;AE&#39;,sum(&#39;Co_Prime&#39;) as &#39;Co_Prime&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; HC = filter HC by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\n--HC = filter HC by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYHC = filter HC by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYHC = filter HC by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_HC = filter HC by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYHC = filter HC by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_HC&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYHC = filter HC by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_HC&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_HC = filter HC by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_HC&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD SWE INFRA------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nSW = load &quot;APM_SWE_INFRA&quot;;\nSW = filter SW by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nSW = foreach SW generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;SWE&#39;) as &#39;SWE&#39;,sum(&#39;INFRA&#39;) as &#39;INFRA&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39;; SW = filter SW by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};;\nSW = filter SW by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYSW = filter SW by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYSW = filter SW by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_SW = filter SW by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYSW = filter SW by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_SW&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYSW = filter SW by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_SW&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_SW = filter SW by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_SW&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD T_P------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nT_P = load &quot;APM_T_P&quot;;\n--T_P = filter T_P by &#39;Cloud&#39; != &quot;TOTALS/SUMMARY&quot;;\nT_P = filter T_P by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nT_P = foreach T_P generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Cloud_m0_CTS&#39;) as &#39;CTS&#39;,sum(&#39;Cloud_m0_CTS1&#39;) as &#39;CTS1&#39;,&#39;Region&#39; as &#39;Region&#39;,  {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; T_P = filter T_P by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};;\n--T_P = filter T_P by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYT_P = filter T_P by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYT_P = filter T_P by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_T_P = filter T_P by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYT_P = filter T_P by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_cum&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYT_P = filter T_P by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_cum&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_T_P = filter T_P by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_cum&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD TRANSACTION------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nTRANSACTION = load &quot;APM_T_P_Transactions&quot;;TRANSACTION = filter TRANSACTION by &#39;Cloud&#39; != &quot;TOTALS/SUMMARY&quot;;\nTRANSACTION = filter TRANSACTION by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nTRANSACTION = foreach TRANSACTION generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Transactions&#39;) as &#39;Transactions&#39;,&#39;Region&#39; as &#39;Region&#39;,  {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; TRANSACTION = filter TRANSACTION by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};;\nTRANSACTION = filter TRANSACTION by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYTRANSACTION = filter TRANSACTION by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYTRANSACTION = filter TRANSACTION by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_TRANSACTION = filter TRANSACTION by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYTRANSACTION = filter TRANSACTION by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYTRANSACTION = filter TRANSACTION by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_TRANSACTION = filter TRANSACTION by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD AVAILABILITY------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nAVAILABILITY = load &quot;APM_TECH_AVAILABILITY&quot;;AVAILABILITY = filter AVAILABILITY by &#39;Cloud&#39; == &quot;TOTALS/SUMMARY&quot;;\nAVAILABILITY = filter AVAILABILITY by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nAVAILABILITY = foreach AVAILABILITY generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Availability&#39;)*100 as &#39;Availability&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; AVAILABILITY = filter AVAILABILITY by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};;\n--AVAILABILITY = filter AVAILABILITY by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYAVAILABILITY = filter AVAILABILITY by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYAVAILABILITY = filter AVAILABILITY by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_AVAILABILITY = filter AVAILABILITY by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYAVAILABILITY = filter AVAILABILITY by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYAVAILABILITY = filter AVAILABILITY by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_AVAILABILITY = filter AVAILABILITY by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD REDACCOUNTS------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nREDACCOUNTS = load &quot;APM_REDACCOUNTS&quot;;REDACCOUNTS = filter REDACCOUNTS by &#39;Cloud&#39; != &quot;TOTALS/SUMMARY&quot;;\nREDACCOUNTS = filter REDACCOUNTS by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nREDACCOUNTS = foreach REDACCOUNTS generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Red_Accounts&#39;) as &#39;Red_Accounts&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; REDACCOUNTS = filter REDACCOUNTS by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};;\nREDACCOUNTS = filter REDACCOUNTS by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYREDACCOUNTS = filter REDACCOUNTS by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYREDACCOUNTS = filter REDACCOUNTS by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_REDACCOUNTS = filter REDACCOUNTS by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYREDACCOUNTS = filter REDACCOUNTS by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYREDACCOUNTS = filter REDACCOUNTS by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_REDACCOUNTS = filter REDACCOUNTS by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD MARKET SHARE------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nSHARE = load &quot;APM_MARKET_SHARE&quot;;SHARE = filter SHARE by &#39;Cloud&#39; != &quot;TOTALS/SUMMARY&quot;;\nSHARE = filter SHARE by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nSHARE = foreach SHARE generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;TAM&#39;) as &#39;TAM&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; SHARE = filter SHARE by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};;\nSHARE = filter SHARE by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYSHARE = filter SHARE by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYSHARE = filter SHARE by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_SHARE = filter SHARE by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYSHARE = filter SHARE by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYSHARE = filter SHARE by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_SHARE = filter SHARE by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD CUSTOMER------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nCUSTOMER = load &quot;APM_MARKET_CUSTOMER&quot;;CUSTOMER = filter CUSTOMER by &#39;Cloud&#39; != &quot;TOTALS/SUMMARY&quot;;\nCUSTOMER = filter CUSTOMER by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nCUSTOMER = foreach CUSTOMER generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Customer&#39;) as &#39;Customer&#39;,&#39;Region&#39; as &#39;Region&#39;,  {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39;; CUSTOMER = filter CUSTOMER by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};;\nCUSTOMER = filter CUSTOMER by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYCUSTOMER = filter CUSTOMER by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYCUSTOMER = filter CUSTOMER by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_CUSTOMER = filter CUSTOMER by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYCUSTOMER = filter CUSTOMER by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYCUSTOMER = filter CUSTOMER by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_CUSTOMER = filter CUSTOMER by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------Grouping------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nresult_Total = group q2_CYACV by all full, q2_PYACV by all full, q3_CYACV by all full, q3_PYACV by all full, q2_CYAOV by all full, q2_PYAOV by all full, q3_CYAOV by all full, q3_PYAOV by all full, q2_CYATT by all full, q2_PYATT by all full, q3_CYATT by all full, q3_PYATT by all full,q4_CYATT by all full,  q2_CYPipegen by all full, q2_PYPipegen by all full, q3_CYPipegen by all full, q3_PYPipegen by all full,q2_CYHC by all full, q2_PYHC by all full,q2_PY_2_HC by all full, q3_CYHC by all full, q3_PYHC by all full,q3_PY_2_HC by all full, q2_CYSW by all full, q2_PYSW by all full,q2_PY_2_SW by all full, q3_CYSW by all full, q3_PYSW by all full,q3_PY_2_SW by all full, q2_CYT_P by all full, q2_PYT_P by all full, q3_CYT_P by all full, q3_PYT_P by all full, q2_CYTRANSACTION by all full, q2_PYTRANSACTION by all full, q3_CYTRANSACTION by all full, q3_PYTRANSACTION by all full, q2_CYAVAILABILITY by all full, q2_PYAVAILABILITY by all full, q3_CYAVAILABILITY by all full, q3_PYAVAILABILITY by all full, q2_CYREDACCOUNTS by all full, q2_PYREDACCOUNTS by all full, q3_CYREDACCOUNTS by all full, q3_PYREDACCOUNTS by all full, q2_CYSHARE by all full, q2_PYSHARE by all full, q3_CYSHARE by all full, q3_PYSHARE by all full, q2_CYCUSTOMER by all full, q2_PYCUSTOMER by all full, q3_CYCUSTOMER by all full, q3_PYCUSTOMER by all;\nn\nresult_Total = foreach result_Total generate &quot;TOTAL&quot; as &#39;Cloud&#39;, coalesce(sum(q2_CYACV.&#39;ACV&#39;),0) as &#39;A&#39;, coalesce(sum(q2_PYACV.&#39;ACV&#39;),0) as &#39;B&#39;, coalesce(sum(q3_CYACV.&#39;ACV&#39;),0) as &#39;C&#39;, coalesce(sum(q3_PYACV.&#39;ACV&#39;),0) as &#39;D&#39;,coalesce(sum(q2_CYAOV.&#39;AOV&#39;),0) as &#39;E&#39;, coalesce(sum(q2_PYAOV.&#39;AOV&#39;),0) as &#39;F&#39;, coalesce(sum(q3_CYAOV.&#39;AOV&#39;),0) as &#39;G&#39;, coalesce(sum(q3_PYAOV.&#39;AOV&#39;),0) as &#39;H&#39;,coalesce(sum(q2_CYATT.&#39;Attrition_Product&#39;),0) as &#39;Attrition_CY_Q2&#39;,coalesce(sum(q3_CYATT.&#39;Attrition_Product&#39;),0) as &#39;Attrition_CY_Q3&#39;,coalesce(round(sum(q2_CYATT.&#39;TTM_Product&#39;), 0), 0) as &#39;TTM_Product_CY_Q2&#39; ,coalesce(round(sum(q2_CYATT.&#39;AOV_twelve_month_ago&#39;), 0), 0) as &#39;AOV_twelve_month_ago_CY_Q2&#39;,coalesce(round(sum(q4_CYATT.&#39;TTM_Product&#39;), 0), 0) as &#39;TTM_Product_CY_Q3&#39; ,coalesce(round(sum(q4_CYATT.&#39;AOV_twelve_month_ago&#39;), 0), 0) as &#39;AOV_twelve_month_ago_CY_Q3&#39;, coalesce(sum(q2_CYPipegen.&#39;Pipegen&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Pipegen Absolute&#39;, coalesce(sum(q3_CYPipegen.&#39;Pipegen&#39;), 0) as &#39;YTD Pipegen Absolute&#39;, ((coalesce(sum(q2_CYPipegen.&#39;Pipegen&#39;), 0) - coalesce(sum(q2_PYPipegen.&#39;Pipegen&#39;), 0)) / coalesce(sum(q2_PYPipegen.&#39;Pipegen&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Pipegen Growth&#39;, ((coalesce(sum(q3_CYPipegen.&#39;Pipegen&#39;), 0) - coalesce(sum(q3_PYPipegen.&#39;Pipegen&#39;), 0)) / coalesce(sum(q3_PYPipegen.&#39;Pipegen&#39;), 0)) * 100 as &#39;YTD Pipegen Growth&#39;,coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE Absolute&#39;, coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) as &#39;YTD SE Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) - coalesce(sum(q2_PYHC.&#39;SE&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;SE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SE Growth&#39;,(power(coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;SE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;SE&#39;), 0),(1/2))-1)*100 as &#39;YTD SE CAGR&#39;, ((coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) - coalesce(sum(q3_PYHC.&#39;SE&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;SE&#39;), 0)) * 100 as &#39;YTD SE Growth&#39;, coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE Absolute&#39;, coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) as &#39;YTD AE Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) - coalesce(sum(q2_PYHC.&#39;AE&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;AE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} AE Growth&#39;, ((coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) - coalesce(sum(q3_PYHC.&#39;AE&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;AE&#39;), 0)) * 100 as &#39;YTD AE Growth&#39;,(power(coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;AE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;AE&#39;), 0),(1/2))-1)*100 as &#39;YTD AE CAGR&#39;, coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime Absolute&#39;, coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) as &#39;YTD Co_Prime Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) - coalesce(sum(q2_PYHC.&#39;Co_Prime&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;Co_Prime&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Co_Prime Growth&#39;, ((coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) - coalesce(sum(q3_PYHC.&#39;Co_Prime&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;Co_Prime&#39;), 0)) * 100 as &#39;YTD Co_Prime Growth&#39;,(power(coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;Co_Prime&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;Co_Prime&#39;), 0),(1/2))-1)*100 as &#39;YTD Co_Prime CAGR&#39;, coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE Absolute&#39;, coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) as &#39;YTD SWE Absolute&#39;, ((coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) - coalesce(sum(q2_PYSW.&#39;SWE&#39;), 0)) / coalesce(sum(q2_PYSW.&#39;SWE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SWE Growth&#39;, ((coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) - coalesce(sum(q3_PYSW.&#39;SWE&#39;), 0)) / coalesce(sum(q3_PYSW.&#39;SWE&#39;), 0)) * 100 as &#39;YTD SWE Growth&#39;,(power(coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) / coalesce(sum(q2_PY_2_SW.&#39;SWE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE CAGR&#39;,(power(coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) / coalesce(sum(q3_PY_2_SW.&#39;SWE&#39;), 0),(1/2))-1)*100 as &#39;YTD SWE CAGR&#39;, coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA Absolute&#39;, coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) as &#39;YTD INFRA Absolute&#39;, ((coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) - coalesce(sum(q2_PYSW.&#39;INFRA&#39;), 0)) / coalesce(sum(q2_PYSW.&#39;INFRA&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} INFRA Growth&#39;, ((coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) - coalesce(sum(q3_PYSW.&#39;INFRA&#39;), 0)) / coalesce(sum(q3_PYSW.&#39;INFRA&#39;), 0)) * 100 as &#39;YTD INFRA Growth&#39;,(power(coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) / coalesce(sum(q2_PY_2_SW.&#39;INFRA&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA CAGR&#39;,(power(coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) / coalesce(sum(q3_PY_2_SW.&#39;INFRA&#39;), 0),(1/2))-1)*100 as &#39;YTD INFRA CAGR&#39;, coalesce(sum(q2_CYT_P.&#39;CTS&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} CTS Absolute&#39;, coalesce(sum(q3_CYT_P.&#39;CTS&#39;), 0) as &#39;YTD CTS Absolute&#39;, coalesce(sum(q2_CYT_P.&#39;CTS1&#39;), 0)  * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} CTS Growth&#39;, coalesce(sum(q3_CYT_P.&#39;CTS1&#39;), 0)  * 100 as &#39;YTD CTS Growth&#39;, coalesce(sum(q2_CYTRANSACTION.&#39;Transactions&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Transactions Absolute&#39;, coalesce(sum(q3_CYTRANSACTION.&#39;Transactions&#39;), 0) as &#39;YTD Transactions Absolute&#39;, ((coalesce(sum(q2_CYTRANSACTION.&#39;Transactions&#39;), 0) - coalesce(sum(q2_PYTRANSACTION.&#39;Transactions&#39;), 0)) / coalesce(sum(q2_PYTRANSACTION.&#39;Transactions&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Transactions Growth&#39;, ((coalesce(sum(q3_CYTRANSACTION.&#39;Transactions&#39;), 0) - coalesce(sum(q3_PYTRANSACTION.&#39;Transactions&#39;), 0)) / coalesce(sum(q3_PYTRANSACTION.&#39;Transactions&#39;), 0)) * 100 as &#39;YTD Transactions Growth&#39;, coalesce(sum(q2_CYAVAILABILITY.&#39;Availability&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Availability Absolute&#39;, coalesce(sum(q3_CYAVAILABILITY.&#39;Availability&#39;), 0) as &#39;YTD Availability Absolute&#39;, ((coalesce(sum(q2_CYAVAILABILITY.&#39;Availability&#39;), 0) - coalesce(sum(q2_PYAVAILABILITY.&#39;Availability&#39;), 0)) / coalesce(sum(q2_PYAVAILABILITY.&#39;Availability&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Availability Growth&#39;, ((coalesce(sum(q3_CYAVAILABILITY.&#39;Availability&#39;), 0) - coalesce(sum(q3_PYAVAILABILITY.&#39;Availability&#39;), 0)) / coalesce(sum(q3_PYAVAILABILITY.&#39;Availability&#39;), 0)) * 100 as &#39;YTD Availability Growth&#39;,  coalesce(sum(q2_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Red_Accounts Absolute&#39;, coalesce(sum(q3_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) as &#39;YTD Red_Accounts Absolute&#39;, ((coalesce(sum(q2_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) - coalesce(sum(q2_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) / coalesce(sum(q2_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Red_Accounts Growth&#39;, ((coalesce(sum(q3_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) - coalesce(sum(q3_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) / coalesce(sum(q3_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) * 100 as &#39;YTD Red_Accounts Growth&#39;, coalesce(sum(q2_CYSHARE.&#39;TAM&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} TAM Absolute&#39;, coalesce(sum(q3_CYSHARE.&#39;TAM&#39;), 0) as &#39;YTD TAM Absolute&#39;, ((coalesce(sum(q2_CYSHARE.&#39;TAM&#39;), 0) - coalesce(sum(q2_PYSHARE.&#39;TAM&#39;), 0)) / coalesce(sum(q2_PYSHARE.&#39;TAM&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} TAM Growth&#39;, ((coalesce(sum(q3_CYSHARE.&#39;TAM&#39;), 0) - coalesce(sum(q3_PYSHARE.&#39;TAM&#39;), 0)) / coalesce(sum(q3_PYSHARE.&#39;TAM&#39;), 0)) * 100 as &#39;YTD TAM Growth&#39;, coalesce(sum(q2_CYCUSTOMER.&#39;Customer&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Customer Absolute&#39;, coalesce(sum(q3_CYCUSTOMER.&#39;Customer&#39;), 0) as &#39;YTD Customer Absolute&#39;, ((coalesce(sum(q2_CYCUSTOMER.&#39;Customer&#39;), 0) - coalesce(sum(q2_PYCUSTOMER.&#39;Customer&#39;), 0)) / coalesce(sum(q2_PYCUSTOMER.&#39;Customer&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Customer Growth&#39;, ((coalesce(sum(q3_CYCUSTOMER.&#39;Customer&#39;), 0) - coalesce(sum(q3_PYCUSTOMER.&#39;Customer&#39;), 0)) / coalesce(sum(q3_PYCUSTOMER.&#39;Customer&#39;), 0)) * 100 as &#39;YTD Customer Growth&#39;;\nnresult_Total = foreach result_Total generate &#39;A&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} ACV Absolute&#39;,  &#39;C&#39; as  &#39;YTD ACV Absolute&#39;, ((A -B) / B) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} ACV Growth&#39;,((C - D) / D) * 100 as &#39;YTD ACV Growth&#39;,&#39;E&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AOV Absolute&#39;,  &#39;G&#39; as  &#39;YTD AOV Absolute&#39;, ((E -F) / F) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} AOV Growth&#39;,  ((G - H) / H) * 100  as &#39;YTD AOV Growth&#39;, coalesce(sum(&#39;Attrition_CY_Q2&#39;),0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Attrition Absolute&#39;, coalesce(sum(&#39;Attrition_CY_Q3&#39;),0) as &#39;YTD Attrition Absolute&#39;,(coalesce(round(sum(&#39;TTM_Product_CY_Q2&#39;), 0), 0) / coalesce(round(sum(AOV_twelve_month_ago_CY_Q2), 0), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Attrition TTM Rate&#39;, (coalesce(round(sum(&#39;TTM_Product_CY_Q3&#39;), 0), 0) / coalesce(round(sum(AOV_twelve_month_ago_CY_Q3), 0), 0)) * 100 as &#39;YTD Attrition TTM Rate&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Pipegen Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} PipeGen Absolute&#39;,&#39;YTD Pipegen Absolute&#39; as &#39;YTD PipeGen Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Pipegen Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} PipeGen Growth&#39;,&#39;YTD Pipegen Growth&#39; as &#39;YTD PipeGen Growth&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AEs&#39;,&#39;YTD AE Absolute&#39; as &#39;YTD AE Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE CAGR&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE CAGR&#39;,&#39;YTD AE CAGR&#39; as &#39;YTD AE CAGR&#39; ,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime&#39;,&#39;YTD Co_Prime Absolute&#39; as &#39;YTD Co_Prime Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime CAGR&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime CAGR&#39;,&#39;YTD Co_Prime CAGR&#39; as &#39;YTD Co_Prime CAGR&#39;, &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SEs&#39;,&#39;YTD SE Absolute&#39; as &#39;YTD SE Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE CAGR&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE CAGR&#39;,&#39;YTD SE CAGR&#39; as &#39;YTD SE CAGR&#39; ,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE&#39;,&#39;YTD SWE Absolute&#39; as &#39;YTD SWE Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SWE Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SWE Growth&#39;,&#39;YTD SWE Growth&#39; as &#39;YTD SWE Growth&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA&#39;,&#39;YTD INFRA Absolute&#39; as &#39;YTD INFRA Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} INFRA Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} INFRA Growth&#39;,&#39;YTD INFRA Growth&#39; as &#39;YTD INFRA Growth&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} CTS Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} CTS Absolute&#39;,&#39;YTD CTS Absolute&#39; as &#39;YTD CTS Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} CTS Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} CTS Growth&#39;,&#39;YTD CTS Growth&#39; as &#39;YTD CTS Growth&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Availability Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Availability Absolute&#39;,&#39;YTD Availability Absolute&#39; as &#39;YTD Availability Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Availability Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Availability Growth&#39;,&#39;YTD Availability Growth&#39; as &#39;YTD Availability Growth&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Transactions Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Transactions Absolute&#39;,&#39;YTD Transactions Absolute&#39; as &#39;YTD Transactions Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Transactions Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Transactions Growth&#39;,&#39;YTD Transactions Growth&#39; as &#39;YTD Transactions Growth&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Customer Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Customer Absolute&#39;,&#39;YTD Customer Absolute&#39; as &#39;YTD Customer Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Customer Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Customer Growth&#39;,&#39;YTD Customer Growth&#39; as &#39;YTD Customer Growth&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} TAM Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} TAM Absolute&#39;,&#39;YTD TAM Absolute&#39; as &#39;YTD TAM Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} TAM Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} TAM Growth&#39;,&#39;YTD TAM Growth&#39; as &#39;YTD TAM Growth&#39;;\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------NONE for Fake HEADER--------------------------------------------------------------------------------------------------------------\n;result_none = group APM_None by &#39;all&#39;; result_none = foreach result_none generate 0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} ACV Absolute&#39;,  0 as  &#39;YTD ACV Absolute&#39;, 0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} ACV Growth&#39;,0 as &#39;YTD ACV Growth&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AOV Absolute&#39;, 0 as  &#39;YTD AOV Absolute&#39;, 0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} AOV Growth&#39;, 0 as &#39;YTD AOV Growth&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Attrition Absolute&#39;,0 as &#39;YTD Attrition Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Attrition TTM Rate&#39;, 0 as &#39;YTD Attrition TTM Rate&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} PipeGen Absolute&#39;,0 as &#39;YTD PipeGen Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} PipeGen Growth&#39;,0 as &#39;YTD PipeGen Growth&#39;, 0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AEs&#39;,0 as &#39;YTD AE Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE CAGR&#39;,0 as &#39;YTD AE CAGR&#39; ,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime&#39;,0 as &#39;YTD Co_Prime Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime CAGR&#39;,0 as &#39;YTD Co_Prime CAGR&#39;, 0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SEs&#39;,0 as &#39;YTD SE Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE CAGR&#39;,0 as &#39;YTD SE CAGR&#39; ,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE&#39;,0 as &#39;YTD SWE Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SWE Growth&#39;,0 as &#39;YTD SWE Growth&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA&#39;,0 as &#39;YTD INFRA Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} INFRA Growth&#39;,0 as &#39;YTD INFRA Growth&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} CTS Absolute&#39;,0 as &#39;YTD CTS Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} CTS Growth&#39;,0 as &#39;YTD CTS Growth&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Availability Absolute&#39;,0 as &#39;YTD Availability Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Availability Growth&#39;,0 as &#39;YTD Availability Growth&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Transactions Absolute&#39;,0 as &#39;YTD Transactions Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Transactions Growth&#39;,0 as &#39;YTD Transactions Growth&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Customer Absolute&#39;,0 as &#39;YTD Customer Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Customer Growth&#39;,0 as &#39;YTD Customer Growth&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} TAM Absolute&#39;,0 as &#39;YTD TAM Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} TAM Growth&#39;,0 as &#39;YTD TAM Growth&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Red_Accounts Absolute&#39;,0 as &#39;YTD Red_Accounts Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Red_Accounts Growth&#39;,0 as &#39;YTD Red_Accounts Growth&#39;; \n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------UNION--------------------------------------------------------------------------------------------------------------\n;result_union = union result_none, result_Total;result_union = group result_union by &#39;all&#39;;  final_result = foreach result_union generate &quot;TOTAL                                                        &quot; as &#39;Cloud&#39;, sum( &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE&#39;) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE&#39;,sum(&#39;YTD SWE Absolute&#39;) as &#39;YTD SWE Absolute&#39;,sum(&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SWE Growth&#39;) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SWE Growth&#39;,sum(&#39;YTD SWE Growth&#39;) as &#39;YTD SWE Growth&#39;,sum(&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA&#39;) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA&#39;,sum(&#39;YTD INFRA Absolute&#39;) as &#39;YTD INFRA Absolute&#39;,sum(&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} INFRA Growth&#39;) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} INFRA Growth&#39;,sum(&#39;YTD INFRA Growth&#39;) as &#39;YTD INFRA Growth&#39;,sum(&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} CTS Absolute&#39;) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} CTS Absolute&#39;, sum(&#39;YTD CTS Absolute&#39;) as &#39;YTD CTS Absolute&#39;, sum(&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} CTS Growth&#39;) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} CTS Growth&#39;, sum(&#39;YTD CTS Growth&#39;) as  &#39;YTD CTS Growth&#39;,sum(&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Availability Absolute&#39;) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Availability Absolute&#39;, 0 as &#39;YTD Availability Absolute&#39;, sum(&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Availability Growth&#39;) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Availability Growth&#39;, 0 as  &#39;YTD Availability Growth&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Transactions Absolute&#39;, 0 as &#39;YTD Transactions Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Transactions Growth&#39;, 0 as  &#39;YTD Transactions Growth&#39; ; ",
        "receiveFacet": true,
        "selectMode": "none",
        "strings": [],
        "type": "saql",
        "useGlobal": true,
        "visualizationParameters": {
          "visualizationType": "hbar"
        }
      },
      "Selector_Quarter": {
        "broadcastFacet": true,
        "label": "Quarter",
        "selectMode": "single",
        "start": "{&quot;display&quot;:[&quot;Q2&quot;]}",
        "type": "staticflex",
        "values": [
          "{&quot;display&quot;:&quot;Q1&quot;,&quot;Quarter&quot;:&quot;[&#92;&quot;FYQ1&#92;&quot;]&quot;,&quot;Month&quot;:&quot;[&#92;&quot;February&#92;&quot;,&#92;&quot;March&#92;&quot;,&#92;&quot;April&#92;&quot;]&quot;,&quot;YTD_Month&quot;:&quot;[&#92;&quot;February&#92;&quot;,&#92;&quot;March&#92;&quot;,&#92;&quot;April&#92;&quot;,&#92;&quot;May&#92;&quot;,&#92;&quot;June&#92;&quot;,&#92;&quot;July&#92;&quot;]&quot;,&quot;YTD_Month_cum&quot;:&quot;[&#92;&quot;July&#92;&quot;]&quot;,&quot;YTD_Month_cum_attrit&quot;:&quot;[&#92;&quot;July&#92;&quot;]&quot;,&quot;YTD_Quarter&quot;:&quot;[&#92;&quot;FYQ1&#92;&quot;,&#92;&quot;FYQ2&#92;&quot;]&quot;,&quot;YTD_Quarter_cum&quot;:&quot;[&#92;&quot;FYQ2&#92;&quot;]&quot;,&quot;YTD_Quarter_pipegen&quot;:&quot;[&#92;&quot;FYQ1&#92;&quot;,&#92;&quot;FYQ2&#92;&quot;]&quot;,&quot;YTD_Quarter_HC&quot;:&quot;[&#92;&quot;FYQ2&#92;&quot;]&quot;,&quot;YTD_Quarter_SW&quot;:&quot;[&#92;&quot;FYQ2&#92;&quot;]&quot;,&quot;Unit_Month&quot;:&quot;Month&quot;,&quot;Unit_Quarter&quot;:&quot;Quarter&quot;,&quot;Header_name_absolute&quot;:&quot;Q1&quot;,&quot;Header_name_rate&quot;:&quot;YoY Q1&quot;,&quot;Line_Rank&quot;:&quot;HZZ&quot;,&quot;Filter_Table&quot;:&quot;[]&quot;,&quot;Filter_Table_2&quot;:&quot;[&#92;&quot;☁ Core Premier (A la Carte) &amp; Priority&#92;&quot;,&#92;&quot;    ↳  Core Premier (A la Carte)&#92;&quot;,&#92;&quot;    ↳  Core Premier Priority&#92;&quot;,&#92;&quot;☁ N/A&#92;&quot;,&#92;&quot;    ↳  N/A&#92;&quot;]&quot;}",
          "{&quot;display&quot;:&quot;Q2&quot;,&quot;Quarter&quot;:&quot;[&#92;&quot;FYQ2&#92;&quot;]&quot;,&quot;Month&quot;:&quot;[&#92;&quot;July&#92;&quot;,&#92;&quot;June&#92;&quot;,&#92;&quot;May&#92;&quot;]&quot;,&quot;YTD_Month&quot;:&quot;[&#92;&quot;February&#92;&quot;,&#92;&quot;March&#92;&quot;,&#92;&quot;April&#92;&quot;,&#92;&quot;May&#92;&quot;,&#92;&quot;June&#92;&quot;,&#92;&quot;July&#92;&quot;]&quot;,&quot;YTD_Month_cum&quot;:&quot;[&#92;&quot;July&#92;&quot;]&quot;,&quot;YTD_Month_cum_attrit&quot;:&quot;[&#92;&quot;July&#92;&quot;]&quot;,&quot;YTD_Quarter&quot;:&quot;[&#92;&quot;FYQ1&#92;&quot;,&#92;&quot;FYQ2&#92;&quot;]&quot;,&quot;YTD_Quarter_cum&quot;:&quot;[&#92;&quot;FYQ2&#92;&quot;]&quot;,&quot;YTD_Quarter_pipegen&quot;:&quot;[&#92;&quot;FYQ1&#92;&quot;,&#92;&quot;FYQ2&#92;&quot;]&quot;,&quot;YTD_Quarter_HC&quot;:&quot;[&#92;&quot;FYQ2&#92;&quot;]&quot;,&quot;YTD_Quarter_SW&quot;:&quot;[&#92;&quot;FYQ2&#92;&quot;]&quot;,&quot;QTD_Month&quot;:&quot;[&#92;&quot;July&#92;&quot;,&#92;&quot;June&#92;&quot;,&#92;&quot;May&#92;&quot;]&quot;,&quot;Unit_Month&quot;:&quot;Month&quot;,&quot;Unit_Quarter&quot;:&quot;Quarter&quot;,&quot;Header_name_absolute&quot;:&quot;Q2&quot;,&quot;Header_name_rate&quot;:&quot;YoY Q2&quot;,&quot;Line_Rank&quot;:&quot;HZZ&quot;,&quot;Filter_Table&quot;:&quot;[]&quot;,&quot;Filter_Table_2&quot;:&quot;[&#92;&quot;☁ Core Premier (A la Carte) &amp; Priority&#92;&quot;,&#92;&quot;    ↳  Core Premier (A la Carte)&#92;&quot;,&#92;&quot;    ↳  Core Premier Priority&#92;&quot;,&#92;&quot;☁ N/A&#92;&quot;,&#92;&quot;    ↳  N/A&#92;&quot;]&quot;}"
        ]
      },
      "Filter_Cloud": {
        "broadcastFacet": true,
        "groups": [
          "Cloud"
        ],
        "numbers": [],
        "query": "q = load &quot;APM_ACV&quot;;\nq = group q by (&#39;Cloud&#39;);\nq = foreach q generate case when &#39;Cloud&#39; == &quot;Sales Cloud&quot; then &quot;A. Sales Cloud&quot; when &#39;Cloud&#39; == &quot;Service Cloud&quot; then &quot;B. Service Cloud&quot; when &#39;Cloud&#39; == &quot;Marketing Cloud&quot; then &quot;C. Marketing Cloud&quot; when &#39;Cloud&#39; == &quot;Commerce Cloud&quot; then &quot;D. Commerce Cloud&quot; when &#39;Cloud&#39; == &quot;Salesforce Platform&quot; then &quot;E. Salesforce Platform&quot; when &#39;Cloud&#39; == &quot;Quip&quot; then &quot;F. Quip&quot; when &#39;Cloud&#39; == &quot;Other&quot; then &quot;G. Other&quot;when &#39;Cloud&#39; == &quot;Other CSG&quot; then &quot;H. Other CSG&quot; when &#39;Cloud&#39; == &quot;Core Premier (A la Carte) &amp; Priority&quot; then &quot;I. Core Premier (A la Carte) &amp; Priority&quot;  when &#39;Cloud&#39; == &quot;Success Cloud&quot; then &quot;J. Success Cloud&quot;else &quot;K. unkown&quot; end as Cloud_Rank  ,&#39;Cloud&#39; as &#39;Cloud&#39;, count() as &#39;count&#39;;\nq = order q by &#39;Cloud_Rank&#39; asc;q = filter q by &#39;Cloud&#39; not in [&quot;Core Premier (A la Carte) &amp; Priority&quot;];\nq = limit q 2000;",
        "receiveFacet": true,
        "selectMode": "multi",
        "strings": [
          "Cloud"
        ],
        "type": "saql",
        "useGlobal": false,
        "visualizationParameters": {
          "parameters": {
            "autoFitMode": "none",
            "showValues": true,
            "bins": {
              "breakpoints": {
                "high": 100,
                "low": 0
              },
              "bands": {
                "high": {
                  "color": "#008000",
                  "label": ""
                },
                "low": {
                  "color": "#B22222",
                  "label": ""
                },
                "medium": {
                  "color": "#ffa500",
                  "label": ""
                }
              }
            },
            "legend": {
              "showHeader": true,
              "show": true,
              "customSize": "auto",
              "position": "right-top",
              "inside": false
            },
            "axisMode": "multi",
            "tooltip": {
              "showBinLabel": true,
              "measures": "",
              "showPercentage": true,
              "showDimensions": true,
              "showMeasures": true,
              "customizeTooltip": false,
              "dimensions": ""
            },
            "visualizationType": "hbar",
            "title": {
              "fontSize": 14,
              "subtitleFontSize": 11,
              "label": "",
              "align": "center",
              "subtitleLabel": ""
            },
            "binValues": false,
            "trellis": {
              "flipLabels": false,
              "showGridLines": true,
              "size": [
                100,
                100
              ],
              "enable": false,
              "type": "x",
              "chartsPerLine": 4
            },
            "measureAxis2": {
              "sqrtScale": false,
              "showTitle": true,
              "showAxis": true,
              "title": "",
              "customDomain": {
                "showDomain": false
              }
            },
            "measureAxis1": {
              "sqrtScale": false,
              "showTitle": true,
              "showAxis": true,
              "title": "",
              "customDomain": {
                "showDomain": false
              }
            },
            "theme": "wave",
            "dimensionAxis": {
              "showTitle": true,
              "customSize": "auto",
              "showAxis": true,
              "title": "",
              "icons": {
                "useIcons": false,
                "iconProps": {
                  "fit": "cover",
                  "column": "",
                  "type": "round"
                }
              }
            }
          },
          "type": "chart"
        }
      },
      "Static_Region_Filter": {
        "broadcastFacet": true,
        "label": "Static_Cloud_Filter",
        "selectMode": "singlerequired",
        "start": "{&quot;display&quot;:[&quot;Region&quot;]}",
        "type": "staticflex",
        "values": [
          "{&quot;display&quot;:&quot;Region&quot;,&quot;filter&quot;:&quot;[&#92;&quot;AMER&#92;&quot;, &#92;&quot;EMEA&#92;&quot;, &#92;&quot;APAC&#92;&quot;, &#92;&quot;JP&#92;&quot;, &#92;&quot;LACA&#92;&quot;,&#92;&quot;LACA&#92;&quot;,&#92;&quot;Other&#92;&quot;]&quot;}"
        ]
      },
      "Table_Level_1_Measures_1": {
        "broadcastFacet": true,
        "groups": [],
        "label": "Table_Level_1_Measures_1",
        "numbers": [],
        "query": "MasterHierarchy = load &quot;Master_Hierarchy&quot;;\nMasterHierarchy = filter MasterHierarchy by &#39;Level_1&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nACV = load &quot;APM_ACV&quot;;\nACV = filter ACV by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nACV = filter ACV by &#39;Cloud&#39; in {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nACV = group ACV by (&#39;Cloud&#39;,&#39;Subcloud&#39;, &#39;Quarter&#39;,&#39;Month&#39;, &#39;Fiscal_Year&#39;, &#39;Region&#39;, &#39;Country&#39;);\nACV = foreach ACV generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39; ,&#39;Month&#39; as &#39;Month&#39;,sum(&#39;ACV&#39;) as &#39;ACV&#39;, &#39;Region&#39; as &#39;Region&#39;,  case when (&#39;Region&#39; == &quot;AMER&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Canada&quot; ))then &quot;Canada&quot; when (&#39;Region&#39; == &quot;AMER&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;United States&quot; ))then &quot;United States&quot; when (&#39;Region&#39; == &quot;AMER&quot;)then &quot;RO AMER&quot; when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;United Kingdom&quot; ))then &quot;United Kingdom&quot;  when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;France&quot; ))then &quot;France&quot; when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Germany&quot; ))then &quot;Germany&quot; when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Netherlands&quot; ))then &quot;Netherlands&quot; when (&#39;Region&#39; == &quot;EMEA&quot; ) then &quot;RO EMEA&quot; when  (&#39;Region&#39; == &quot;APAC&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Australia&quot; ))then &quot;Australia&quot;  when  (&#39;Region&#39; == &quot;APAC&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;India&quot; ))then &quot;India&quot; when  (&#39;Region&#39; == &quot;APAC&quot; )then &quot;RO APAC&quot;  when  (&#39;Region&#39; == &quot;APAC&quot; )then &quot;RO APAC&quot;  when  (&#39;Region&#39; == &quot;JP&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Japan&quot; ))then &quot;Japan&quot;  when  (&#39;Region&#39; == &quot;JP&quot;  )then &quot;RO JP&quot;  when  (&#39;Region&#39; == &quot;LACA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Brazil&quot; ))then &quot;Brazil&quot; when (&#39;Region&#39; == &quot;LACA&quot; )then &quot;RO LACA&quot; when (&#39;Region&#39; == &quot;Other&quot; )then &quot;Other&quot; else &quot;ERROR&quot; end as &#39;Country&#39; ; ACV = filter ACV by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}} ;\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------FILTER ACV----------------------------------------------------------------------------------------------------------------------------------------------------------\nq2_CYACV = filter ACV by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}}  &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYACV = filter ACV by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}}  &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYACV = filter ACV by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;YTD_Month&quot;).asString()}}  &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYACV = filter ACV by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;YTD_Month&quot;).asString()}}  &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nnAOV = load &quot;APM_AOV&quot;;\nAOV = filter AOV by &#39;Cloud&#39; in{{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nAOV = filter AOV by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nAOV = group AOV by (&#39;Cloud&#39;,&#39;Subcloud&#39;,  &#39;Quarter&#39;, &#39;Month&#39;, &#39;Fiscal_Year&#39;, &#39;Region&#39; , &#39;Country&#39;);\nAOV = foreach AOV generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;AOV&#39;) as &#39;AOV&#39;,&#39;Region&#39; as &#39;Region&#39;, case when (&#39;Region&#39; == &quot;AMER&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Canada&quot; ))then &quot;Canada&quot; when (&#39;Region&#39; == &quot;AMER&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;United States&quot; ))then &quot;United States&quot; when (&#39;Region&#39; == &quot;AMER&quot;)then &quot;RO AMER&quot; when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;United Kingdom&quot; ))then &quot;United Kingdom&quot;  when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;France&quot; ))then &quot;France&quot; when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Germany&quot; ))then &quot;Germany&quot; when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Netherlands&quot; ))then &quot;Netherlands&quot; when (&#39;Region&#39; == &quot;EMEA&quot; ) then &quot;RO EMEA&quot; when  (&#39;Region&#39; == &quot;APAC&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Australia&quot; ))then &quot;Australia&quot;when  (&#39;Region&#39; == &quot;APAC&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;India&quot; ))then &quot;India&quot;   when  (&#39;Region&#39; == &quot;APAC&quot; )then &quot;RO APAC&quot;  when  (&#39;Region&#39; == &quot;APAC&quot; )then &quot;RO APAC&quot;  when  (&#39;Region&#39; == &quot;JP&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Japan&quot; ))then &quot;Japan&quot;  when  (&#39;Region&#39; == &quot;JP&quot;  )then &quot;RO JP&quot;  when  (&#39;Region&#39; == &quot;LACA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Brazil&quot; ))then &quot;Brazil&quot; when (&#39;Region&#39; == &quot;LACA&quot; )then &quot;RO LACA&quot;  when (&#39;Region&#39; == &quot;Other&quot; )then &quot;Other&quot; else &quot;ERROR&quot; end as &#39;Country&#39; ; AOV = filter AOV by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------FILTER AOV ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nq2_CYAOV = filter AOV by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}}  &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYAOV = filter AOV by &#39;Month&#39; in   {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}}  &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYAOV = filter AOV by &#39;Month&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Month_cum&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYAOV = filter AOV by &#39;Month&#39; in{{cell(Selector_Quarter.selection,0,&quot;YTD_Month_cum&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------/////////////////////////////-----------LOAD ATTRITION ----------------/////////////////////////////////////////\nAttrition = load &quot;APM_Attrition&quot;; Attrition = filter Attrition by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}} ;\nAttrition = filter Attrition by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nAttrition = filter Attrition by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nAttrition = group Attrition by (&#39;Cloud&#39;, &#39;Quarter&#39;, &#39;Month&#39;, &#39;Fiscal_Year&#39;, &#39;Region&#39;);\nAttrition = foreach Attrition generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Attrition_Product&#39;)*-1 as &#39;Attrition_Product&#39;, sum(&#39;TTM_Product&#39;)*-1 as &#39;TTM_Product&#39;,sum(&#39;AOV_twelve_month_ago_Product&#39;) as &#39;AOV_twelve_month_ago&#39;,&#39;Region&#39; as &#39;Region&#39; ;;\n----------------------------------------------------------------------------------------------FILTER ATTRITION -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nq2_CYATT = filter Attrition by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}}  &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYATT = filter Attrition by &#39;Month&#39; in   {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}}  &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYATT = filter Attrition by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;YTD_Month&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYATT = filter Attrition by &#39;Month&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Month&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq4_CYATT = filter Attrition by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;YTD_Month_cum&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\n----------------------------------------------------------------------------------------------------------------------------------LOAD/FILTER PIPEGEN-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nPipegen = load &quot;APM_Pipegen1&quot;;\nPipegen = filter Pipegen by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nPipegen = filter Pipegen by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nPipegen = group Pipegen by (&#39;Fiscal_Year&#39;,&#39;Quarter&#39;, &#39;Region&#39;, &#39;Cloud&#39;, &#39;Month&#39;,&#39;Subcloud&#39;, &#39;Cloud_2&#39;,&#39;Country&#39;);\nPipegen = foreach Pipegen generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Pipegen&#39;) as &#39;Pipegen&#39;,&#39;Region&#39; as &#39;Region&#39;, case when (&#39;Region&#39; == &quot;AMER&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Canada&quot; ))then &quot;Canada&quot; when (&#39;Region&#39; == &quot;AMER&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;United States&quot; ))then &quot;United States&quot; when (&#39;Region&#39; == &quot;AMER&quot;)then &quot;RO AMER&quot; when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;United Kingdom&quot; ))then &quot;United Kingdom&quot;  when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;France&quot; ))then &quot;France&quot; when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Germany&quot; ))then &quot;Germany&quot; when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Netherlands&quot; ))then &quot;Netherlands&quot; when (&#39;Region&#39; == &quot;EMEA&quot; ) then &quot;RO EMEA&quot; when  (&#39;Region&#39; == &quot;APAC&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Australia&quot; ))then &quot;Australia&quot;when  (&#39;Region&#39; == &quot;APAC&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;India&quot; ))then &quot;India&quot;   when  (&#39;Region&#39; == &quot;APAC&quot; )then &quot;RO APAC&quot;  when  (&#39;Region&#39; == &quot;APAC&quot; )then &quot;RO APAC&quot;  when  (&#39;Region&#39; == &quot;JP&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Japan&quot; ))then &quot;Japan&quot;  when  (&#39;Region&#39; == &quot;JP&quot;  )then &quot;RO JP&quot;  when  (&#39;Region&#39; == &quot;LACA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Brazil&quot; ))then &quot;Brazil&quot; when (&#39;Region&#39; == &quot;LACA&quot; )then &quot;RO LACA&quot;  when (&#39;Region&#39; == &quot;Other&quot; )then &quot;Other&quot; else &quot;ERROR&quot; end as &#39;Country&#39; ; Pipegen = filter Pipegen by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}} ;;\n\nq2_CYPipegen = filter Pipegen by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYPipegen = filter Pipegen by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYPipegen = filter Pipegen by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_pipegen&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYPipegen = filter Pipegen by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_pipegen&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_CYPipegen = filter Pipegen by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYPipegen = filter Pipegen by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYPipegen = filter Pipegen by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_pipegen&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYPipegen = filter Pipegen by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_pipegen&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nnHC = load &quot;APM_HC&quot;;\nHC = filter HC by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nHC = foreach HC generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;SE&#39;) as &#39;SE&#39;,sum(&#39;AE&#39;) as &#39;AE&#39;,sum(&#39;Co_Prime&#39;) as &#39;Co_Prime&#39;,&#39;Region&#39; as &#39;Region&#39;, case when (&#39;Region&#39; == &quot;AMER&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Canada&quot; ))then &quot;Canada&quot; when (&#39;Region&#39; == &quot;AMER&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;United States&quot; ))then &quot;United States&quot; when (&#39;Region&#39; == &quot;AMER&quot;)then &quot;RO AMER&quot; when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;United Kingdom&quot; ))then &quot;United Kingdom&quot;  when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;France&quot; ))then &quot;France&quot; when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Germany&quot; ))then &quot;Germany&quot; when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Netherlands&quot; ))then &quot;Netherlands&quot; when (&#39;Region&#39; == &quot;EMEA&quot; ) then &quot;RO EMEA&quot; when  (&#39;Region&#39; == &quot;APAC&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Australia&quot; ))then &quot;Australia&quot; when  (&#39;Region&#39; == &quot;APAC&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;India&quot; ))then &quot;India&quot;  when  (&#39;Region&#39; == &quot;APAC&quot; )then &quot;RO APAC&quot;  when  (&#39;Region&#39; == &quot;APAC&quot; )then &quot;RO APAC&quot;  when  (&#39;Region&#39; == &quot;JP&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Japan&quot; ))then &quot;Japan&quot;  when  (&#39;Region&#39; == &quot;JP&quot;  )then &quot;RO JP&quot;  when  (&#39;Region&#39; == &quot;LACA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Brazil&quot; ))then &quot;Brazil&quot; when (&#39;Region&#39; == &quot;LACA&quot; )then &quot;RO LACA&quot; when (&#39;Region&#39; == &quot;Other&quot; )then &quot;Other&quot; else &quot;ERROR&quot; end as &#39;Country&#39; ; HC = filter HC by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\nHC = filter HC by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYHC = filter HC by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYHC = filter HC by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_HC = filter HC by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYHC = filter HC by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_HC&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYHC = filter HC by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_HC&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_HC = filter HC by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_HC&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD SWE INFRA------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nSW = load &quot;APM_SWE_INFRA&quot;;\nSW = filter SW by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nSW = foreach SW generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;SWE&#39;) as &#39;SWE&#39;,sum(&#39;INFRA&#39;) as &#39;INFRA&#39;,&#39;Region&#39; as &#39;Region&#39;, case when (&#39;Region&#39; == &quot;AMER&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Canada&quot; ))then &quot;Canada&quot; when (&#39;Region&#39; == &quot;AMER&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;United States&quot; ))then &quot;United States&quot; when (&#39;Region&#39; == &quot;AMER&quot;)then &quot;RO AMER&quot; when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;United Kingdom&quot; ))then &quot;United Kingdom&quot;  when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;France&quot; ))then &quot;France&quot; when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Germany&quot; ))then &quot;Germany&quot; when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Netherlands&quot; ))then &quot;Netherlands&quot; when (&#39;Region&#39; == &quot;EMEA&quot; ) then &quot;RO EMEA&quot; when  (&#39;Region&#39; == &quot;APAC&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Australia&quot; ))then &quot;Australia&quot; when  (&#39;Region&#39; == &quot;APAC&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;India&quot; ))then &quot;India&quot;  when  (&#39;Region&#39; == &quot;APAC&quot; )then &quot;RO APAC&quot;  when  (&#39;Region&#39; == &quot;APAC&quot; )then &quot;RO APAC&quot;  when  (&#39;Region&#39; == &quot;JP&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Japan&quot; ))then &quot;Japan&quot;  when  (&#39;Region&#39; == &quot;JP&quot;  )then &quot;RO JP&quot;  when  (&#39;Region&#39; == &quot;LACA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Brazil&quot; ))then &quot;Brazil&quot; when (&#39;Region&#39; == &quot;LACA&quot; )then &quot;RO LACA&quot; when (&#39;Region&#39; == &quot;Other&quot; )then &quot;Other&quot; else &quot;ERROR&quot; end as &#39;Country&#39; ; SW = filter SW by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\nSW = filter SW by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYSW = filter SW by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYSW = filter SW by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_SW = filter SW by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYSW = filter SW by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_SW&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYSW = filter SW by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_SW&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_SW = filter SW by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_SW&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD REDACCOUNTS------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nREDACCOUNTS = load &quot;APM_REDACCOUNTS&quot;;\nREDACCOUNTS = filter REDACCOUNTS by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nREDACCOUNTS = foreach REDACCOUNTS generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Red_Accounts&#39;) as &#39;Red_Accounts&#39;,&#39;Region&#39; as &#39;Region&#39;, case when (&#39;Region&#39; == &quot;AMER&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Canada&quot; ))then &quot;Canada&quot; when (&#39;Region&#39; == &quot;AMER&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;United States&quot; ))then &quot;United States&quot; when (&#39;Region&#39; == &quot;AMER&quot;)then &quot;RO AMER&quot; when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;United Kingdom&quot; ))then &quot;United Kingdom&quot;  when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;France&quot; ))then &quot;France&quot; when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Germany&quot; ))then &quot;Germany&quot; when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Netherlands&quot; ))then &quot;Netherlands&quot; when (&#39;Region&#39; == &quot;EMEA&quot; ) then &quot;RO EMEA&quot; when  (&#39;Region&#39; == &quot;APAC&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Australia&quot; ))then &quot;Australia&quot; when  (&#39;Region&#39; == &quot;APAC&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;India&quot; ))then &quot;India&quot;  when  (&#39;Region&#39; == &quot;APAC&quot; )then &quot;RO APAC&quot;  when  (&#39;Region&#39; == &quot;APAC&quot; )then &quot;RO APAC&quot;  when  (&#39;Region&#39; == &quot;JP&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Japan&quot; ))then &quot;Japan&quot;  when  (&#39;Region&#39; == &quot;JP&quot;  )then &quot;RO JP&quot;  when  (&#39;Region&#39; == &quot;LACA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Brazil&quot; ))then &quot;Brazil&quot; when (&#39;Region&#39; == &quot;LACA&quot; )then &quot;RO LACA&quot; when (&#39;Region&#39; == &quot;Other&quot; )then &quot;Other&quot; else &quot;ERROR&quot; end as &#39;Country&#39; ; REDACCOUNTS = filter REDACCOUNTS by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\nREDACCOUNTS = filter REDACCOUNTS by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYREDACCOUNTS = filter REDACCOUNTS by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYREDACCOUNTS = filter REDACCOUNTS by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_REDACCOUNTS = filter REDACCOUNTS by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYREDACCOUNTS = filter REDACCOUNTS by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYREDACCOUNTS = filter REDACCOUNTS by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_REDACCOUNTS = filter REDACCOUNTS by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD T_P T&amp;P Cost to Serve------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nT_P = load &quot;APM_T_P&quot;;\nT_P = filter T_P by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nT_P = foreach T_P generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;CTS&#39;) as &#39;CTS&#39;,&#39;Region&#39; as &#39;Region&#39;, case when (&#39;Region&#39; == &quot;AMER&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Canada&quot; ))then &quot;Canada&quot; when (&#39;Region&#39; == &quot;AMER&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;United States&quot; ))then &quot;United States&quot; when (&#39;Region&#39; == &quot;AMER&quot;)then &quot;RO AMER&quot; when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;United Kingdom&quot; ))then &quot;United Kingdom&quot;  when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;France&quot; ))then &quot;France&quot; when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Germany&quot; ))then &quot;Germany&quot; when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Netherlands&quot; ))then &quot;Netherlands&quot; when (&#39;Region&#39; == &quot;EMEA&quot; ) then &quot;RO EMEA&quot; when  (&#39;Region&#39; == &quot;APAC&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Australia&quot; ))then &quot;Australia&quot; when  (&#39;Region&#39; == &quot;APAC&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;India&quot; ))then &quot;India&quot;  when  (&#39;Region&#39; == &quot;APAC&quot; )then &quot;RO APAC&quot;  when  (&#39;Region&#39; == &quot;APAC&quot; )then &quot;RO APAC&quot;  when  (&#39;Region&#39; == &quot;JP&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Japan&quot; ))then &quot;Japan&quot;  when  (&#39;Region&#39; == &quot;JP&quot;  )then &quot;RO JP&quot;  when  (&#39;Region&#39; == &quot;LACA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Brazil&quot; ))then &quot;Brazil&quot; when (&#39;Region&#39; == &quot;LACA&quot; )then &quot;RO LACA&quot; when (&#39;Region&#39; == &quot;Other&quot; )then &quot;Other&quot; else &quot;ERROR&quot; end as &#39;Country&#39; ; T_P = filter T_P by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\nT_P = filter T_P by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYT_P = filter T_P by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYT_P = filter T_P by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_T_P = filter T_P by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYT_P = filter T_P by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYT_P = filter T_P by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_T_P = filter T_P by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD AVAILABILITY------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nAVAILABILITY = load &quot;APM_TECH_AVAILABILITY&quot;;\nAVAILABILITY = filter AVAILABILITY by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nAVAILABILITY = foreach AVAILABILITY generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Availability&#39;) as &#39;Availability&#39;,&#39;Region&#39; as &#39;Region&#39;, case when (&#39;Region&#39; == &quot;AMER&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Canada&quot; ))then &quot;Canada&quot; when (&#39;Region&#39; == &quot;AMER&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;United States&quot; ))then &quot;United States&quot; when (&#39;Region&#39; == &quot;AMER&quot;)then &quot;RO AMER&quot; when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;United Kingdom&quot; ))then &quot;United Kingdom&quot;  when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;France&quot; ))then &quot;France&quot; when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Germany&quot; ))then &quot;Germany&quot; when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Netherlands&quot; ))then &quot;Netherlands&quot; when (&#39;Region&#39; == &quot;EMEA&quot; ) then &quot;RO EMEA&quot; when  (&#39;Region&#39; == &quot;APAC&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Australia&quot; ))then &quot;Australia&quot; when  (&#39;Region&#39; == &quot;APAC&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;India&quot; ))then &quot;India&quot;  when  (&#39;Region&#39; == &quot;APAC&quot; )then &quot;RO APAC&quot;  when  (&#39;Region&#39; == &quot;APAC&quot; )then &quot;RO APAC&quot;  when  (&#39;Region&#39; == &quot;JP&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Japan&quot; ))then &quot;Japan&quot;  when  (&#39;Region&#39; == &quot;JP&quot;  )then &quot;RO JP&quot;  when  (&#39;Region&#39; == &quot;LACA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Brazil&quot; ))then &quot;Brazil&quot; when (&#39;Region&#39; == &quot;LACA&quot; )then &quot;RO LACA&quot; when (&#39;Region&#39; == &quot;Other&quot; )then &quot;Other&quot; else &quot;ERROR&quot; end as &#39;Country&#39; ; AVAILABILITY = filter AVAILABILITY by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\nAVAILABILITY = filter AVAILABILITY by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYAVAILABILITY = filter AVAILABILITY by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYAVAILABILITY = filter AVAILABILITY by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_AVAILABILITY = filter AVAILABILITY by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYAVAILABILITY = filter AVAILABILITY by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYAVAILABILITY = filter AVAILABILITY by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_AVAILABILITY = filter AVAILABILITY by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD TRANSACTIONS------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nTRANSACTIONS = load &quot;APM_T_P_Transactions&quot;;\nTRANSACTIONS = filter TRANSACTIONS by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nTRANSACTIONS = foreach TRANSACTIONS generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Transactions&#39;) as &#39;Transactions&#39;,&#39;Region&#39; as &#39;Region&#39;, case when (&#39;Region&#39; == &quot;AMER&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Canada&quot; ))then &quot;Canada&quot; when (&#39;Region&#39; == &quot;AMER&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;United States&quot; ))then &quot;United States&quot; when (&#39;Region&#39; == &quot;AMER&quot;)then &quot;RO AMER&quot; when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;United Kingdom&quot; ))then &quot;United Kingdom&quot;  when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;France&quot; ))then &quot;France&quot; when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Germany&quot; ))then &quot;Germany&quot; when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Netherlands&quot; ))then &quot;Netherlands&quot; when (&#39;Region&#39; == &quot;EMEA&quot; ) then &quot;RO EMEA&quot; when  (&#39;Region&#39; == &quot;APAC&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Australia&quot; ))then &quot;Australia&quot; when  (&#39;Region&#39; == &quot;APAC&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;India&quot; ))then &quot;India&quot;  when  (&#39;Region&#39; == &quot;APAC&quot; )then &quot;RO APAC&quot;  when  (&#39;Region&#39; == &quot;APAC&quot; )then &quot;RO APAC&quot;  when  (&#39;Region&#39; == &quot;JP&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Japan&quot; ))then &quot;Japan&quot;  when  (&#39;Region&#39; == &quot;JP&quot;  )then &quot;RO JP&quot;  when  (&#39;Region&#39; == &quot;LACA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Brazil&quot; ))then &quot;Brazil&quot; when (&#39;Region&#39; == &quot;LACA&quot; )then &quot;RO LACA&quot; when (&#39;Region&#39; == &quot;Other&quot; )then &quot;Other&quot; else &quot;ERROR&quot; end as &#39;Country&#39; ; TRANSACTIONS = filter TRANSACTIONS by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\nTRANSACTIONS = filter TRANSACTIONS by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYTRANSACTIONS = filter TRANSACTIONS by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYTRANSACTIONS = filter TRANSACTIONS by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_TRANSACTIONS = filter TRANSACTIONS by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYTRANSACTIONS = filter TRANSACTIONS by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYTRANSACTIONS = filter TRANSACTIONS by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_TRANSACTIONS = filter TRANSACTIONS by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD MARKET CUSTOMER------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nCUSTOMER = load &quot;APM_MARKET_CUSTOMER&quot;;\nCUSTOMER = filter CUSTOMER by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nCUSTOMER = foreach CUSTOMER generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Customer&#39;) as &#39;Customer&#39;,&#39;Region&#39; as &#39;Region&#39;, case when (&#39;Region&#39; == &quot;AMER&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Canada&quot; ))then &quot;Canada&quot; when (&#39;Region&#39; == &quot;AMER&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;United States&quot; ))then &quot;United States&quot; when (&#39;Region&#39; == &quot;AMER&quot;)then &quot;RO AMER&quot; when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;United Kingdom&quot; ))then &quot;United Kingdom&quot;  when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;France&quot; ))then &quot;France&quot; when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Germany&quot; ))then &quot;Germany&quot; when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Netherlands&quot; ))then &quot;Netherlands&quot; when (&#39;Region&#39; == &quot;EMEA&quot; ) then &quot;RO EMEA&quot; when  (&#39;Region&#39; == &quot;APAC&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Australia&quot; ))then &quot;Australia&quot; when  (&#39;Region&#39; == &quot;APAC&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;India&quot; ))then &quot;India&quot;  when  (&#39;Region&#39; == &quot;APAC&quot; )then &quot;RO APAC&quot;  when  (&#39;Region&#39; == &quot;APAC&quot; )then &quot;RO APAC&quot;  when  (&#39;Region&#39; == &quot;JP&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Japan&quot; ))then &quot;Japan&quot;  when  (&#39;Region&#39; == &quot;JP&quot;  )then &quot;RO JP&quot;  when  (&#39;Region&#39; == &quot;LACA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Brazil&quot; ))then &quot;Brazil&quot; when (&#39;Region&#39; == &quot;LACA&quot; )then &quot;RO LACA&quot; when (&#39;Region&#39; == &quot;Other&quot; )then &quot;Other&quot; else &quot;ERROR&quot; end as &#39;Country&#39; ; CUSTOMER = filter CUSTOMER by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\nCUSTOMER = filter CUSTOMER by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYCUSTOMER = filter CUSTOMER by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYCUSTOMER = filter CUSTOMER by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_CUSTOMER = filter CUSTOMER by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYCUSTOMER = filter CUSTOMER by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYCUSTOMER = filter CUSTOMER by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_CUSTOMER = filter CUSTOMER by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD MARKET SHARE------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nSHARE= load &quot;APM_MARKET_SHARE&quot;;\nSHARE= filter SHARE by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nSHARE= foreach SHARE generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;TAM&#39;) as &#39;TAM&#39;,&#39;Region&#39; as &#39;Region&#39;, case when (&#39;Region&#39; == &quot;AMER&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Canada&quot; ))then &quot;Canada&quot; when (&#39;Region&#39; == &quot;AMER&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;United States&quot; ))then &quot;United States&quot; when (&#39;Region&#39; == &quot;AMER&quot;)then &quot;RO AMER&quot; when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;United Kingdom&quot; ))then &quot;United Kingdom&quot;  when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;France&quot; ))then &quot;France&quot; when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Germany&quot; ))then &quot;Germany&quot; when  (&#39;Region&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Netherlands&quot; ))then &quot;Netherlands&quot; when (&#39;Region&#39; == &quot;EMEA&quot; ) then &quot;RO EMEA&quot; when  (&#39;Region&#39; == &quot;APAC&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Australia&quot; ))then &quot;Australia&quot; when  (&#39;Region&#39; == &quot;APAC&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;India&quot; ))then &quot;India&quot;  when  (&#39;Region&#39; == &quot;APAC&quot; )then &quot;RO APAC&quot;  when  (&#39;Region&#39; == &quot;APAC&quot; )then &quot;RO APAC&quot;  when  (&#39;Region&#39; == &quot;JP&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Japan&quot; ))then &quot;Japan&quot;  when  (&#39;Region&#39; == &quot;JP&quot;  )then &quot;RO JP&quot;  when  (&#39;Region&#39; == &quot;LACA&quot; &amp;&amp; (&#39;Country&#39; ==  &quot;Brazil&quot; ))then &quot;Brazil&quot; when (&#39;Region&#39; == &quot;LACA&quot; )then &quot;RO LACA&quot; when (&#39;Region&#39; == &quot;Other&quot; )then &quot;Other&quot; else &quot;ERROR&quot; end as &#39;Country&#39; ; SHARE= filter SHARE by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\nSHARE = filter SHARE by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYSHARE = filter SHARE by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYSHARE = filter SHARE by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_SHARE = filter SHARE by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYSHARE = filter SHARE by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYSHARE = filter SHARE by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_SHARE = filter SHARE by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------Grouping------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nresult = group  q2_CYACV by &#39;Cloud&#39; full, q2_PYACV by &#39;Cloud&#39; full, q3_CYACV by &#39;Cloud&#39; full, q3_PYACV by &#39;Cloud&#39; full, q2_CYAOV by &#39;Cloud&#39; full, q2_PYAOV by &#39;Cloud&#39; full, q3_CYAOV by &#39;Cloud&#39; full, q3_PYAOV by &#39;Cloud&#39; full,  q2_CYATT by &#39;Cloud&#39; full, q2_PYATT by &#39;Cloud&#39; full, q3_CYATT by &#39;Cloud&#39; full, q3_PYATT by &#39;Cloud&#39; full,q4_CYATT by &#39;Cloud&#39; full,  q2_CYPipegen by &#39;Cloud&#39; full, q2_PYPipegen by &#39;Cloud&#39; full, q3_CYPipegen by &#39;Cloud&#39; full, q3_PYPipegen by &#39;Cloud&#39;full,q2_CYHC by &#39;Cloud&#39; full, q2_PYHC by &#39;Cloud&#39; full,q2_PY_2_HC by &#39;Cloud&#39; full, q3_CYHC by &#39;Cloud&#39; full, q3_PYHC by &#39;Cloud&#39; full,q3_PY_2_HC by &#39;Cloud&#39; full, q2_CYSW by &#39;Cloud&#39; full, q2_PYSW by &#39;Cloud&#39; full,q2_PY_2_SW by &#39;Cloud&#39; full, q3_CYSW by &#39;Cloud&#39; full, q3_PYSW by &#39;Cloud&#39; full,q3_PY_2_SW by &#39;Cloud&#39; full, q2_CYREDACCOUNTS by &#39;Cloud&#39; full, q2_PYREDACCOUNTS by &#39;Cloud&#39; full,q2_PY_2_REDACCOUNTS by &#39;Cloud&#39; full, q3_CYREDACCOUNTS by &#39;Cloud&#39; full, q3_PYREDACCOUNTS by &#39;Cloud&#39; full,q3_PY_2_REDACCOUNTS by &#39;Cloud&#39; full, q2_CYT_P by &#39;Cloud&#39; full, q2_PYT_P by &#39;Cloud&#39; full,q2_PY_2_T_P by &#39;Cloud&#39; full, q3_CYT_P by &#39;Cloud&#39; full, q3_PYT_P by &#39;Cloud&#39; full,q3_PY_2_T_P by &#39;Cloud&#39; full, q2_CYAVAILABILITY by &#39;Cloud&#39; full, q2_PYAVAILABILITY by &#39;Cloud&#39; full,q2_PY_2_AVAILABILITY by &#39;Cloud&#39; full, q3_CYAVAILABILITY by &#39;Cloud&#39; full, q3_PYAVAILABILITY by &#39;Cloud&#39; full,q3_PY_2_AVAILABILITY by &#39;Cloud&#39; full, q2_CYTRANSACTIONS by &#39;Cloud&#39; full, q2_PYTRANSACTIONS by &#39;Cloud&#39; full,q2_PY_2_TRANSACTIONS by &#39;Cloud&#39; full, q3_CYTRANSACTIONS by &#39;Cloud&#39; full, q3_PYTRANSACTIONS by &#39;Cloud&#39; full,q3_PY_2_TRANSACTIONS by &#39;Cloud&#39;  full, q2_CYCUSTOMER by &#39;Cloud&#39; full, q2_PYCUSTOMER by &#39;Cloud&#39; full,q2_PY_2_CUSTOMER by &#39;Cloud&#39; full, q3_CYCUSTOMER by &#39;Cloud&#39; full, q3_PYCUSTOMER by &#39;Cloud&#39; full,q3_PY_2_CUSTOMER by &#39;Cloud&#39;full, q2_CYSHARE by &#39;Cloud&#39; full, q2_PYSHARE by &#39;Cloud&#39; full,q2_PY_2_SHARE by &#39;Cloud&#39; full, q3_CYSHARE by &#39;Cloud&#39; full, q3_PYSHARE by &#39;Cloud&#39; full,q3_PY_2_SHARE by &#39;Cloud&#39;,MasterHierarchy by &#39;Level_1&#39;;\n----------------------------------------------/////////////////////////////////////////------PROJECTION----- -////////////////////////////////////////////////-----------------------------------------------------------------------------------------------------------------------------------------------------\nresult = foreach result generate coalesce(MasterHierarchy.&#39;Level_1&#39;, q2_CYACV.&#39;Cloud&#39;, q2_PYACV.&#39;Cloud&#39;, q3_CYACV.&#39;Cloud&#39;, q3_PYACV.&#39;Cloud&#39;, q2_CYAOV.&#39;Cloud&#39;, q2_PYAOV.&#39;Cloud&#39;, q3_CYAOV.&#39;Cloud&#39;, q3_PYAOV.&#39;Cloud&#39;, q2_CYHC.&#39;Cloud&#39;, q2_PYHC.&#39;Cloud&#39;,q2_PY_2_HC.&#39;Cloud&#39;, q3_CYHC.&#39;Cloud&#39;, q3_PYHC.&#39;Cloud&#39;,q3_PY_2_HC.&#39;Cloud&#39;, q2_CYPipegen.&#39;Cloud&#39;, q2_PYPipegen.&#39;Cloud&#39;, q3_CYPipegen.&#39;Cloud&#39;, q3_PYPipegen.&#39;Cloud&#39;, q2_CYREDACCOUNTS.&#39;Cloud&#39;, q2_PYREDACCOUNTS.&#39;Cloud&#39;, q3_CYREDACCOUNTS.&#39;Cloud&#39;, q3_PYREDACCOUNTS.&#39;Cloud&#39;, q2_CYT_P.&#39;Cloud&#39;, q2_PYT_P.&#39;Cloud&#39;, q3_CYT_P.&#39;Cloud&#39;, q3_PYT_P.&#39;Cloud&#39;, q2_CYAVAILABILITY.&#39;Cloud&#39;, q2_PYAVAILABILITY.&#39;Cloud&#39;, q3_CYAVAILABILITY.&#39;Cloud&#39;, q3_PYAVAILABILITY.&#39;Cloud&#39;, q2_CYTRANSACTIONS.&#39;Cloud&#39;, q2_PYTRANSACTIONS.&#39;Cloud&#39;, q3_CYTRANSACTIONS.&#39;Cloud&#39;, q3_PYTRANSACTIONS.&#39;Cloud&#39;, q2_CYAVAILABILITY.&#39;Cloud&#39;, q2_PYAVAILABILITY.&#39;Cloud&#39;, q3_CYAVAILABILITY.&#39;Cloud&#39;, q3_PYAVAILABILITY.&#39;Cloud&#39;, q2_CYCUSTOMER.&#39;Cloud&#39;, q2_PYCUSTOMER.&#39;Cloud&#39;, q3_CYCUSTOMER.&#39;Cloud&#39;, q3_PYCUSTOMER.&#39;Cloud&#39;, q2_CYSHARE.&#39;Cloud&#39;, q2_PYSHARE.&#39;Cloud&#39;, q3_CYSHARE.&#39;Cloud&#39;, q3_PYSHARE.&#39;Cloud&#39;) as &#39;Cloud&#39;, last(MasterHierarchy.&#39;Level_1_Ranking&#39;) as &#39;SortOrder&#39;, coalesce(sum(q2_CYACV.&#39;ACV&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} ACV Absolute&#39;, coalesce(sum(q3_CYACV.&#39;ACV&#39;), 0) as &#39;YTD ACV Absolute&#39;, ((coalesce(sum(q2_CYACV.&#39;ACV&#39;), 0) - coalesce(sum(q2_PYACV.&#39;ACV&#39;), 0)) / coalesce(sum(q2_PYACV.&#39;ACV&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} ACV Growth&#39;, ((coalesce(sum(q3_CYACV.&#39;ACV&#39;), 0) - coalesce(sum(q3_PYACV.&#39;ACV&#39;), 0)) / coalesce(sum(q3_PYACV.&#39;ACV&#39;), 0)) * 100 as &#39;YTD ACV Growth&#39;, coalesce(sum(q2_CYAOV.&#39;AOV&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AOV Absolute&#39;, coalesce(sum(q3_CYAOV.&#39;AOV&#39;), 0) as &#39;YTD AOV Absolute&#39;, ((coalesce(sum(q2_CYAOV.&#39;AOV&#39;), 0) - coalesce(sum(q2_PYAOV.&#39;AOV&#39;), 0)) / coalesce(sum(q2_PYAOV.&#39;AOV&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} AOV Growth&#39;, ((coalesce(sum(q3_CYAOV.&#39;AOV&#39;), 0) - coalesce(sum(q3_PYAOV.&#39;AOV&#39;), 0)) / coalesce(sum(q3_PYAOV.&#39;AOV&#39;), 0)) * 100 as &#39;YTD AOV Growth&#39;, coalesce(sum(q2_CYATT.&#39;Attrition_Product&#39;),0) as &#39;Attrition_CY_Q2&#39;,coalesce(sum(q3_CYATT.&#39;Attrition_Product&#39;),0) as &#39;Attrition_CY_Q3&#39;,coalesce(round(sum(q2_CYATT.&#39;TTM_Product&#39;), 0), 0) as &#39;TTM_Product_CY_Q2&#39; ,coalesce(round(sum(q2_CYATT.&#39;AOV_twelve_month_ago&#39;), 0), 0) as &#39;AOV_twelve_month_ago_CY_Q2&#39;,coalesce(round(sum(q4_CYATT.&#39;TTM_Product&#39;), 0), 0) as &#39;TTM_Product_CY_Q3&#39; ,coalesce(round(sum(q4_CYATT.&#39;AOV_twelve_month_ago&#39;), 0), 0) as &#39;AOV_twelve_month_ago_CY_Q3&#39;, coalesce(sum(q2_CYPipegen.&#39;Pipegen&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Pipegen Absolute&#39;, coalesce(sum(q3_CYPipegen.&#39;Pipegen&#39;), 0) as &#39;YTD Pipegen Absolute&#39;, ((coalesce(sum(q2_CYPipegen.&#39;Pipegen&#39;), 0) - coalesce(sum(q2_PYPipegen.&#39;Pipegen&#39;), 0)) / coalesce(sum(q2_PYPipegen.&#39;Pipegen&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Pipegen Growth&#39;, ((coalesce(sum(q3_CYPipegen.&#39;Pipegen&#39;), 0) - coalesce(sum(q3_PYPipegen.&#39;Pipegen&#39;), 0)) / coalesce(sum(q3_PYPipegen.&#39;Pipegen&#39;), 0)) * 100 as &#39;YTD Pipegen Growth&#39;,coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE Absolute&#39;, coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) as &#39;YTD SE Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) - coalesce(sum(q2_PYHC.&#39;SE&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;SE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SE Growth&#39;, ((coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) - coalesce(sum(q3_PYHC.&#39;SE&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;SE&#39;), 0)) * 100 as &#39;YTD SE Growth&#39;,(power(coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;SE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;SE&#39;), 0),(1/2))-1)*100 as &#39;YTD SE CAGR&#39;, coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE Absolute&#39;, coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) as &#39;YTD AE Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) - coalesce(sum(q2_PYHC.&#39;AE&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;AE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} AE Growth&#39;, ((coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) - coalesce(sum(q3_PYHC.&#39;AE&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;AE&#39;), 0)) * 100 as &#39;YTD AE Growth&#39;, (power(coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;AE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;AE&#39;), 0),(1/2))-1)*100 as &#39;YTD AE CAGR&#39;,coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime Absolute&#39;, coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) as &#39;YTD Co_Prime Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) - coalesce(sum(q2_PYHC.&#39;Co_Prime&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;Co_Prime&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Co_Prime Growth&#39;, ((coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) - coalesce(sum(q3_PYHC.&#39;Co_Prime&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;Co_Prime&#39;), 0)) * 100 as &#39;YTD Co_Prime Growth&#39;,(power(coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;Co_Prime&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;Co_Prime&#39;), 0),(1/2))-1)*100 as &#39;YTD Co_Prime CAGR&#39;,coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE Absolute&#39;, coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) as &#39;YTD SWE Absolute&#39;, ((coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) - coalesce(sum(q2_PYSW.&#39;SWE&#39;), 0)) / coalesce(sum(q2_PYSW.&#39;SWE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SWE Growth&#39;, ((coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) - coalesce(sum(q3_PYSW.&#39;SWE&#39;), 0)) / coalesce(sum(q3_PYSW.&#39;SWE&#39;), 0)) * 100 as &#39;YTD SWE Growth&#39;,(power(coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) / coalesce(sum(q2_PY_2_SW.&#39;SWE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE CAGR&#39;,(power(coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) / coalesce(sum(q3_PY_2_SW.&#39;SWE&#39;), 0),(1/2))-1)*100 as &#39;YTD SWE CAGR&#39;, coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA Absolute&#39;, coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) as &#39;YTD INFRA Absolute&#39;, ((coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) - coalesce(sum(q2_PYSW.&#39;INFRA&#39;), 0)) / coalesce(sum(q2_PYSW.&#39;INFRA&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} INFRA Growth&#39;, ((coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) - coalesce(sum(q3_PYSW.&#39;INFRA&#39;), 0)) / coalesce(sum(q3_PYSW.&#39;INFRA&#39;), 0)) * 100 as &#39;YTD INFRA Growth&#39;,(power(coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) / coalesce(sum(q2_PY_2_SW.&#39;INFRA&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA CAGR&#39;,(power(coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) / coalesce(sum(q3_PY_2_SW.&#39;INFRA&#39;), 0),(1/2))-1)*100 as &#39;YTD INFRA CAGR&#39;, coalesce(sum(q2_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Red_Accounts Absolute&#39;, coalesce(sum(q3_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) as &#39;YTD Red_Accounts Absolute&#39;, ((coalesce(sum(q2_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) - coalesce(sum(q2_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) / coalesce(sum(q2_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Red_Accounts Growth&#39;, ((coalesce(sum(q3_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) - coalesce(sum(q3_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) / coalesce(sum(q3_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) * 100 as &#39;YTD Red_Accounts Growth&#39;, coalesce(sum(q2_CYT_P.&#39;CTS&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} CTS Absolute&#39;, coalesce(sum(q3_CYT_P.&#39;CTS&#39;), 0) as &#39;YTD CTS Absolute&#39;, ((coalesce(sum(q2_CYT_P.&#39;CTS&#39;), 0) - coalesce(sum(q2_PYT_P.&#39;CTS&#39;), 0)) / coalesce(sum(q2_PYT_P.&#39;CTS&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} CTS Growth&#39;, ((coalesce(sum(q3_CYT_P.&#39;CTS&#39;), 0) - coalesce(sum(q3_PYT_P.&#39;CTS&#39;), 0)) / coalesce(sum(q3_PYT_P.&#39;CTS&#39;), 0)) * 100 as &#39;YTD CTS Growth&#39;, coalesce(sum(q2_CYAVAILABILITY.&#39;Availability&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Availability Absolute&#39;, coalesce(sum(q3_CYAVAILABILITY.&#39;Availability&#39;), 0) as &#39;YTD Availability Absolute&#39;, ((coalesce(sum(q2_CYAVAILABILITY.&#39;Availability&#39;), 0) - coalesce(sum(q2_PYAVAILABILITY.&#39;Availability&#39;), 0)) / coalesce(sum(q2_PYAVAILABILITY.&#39;Availability&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Availability Growth&#39;, ((coalesce(sum(q3_CYAVAILABILITY.&#39;Availability&#39;), 0) - coalesce(sum(q3_PYAVAILABILITY.&#39;Availability&#39;), 0)) / coalesce(sum(q3_PYAVAILABILITY.&#39;Availability&#39;), 0)) * 100 as &#39;YTD Availability Growth&#39;, coalesce(sum(q2_CYTRANSACTIONS.&#39;Transactions&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Transactions Absolute&#39;, coalesce(sum(q3_CYTRANSACTIONS.&#39;Transactions&#39;), 0) as &#39;YTD Transactions Absolute&#39;, ((coalesce(sum(q2_CYTRANSACTIONS.&#39;Transactions&#39;), 0) - coalesce(sum(q2_PYTRANSACTIONS.&#39;Transactions&#39;), 0)) / coalesce(sum(q2_PYTRANSACTIONS.&#39;Transactions&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Transactions Growth&#39;, ((coalesce(sum(q3_CYTRANSACTIONS.&#39;Transactions&#39;), 0) - coalesce(sum(q3_PYTRANSACTIONS.&#39;Transactions&#39;), 0)) / coalesce(sum(q3_PYTRANSACTIONS.&#39;Transactions&#39;), 0)) * 100 as &#39;YTD Transactions Growth&#39;, coalesce(sum(q2_CYCUSTOMER.&#39;Customer&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Customer Absolute&#39;, coalesce(sum(q3_CYCUSTOMER.&#39;Customer&#39;), 0) as &#39;YTD Customer Absolute&#39;, ((coalesce(sum(q2_CYCUSTOMER.&#39;Customer&#39;), 0) - coalesce(sum(q2_PYCUSTOMER.&#39;Customer&#39;), 0)) / coalesce(sum(q2_PYCUSTOMER.&#39;Customer&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Customer Growth&#39;, ((coalesce(sum(q3_CYCUSTOMER.&#39;Customer&#39;), 0) - coalesce(sum(q3_PYCUSTOMER.&#39;Customer&#39;), 0)) / coalesce(sum(q3_PYCUSTOMER.&#39;Customer&#39;), 0)) * 100 as &#39;YTD Customer Growth&#39;, coalesce(sum(q2_CYSHARE.&#39;TAM&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} TAM Absolute&#39;, coalesce(sum(q3_CYSHARE.&#39;TAM&#39;), 0) as &#39;YTD TAM Absolute&#39;, ((coalesce(sum(q2_CYSHARE.&#39;TAM&#39;), 0) - coalesce(sum(q2_PYSHARE.&#39;TAM&#39;), 0)) / coalesce(sum(q2_PYSHARE.&#39;TAM&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} TAM Growth&#39;, ((coalesce(sum(q3_CYSHARE.&#39;TAM&#39;), 0) - coalesce(sum(q3_PYSHARE.&#39;TAM&#39;), 0)) / coalesce(sum(q3_PYSHARE.&#39;TAM&#39;), 0)) * 100 as &#39;YTD TAM Growth&#39;;\nnline =  group MasterHierarchy by &#39;all&#39;;line= foreach line generate &quot;-----------------------------------------------------------------&quot; as &#39;Cloud&#39;,&quot;{{cell(Selector_Quarter.selection,0,&quot;Line_Rank&quot;).asString()}}&quot;  as &#39;SortOrder&#39;;result = union result,line;----------------------------------------------------------------------------------------------------------------------------------------------------------------\n--------------------------------------------------------------------------------------------------------------------------------------FINAL FILTER FOR Premier a la carte-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nresult = order result by &#39;SortOrder&#39; asc;\nresult = filter result by &#39;Cloud&#39; not in {{cell(Selector_Quarter.selection,0,&quot;Filter_Table&quot;).asString()}};\n--------------------------------------------------------------------------------------------------------------------------------------FINAL PROJECTION-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nresult = foreach result generate &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} ACV Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} ACV Absolute&#39;, &#39;YTD ACV Absolute&#39; as &#39;YTD ACV Absolute&#39;, &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} ACV Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} ACV Growth&#39;, &#39;YTD ACV Growth&#39; as &#39;YTD ACV Growth&#39;, &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AOV Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AOV Absolute&#39;, &#39;YTD AOV Absolute&#39; as &#39;YTD AOV Absolute&#39;, &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} AOV Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} AOV Growth&#39;, &#39;YTD AOV Growth&#39; as &#39;YTD AOV Growth&#39;, sum(&#39;Attrition_CY_Q2&#39;) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Attrition Absolute&#39;, sum(&#39;Attrition_CY_Q3&#39;) as &#39;YTD Attrition Absolute&#39;,(coalesce(round(sum(&#39;TTM_Product_CY_Q2&#39;), 0), 0) / coalesce(round(sum(AOV_twelve_month_ago_CY_Q2), 0), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Attrition TTM Rate&#39;, (coalesce(round(sum(&#39;TTM_Product_CY_Q3&#39;), 0), 0) / coalesce(round(sum(AOV_twelve_month_ago_CY_Q3), 0), 0)) * 100 as &#39;YTD Attrition TTM Rate&#39;, &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Pipegen Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} PipeGen Absolute&#39;,&#39;YTD Pipegen Absolute&#39; as &#39;YTD PipeGen Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Pipegen Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} PipeGen Growth&#39;,   &#39;YTD Pipegen Growth&#39; as  &#39;YTD PipeGen Growth&#39;;",
        "receiveFacet": true,
        "selectMode": "none",
        "strings": [],
        "type": "saql",
        "useGlobal": true
      },
      "Fiscal_Year_1": {
        "broadcastFacet": true,
        "label": "Fiscal_Year",
        "selectMode": "singlerequired",
        "start": "{&quot;display&quot;:[&quot;2019&quot;]}",
        "type": "staticflex",
        "values": [
          "{&quot;display&quot;:&quot;2019&quot;,&quot;value&quot;:2019,&quot;CY&quot;:&quot;2019&quot;,&quot;PY&quot;:&quot;2018&quot;,&quot;PY_2&quot;:&quot;2017&quot;}",
          "{&quot;display&quot;:&quot;2018&quot;,&quot;value&quot;:2018,&quot;CY&quot;:&quot;2018&quot;,&quot;PY&quot;:&quot;2017&quot;,&quot;PY_2&quot;:&quot;2016&quot;}"
        ]
      },
      "Table_Page_4_Header": {
        "broadcastFacet": true,
        "groups": [],
        "label": "Table_Page_4_Header",
        "numbers": [],
        "query": "MasterHierarchy = load &quot;Master_Hierarchy&quot;;\nMasterHierarchy = filter MasterHierarchy by &#39;Level_1&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nACV = load &quot;APM_ACV&quot;;\nACV = filter ACV by &#39;Segment&#39; != &quot;CSG&quot;;\nACV = filter ACV by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nACV = filter ACV by &#39;Cloud&#39; in {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};;\nACV = group ACV by (&#39;Cloud&#39;,&#39;Subcloud&#39;, &#39;Quarter&#39;,&#39;Month&#39;, &#39;Fiscal_Year&#39;, &#39;Region&#39; , &#39;Country&#39;);\nACV = foreach ACV generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39; ,&#39;Month&#39; as &#39;Month&#39;,sum(&#39;ACV&#39;) as &#39;ACV&#39;, &#39;Region&#39; as &#39;Region&#39;,  {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; ACV = filter ACV by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}} ;\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD NONE For Fake Header line----------------------------------------------------------------------------------------------------------------------------------------------------------\n\nAPM_None = load &quot;APM_ACV&quot;;\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------FILTER ACV----------------------------------------------------------------------------------------------------------------------------------------------------------\n\nq2_CYACV = filter ACV by &#39;Month&#39; in   {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}}  &amp;&amp;{{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYACV = filter ACV by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}}  &amp;&amp;{{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYACV = filter ACV by &#39;Month&#39; in   {{cell(Selector_Quarter.selection,0,&quot;YTD_Month&quot;).asString()}} &amp;&amp;{{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYACV = filter ACV by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;YTD_Month&quot;).asString()}} &amp;&amp;{{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------////////////////////////---------LOAD AOV-------///////////////////////////////////////////// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nAOV = load &quot;APM_AOV&quot;;\nAOV = filter AOV by &#39;Segment&#39; != &quot;CSG&quot;;\nAOV = filter AOV by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\n--AOV = filter AOV by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nAOV = foreach AOV generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;AOV&#39;) as &#39;AOV&#39;,&#39;Region&#39; as &#39;Region&#39;,  {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39;; AOV = filter AOV by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------FILTER AOV ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nq2_CYAOV = filter AOV by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}} &amp;&amp;{{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYAOV = filter AOV by &#39;Month&#39; in   {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}} &amp;&amp;{{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYAOV = filter AOV by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;YTD_Month_cum&quot;).asString()}}&amp;&amp;{{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYAOV = filter AOV by &#39;Month&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Month_cum&quot;).asString()}} &amp;&amp;{{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------/////////////////////////////-----------LOAD ATTRITION ----------------/////////////////////////////////////////\n\nAttrition = load &quot;APM_Attrition&quot;;\nAttrition = filter Attrition by &#39;Segment&#39; != &quot;CSG&quot;;\nAttrition = filter Attrition by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\n--Attrition = filter Attrition by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nAttrition = foreach Attrition generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Attrition&#39;)*-1 as &#39;Attrition_Product&#39;, sum(&#39;TTM&#39;)*-1 as &#39;TTM_Product&#39;,sum(&#39;AOV_twelve_month_ago&#39;) as &#39;AOV_twelve_month_ago&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39;;\n----------------------------------------------------------------------------------------------FILTER ATTRITION -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n\n Attrition = filter Attrition by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}} ;q2_CYATT = filter Attrition by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}} &amp;&amp;{{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYATT = filter Attrition by &#39;Month&#39; in   {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}} &amp;&amp;{{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYATT = filter Attrition by &#39;Month&#39; in   {{cell(Selector_Quarter.selection,0,&quot;YTD_Month&quot;).asString()}} &amp;&amp;{{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYATT = filter Attrition by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;YTD_Month&quot;).asString()}} &amp;&amp;{{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq4_CYATT = filter Attrition by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;YTD_Month_cum&quot;).asString()}} &amp;&amp;{{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\n------------------------------------------------------------------------------------------------------------------------------------------------LOAD PIPEGEN--------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nPipegen = load &quot;APM_Pipegen1&quot;;\nPipegen = filter Pipegen by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};Pipegen = filter Pipegen by &#39;Segment&#39; != &quot;CSG&quot;;\nPipegen = filter Pipegen by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};Pipegen = group Pipegen by (&#39;Fiscal_Year&#39;,&#39;Quarter&#39;,&#39;Cloud&#39;,&#39;Region&#39;,&#39;Month&#39;,&#39;Country&#39;);\nPipegen = foreach Pipegen generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Pipegen&#39;) as &#39;Pipegen&#39;,&#39;Region&#39; as &#39;Region&#39;,  {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39;  ; Pipegen = filter Pipegen by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}} ;;\n\nq2_CYPipegen = filter Pipegen by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp;{{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYPipegen = filter Pipegen by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp;{{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYPipegen = filter Pipegen by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_pipegen&quot;).asString()}} &amp;&amp;{{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYPipegen = filter Pipegen by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_pipegen&quot;).asString()}} &amp;&amp;{{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD /FILTER HC---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nHC = load &quot;APM_HC&quot;;\nHC = filter HC by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nHC = foreach HC generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;SE&#39;) as &#39;SE&#39;,sum(&#39;AE&#39;) as &#39;AE&#39;,sum(&#39;Co_Prime&#39;) as &#39;Co_Prime&#39;,&#39;Region&#39; as &#39;Region&#39;,  {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39;  ; HC = filter HC by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\n--HC = filter HC by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYHC = filter HC by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYHC = filter HC by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PY_2_HC = filter HC by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYHC = filter HC by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_HC&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYHC = filter HC by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_HC&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PY_2_HC = filter HC by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_HC&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD SWE INFRA------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nSW = load &quot;APM_SWE_INFRA&quot;;\nSW = filter SW by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nSW = foreach SW generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;SWE&#39;) as &#39;SWE&#39;,sum(&#39;INFRA&#39;) as &#39;INFRA&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; SW = filter SW by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};;\nSW = filter SW by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYSW = filter SW by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYSW = filter SW by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PY_2_SW = filter SW by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYSW = filter SW by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_SW&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYSW = filter SW by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_SW&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PY_2_SW = filter SW by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_SW&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD T_P------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nT_P = load &quot;APM_T_P&quot;;\nT_P = filter T_P by &#39;Cloud&#39; != &quot;TOTALS/SUMMARY&quot;;\nT_P = filter T_P by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nT_P = foreach T_P generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;CTS&#39;) as &#39;CTS&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; T_P = filter T_P by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};;\nT_P = filter T_P by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYT_P = filter T_P by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYT_P = filter T_P by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PY_2_T_P = filter T_P by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYT_P = filter T_P by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYT_P = filter T_P by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PY_2_T_P = filter T_P by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD TRANSACTION------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nTRANSACTION = load &quot;APM_T_P_Transactions&quot;;TRANSACTION = filter TRANSACTION by &#39;Cloud&#39; != &quot;TOTALS/SUMMARY&quot;;\nTRANSACTION = filter TRANSACTION by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nTRANSACTION = foreach TRANSACTION generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Transactions&#39;) as &#39;Transactions&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; TRANSACTION = filter TRANSACTION by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};;\nTRANSACTION = filter TRANSACTION by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYTRANSACTION = filter TRANSACTION by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYTRANSACTION = filter TRANSACTION by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PY_2_TRANSACTION = filter TRANSACTION by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYTRANSACTION = filter TRANSACTION by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYTRANSACTION = filter TRANSACTION by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PY_2_TRANSACTION = filter TRANSACTION by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD AVAILABILITY------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nAVAILABILITY = load &quot;APM_TECH_AVAILABILITY&quot;;AVAILABILITY = filter AVAILABILITY by &#39;Cloud&#39; != &quot;TOTALS/SUMMARY&quot;;\nAVAILABILITY = filter AVAILABILITY by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nAVAILABILITY = foreach AVAILABILITY generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Availability&#39;) as &#39;Availability&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; AVAILABILITY = filter AVAILABILITY by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};;\nAVAILABILITY = filter AVAILABILITY by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYAVAILABILITY = filter AVAILABILITY by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYAVAILABILITY = filter AVAILABILITY by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PY_2_AVAILABILITY = filter AVAILABILITY by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYAVAILABILITY = filter AVAILABILITY by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYAVAILABILITY = filter AVAILABILITY by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PY_2_AVAILABILITY = filter AVAILABILITY by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD REDACCOUNTS------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nREDACCOUNTS = load &quot;APM_REDACCOUNTS&quot;;REDACCOUNTS = filter REDACCOUNTS by &#39;Cloud&#39; != &quot;TOTALS/SUMMARY&quot;;\nREDACCOUNTS = filter REDACCOUNTS by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nREDACCOUNTS = foreach REDACCOUNTS generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Red_Accounts&#39;) as &#39;Red_Accounts&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; REDACCOUNTS = filter REDACCOUNTS by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};;\nREDACCOUNTS = filter REDACCOUNTS by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter_REDACCOUNTS&quot;).asString()}};\nq2_CYREDACCOUNTS = filter REDACCOUNTS by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYREDACCOUNTS = filter REDACCOUNTS by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PY_2_REDACCOUNTS = filter REDACCOUNTS by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYREDACCOUNTS = filter REDACCOUNTS by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYREDACCOUNTS = filter REDACCOUNTS by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PY_2_REDACCOUNTS = filter REDACCOUNTS by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD MARKET SHARE------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nSHARE = load &quot;APM_MARKET_SHARE&quot;;SHARE = filter SHARE by &#39;Cloud&#39; == &quot;TOTALS/SUMMARY&quot;;\nSHARE = filter SHARE by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nSHARE = foreach SHARE generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;TAM&#39;) as &#39;TAM&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; SHARE = filter SHARE by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};;\n--SHARE = filter SHARE by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYSHARE = filter SHARE by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYSHARE = filter SHARE by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PY_2_SHARE = filter SHARE by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYSHARE = filter SHARE by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_cum&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYSHARE = filter SHARE by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_cum&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PY_2_SHARE = filter SHARE by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_cum&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD CUSTOMER------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nCUSTOMER = load &quot;APM_MARKET_CUSTOMER&quot;;CUSTOMER = filter CUSTOMER by &#39;Cloud&#39; == &quot;TOTALS/SUMMARY&quot;;\nCUSTOMER = filter CUSTOMER by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nCUSTOMER = foreach CUSTOMER generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Customer&#39;) as &#39;Customer&#39;,sum(&#39;Cloud_m1&#39;) as &#39;Customer1&#39;,sum(&#39;Cloud_m2&#39;) as &#39;Customer2&#39;,sum(&#39;Cloud_m3&#39;) as &#39;Customer3&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ;\n CUSTOMER = filter CUSTOMER by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};;\n--CUSTOMER = filter CUSTOMER by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYCUSTOMER = filter CUSTOMER by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYCUSTOMER = filter CUSTOMER by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PY_2_CUSTOMER = filter CUSTOMER by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYCUSTOMER = filter CUSTOMER by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_cum&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYCUSTOMER = filter CUSTOMER by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_cum&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PY_2_CUSTOMER = filter CUSTOMER by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------Grouping------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nresult_Total = group q2_CYACV by all full, q2_PYACV by all full, q3_CYACV by all full, q3_PYACV by all full, q2_CYAOV by all full, q2_PYAOV by all full, q3_CYAOV by all full, q3_PYAOV by all full, q2_CYATT by all full, q2_PYATT by all full, q3_CYATT by all full, q3_PYATT by all full,q4_CYATT by all full,  q2_CYPipegen by all full, q2_PYPipegen by all full, q3_CYPipegen by all full, q3_PYPipegen by all full,q2_CYHC by all full, q2_PYHC by all full,q2_PY_2_HC by all full, q3_CYHC by all full, q3_PYHC by all full,q3_PY_2_HC by all full, q2_CYSW by all full, q2_PYSW by all full,q2_PY_2_SW by all full, q3_CYSW by all full, q3_PYSW by all full,q3_PY_2_SW by all full, q2_CYT_P by all full, q2_PYT_P by all full, q3_CYT_P by all full, q3_PYT_P by all full, q2_CYTRANSACTION by all full, q2_PYTRANSACTION by all full, q3_CYTRANSACTION by all full, q3_PYTRANSACTION by all full, q2_CYAVAILABILITY by all full, q2_PYAVAILABILITY by all full, q3_CYAVAILABILITY by all full, q3_PYAVAILABILITY by all full, q2_CYREDACCOUNTS by all full, q2_PYREDACCOUNTS by all full, q3_CYREDACCOUNTS by all full, q3_PYREDACCOUNTS by all full, q2_CYSHARE by all full, q2_PYSHARE by all full, q3_CYSHARE by all full, q3_PYSHARE by all full, q2_CYCUSTOMER by all full, q2_PYCUSTOMER by all full, q3_CYCUSTOMER by all full, q3_PYCUSTOMER by all;\nn\nresult_Total = foreach result_Total generate &quot;TOTAL&quot; as &#39;Cloud&#39;, coalesce(sum(q2_CYACV.&#39;ACV&#39;),0) as &#39;A&#39;, coalesce(sum(q2_PYACV.&#39;ACV&#39;),0) as &#39;B&#39;, coalesce(sum(q3_CYACV.&#39;ACV&#39;),0) as &#39;C&#39;, coalesce(sum(q3_PYACV.&#39;ACV&#39;),0) as &#39;D&#39;,coalesce(sum(q2_CYAOV.&#39;AOV&#39;),0) as &#39;E&#39;, coalesce(sum(q2_PYAOV.&#39;AOV&#39;),0) as &#39;F&#39;, coalesce(sum(q3_CYAOV.&#39;AOV&#39;),0) as &#39;G&#39;, coalesce(sum(q3_PYAOV.&#39;AOV&#39;),0) as &#39;H&#39;,coalesce(sum(q2_CYATT.&#39;Attrition_Product&#39;),0) as &#39;Attrition_CY_Q2&#39;,coalesce(sum(q3_CYATT.&#39;Attrition_Product&#39;),0) as &#39;Attrition_CY_Q3&#39;,coalesce(round(sum(q2_CYATT.&#39;TTM_Product&#39;), 0), 0) as &#39;TTM_Product_CY_Q2&#39; ,coalesce(round(sum(q2_CYATT.&#39;AOV_twelve_month_ago&#39;), 0), 0) as &#39;AOV_twelve_month_ago_CY_Q2&#39;,coalesce(round(sum(q4_CYATT.&#39;TTM_Product&#39;), 0), 0) as &#39;TTM_Product_CY_Q3&#39; ,coalesce(round(sum(q4_CYATT.&#39;AOV_twelve_month_ago&#39;), 0), 0) as &#39;AOV_twelve_month_ago_CY_Q3&#39;, coalesce(sum(q2_CYPipegen.&#39;Pipegen&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Pipegen Absolute&#39;, coalesce(sum(q3_CYPipegen.&#39;Pipegen&#39;), 0) as &#39;YTD Pipegen Absolute&#39;, ((coalesce(sum(q2_CYPipegen.&#39;Pipegen&#39;), 0) - coalesce(sum(q2_PYPipegen.&#39;Pipegen&#39;), 0)) / coalesce(sum(q2_PYPipegen.&#39;Pipegen&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Pipegen Growth&#39;, ((coalesce(sum(q3_CYPipegen.&#39;Pipegen&#39;), 0) - coalesce(sum(q3_PYPipegen.&#39;Pipegen&#39;), 0)) / coalesce(sum(q3_PYPipegen.&#39;Pipegen&#39;), 0)) * 100 as &#39;YTD Pipegen Growth&#39;,coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE Absolute&#39;, coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) as &#39;YTD SE Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) - coalesce(sum(q2_PYHC.&#39;SE&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;SE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SE Growth&#39;,(power(coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;SE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;SE&#39;), 0),(1/2))-1)*100 as &#39;YTD SE CAGR&#39;, ((coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) - coalesce(sum(q3_PYHC.&#39;SE&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;SE&#39;), 0)) * 100 as &#39;YTD SE Growth&#39;, coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE Absolute&#39;, coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) as &#39;YTD AE Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) - coalesce(sum(q2_PYHC.&#39;AE&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;AE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} AE Growth&#39;, ((coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) - coalesce(sum(q3_PYHC.&#39;AE&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;AE&#39;), 0)) * 100 as &#39;YTD AE Growth&#39;,(power(coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;AE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;AE&#39;), 0),(1/2))-1)*100 as &#39;YTD AE CAGR&#39;, coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime Absolute&#39;, coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) as &#39;YTD Co_Prime Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) - coalesce(sum(q2_PYHC.&#39;Co_Prime&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;Co_Prime&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Co_Prime Growth&#39;, ((coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) - coalesce(sum(q3_PYHC.&#39;Co_Prime&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;Co_Prime&#39;), 0)) * 100 as &#39;YTD Co_Prime Growth&#39;,(power(coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;Co_Prime&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;Co_Prime&#39;), 0),(1/2))-1)*100 as &#39;YTD Co_Prime CAGR&#39;, coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE Absolute&#39;, coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) as &#39;YTD SWE Absolute&#39;, ((coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) - coalesce(sum(q2_PYSW.&#39;SWE&#39;), 0)) / coalesce(sum(q2_PYSW.&#39;SWE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SWE Growth&#39;, ((coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) - coalesce(sum(q3_PYSW.&#39;SWE&#39;), 0)) / coalesce(sum(q3_PYSW.&#39;SWE&#39;), 0)) * 100 as &#39;YTD SWE Growth&#39;,(power(coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) / coalesce(sum(q2_PY_2_SW.&#39;SWE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE CAGR&#39;,(power(coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) / coalesce(sum(q3_PY_2_SW.&#39;SWE&#39;), 0),(1/2))-1)*100 as &#39;YTD SWE CAGR&#39;, coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA Absolute&#39;, coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) as &#39;YTD INFRA Absolute&#39;, ((coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) - coalesce(sum(q2_PYSW.&#39;INFRA&#39;), 0)) / coalesce(sum(q2_PYSW.&#39;INFRA&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} INFRA Growth&#39;, ((coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) - coalesce(sum(q3_PYSW.&#39;INFRA&#39;), 0)) / coalesce(sum(q3_PYSW.&#39;INFRA&#39;), 0)) * 100 as &#39;YTD INFRA Growth&#39;,(power(coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) / coalesce(sum(q2_PY_2_SW.&#39;INFRA&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA CAGR&#39;,(power(coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) / coalesce(sum(q3_PY_2_SW.&#39;INFRA&#39;), 0),(1/2))-1)*100 as &#39;YTD INFRA CAGR&#39;, coalesce(sum(q2_CYT_P.&#39;CTS&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} CTS Absolute&#39;, coalesce(sum(q3_CYT_P.&#39;CTS&#39;), 0) as &#39;YTD CTS Absolute&#39;, ((coalesce(sum(q2_CYT_P.&#39;CTS&#39;), 0) - coalesce(sum(q2_PYT_P.&#39;CTS&#39;), 0)) / coalesce(sum(q2_PYT_P.&#39;CTS&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} CTS Growth&#39;, ((coalesce(sum(q3_CYT_P.&#39;CTS&#39;), 0) - coalesce(sum(q3_PYT_P.&#39;CTS&#39;), 0)) / coalesce(sum(q3_PYT_P.&#39;CTS&#39;), 0)) * 100 as &#39;YTD CTS Growth&#39;, coalesce(sum(q2_CYTRANSACTION.&#39;Transactions&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Transactions Absolute&#39;, coalesce(sum(q3_CYTRANSACTION.&#39;Transactions&#39;), 0) as &#39;YTD Transactions Absolute&#39;, ((coalesce(sum(q2_CYTRANSACTION.&#39;Transactions&#39;), 0) - coalesce(sum(q2_PYTRANSACTION.&#39;Transactions&#39;), 0)) / coalesce(sum(q2_PYTRANSACTION.&#39;Transactions&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Transactions Growth&#39;, ((coalesce(sum(q3_CYTRANSACTION.&#39;Transactions&#39;), 0) - coalesce(sum(q3_PYTRANSACTION.&#39;Transactions&#39;), 0)) / coalesce(sum(q3_PYTRANSACTION.&#39;Transactions&#39;), 0)) * 100 as &#39;YTD Transactions Growth&#39;, coalesce(sum(q2_CYAVAILABILITY.&#39;Availability&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Availability Absolute&#39;, coalesce(sum(q3_CYAVAILABILITY.&#39;Availability&#39;), 0) as &#39;YTD Availability Absolute&#39;, ((coalesce(sum(q2_CYAVAILABILITY.&#39;Availability&#39;), 0) - coalesce(sum(q2_PYAVAILABILITY.&#39;Availability&#39;), 0)) / coalesce(sum(q2_PYAVAILABILITY.&#39;Availability&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Availability Growth&#39;, ((coalesce(sum(q3_CYAVAILABILITY.&#39;Availability&#39;), 0) - coalesce(sum(q3_PYAVAILABILITY.&#39;Availability&#39;), 0)) / coalesce(sum(q3_PYAVAILABILITY.&#39;Availability&#39;), 0)) * 100 as &#39;YTD Availability Growth&#39;,  coalesce(sum(q2_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Red_Accounts Absolute&#39;, coalesce(sum(q3_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) as &#39;YTD Red_Accounts Absolute&#39;, ((coalesce(sum(q2_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) - coalesce(sum(q2_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) / coalesce(sum(q2_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Red_Accounts Growth&#39;, ((coalesce(sum(q3_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) - coalesce(sum(q3_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) / coalesce(sum(q3_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) * 100 as &#39;YTD Red_Accounts Growth&#39;,coalesce(sum(q2_CYSHARE.&#39;TAM&#39;), 0)  as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} TAM Absolute&#39;,coalesce(sum(q3_CYSHARE.&#39;TAM&#39;), 0) as &#39;YTD TAM Absolute&#39;,(coalesce(sum(q2_CYAOV.&#39;AOV&#39;),0)/10000) / coalesce(sum(q2_CYSHARE.&#39;TAM&#39;), 0)  as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} TAM Growth&#39;, (coalesce(sum(q3_CYAOV.&#39;AOV&#39;),0)/10000)/ coalesce(sum(q3_CYSHARE.&#39;TAM&#39;), 0)  as &#39;YTD TAM Growth&#39;, coalesce(sum(q2_CYCUSTOMER.&#39;Customer&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Customer Absolute&#39;, coalesce(sum(q3_CYCUSTOMER.&#39;Customer&#39;), 0) as &#39;YTD Customer Absolute&#39;, ((coalesce(sum(q2_CYCUSTOMER.&#39;Customer&#39;), 0) - coalesce(sum(q2_PYCUSTOMER.&#39;Customer&#39;), 0)) / coalesce(sum(q2_PYCUSTOMER.&#39;Customer&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Customer Growth&#39;, ((coalesce(sum(q3_CYCUSTOMER.&#39;Customer&#39;), 0) - coalesce(sum(q3_PYCUSTOMER.&#39;Customer&#39;), 0)) / coalesce(sum(q3_PYCUSTOMER.&#39;Customer&#39;), 0)) * 100 as &#39;YTD Customer Growth&#39;;\nnresult_Total = foreach result_Total generate &#39;A&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} ACV Absolute&#39;,  &#39;C&#39; as  &#39;YTD ACV Absolute&#39;, ((A -B) / B) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} ACV Growth&#39;,((C - D) / D) * 100 as &#39;YTD ACV Growth&#39;,&#39;E&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AOV Absolute&#39;,  &#39;G&#39; as  &#39;YTD AOV Absolute&#39;, ((E -F) / F) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} AOV Growth&#39;,  ((G - H) / H) * 100  as &#39;YTD AOV Growth&#39;, coalesce(sum(&#39;Attrition_CY_Q2&#39;),0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Attrition Absolute&#39;, coalesce(sum(&#39;Attrition_CY_Q3&#39;),0) as &#39;YTD Attrition Absolute&#39;,(coalesce(round(sum(&#39;TTM_Product_CY_Q2&#39;), 0), 0) / coalesce(round(sum(AOV_twelve_month_ago_CY_Q2), 0), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Attrition TTM Rate&#39;, (coalesce(round(sum(&#39;TTM_Product_CY_Q3&#39;), 0), 0) / coalesce(round(sum(AOV_twelve_month_ago_CY_Q3), 0), 0)) * 100 as &#39;YTD Attrition TTM Rate&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Pipegen Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} PipeGen Absolute&#39;,&#39;YTD Pipegen Absolute&#39; as &#39;YTD PipeGen Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Pipegen Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} PipeGen Growth&#39;,&#39;YTD Pipegen Growth&#39; as &#39;YTD PipeGen Growth&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AEs&#39;,&#39;YTD AE Absolute&#39; as &#39;YTD AE Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE CAGR&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE CAGR&#39;,&#39;YTD AE CAGR&#39; as &#39;YTD AE CAGR&#39; ,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime&#39;,&#39;YTD Co_Prime Absolute&#39; as &#39;YTD Co_Prime Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime CAGR&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime CAGR&#39;,&#39;YTD Co_Prime CAGR&#39; as &#39;YTD Co_Prime CAGR&#39;, &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SEs&#39;,&#39;YTD SE Absolute&#39; as &#39;YTD SE Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE CAGR&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE CAGR&#39;,&#39;YTD SE CAGR&#39; as &#39;YTD SE CAGR&#39; ,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE&#39;,&#39;YTD SWE Absolute&#39; as &#39;YTD SWE Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SWE Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SWE Growth&#39;,&#39;YTD SWE Growth&#39; as &#39;YTD SWE Growth&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA&#39;,&#39;YTD INFRA Absolute&#39; as &#39;YTD INFRA Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} INFRA Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} INFRA Growth&#39;,&#39;YTD INFRA Growth&#39; as &#39;YTD INFRA Growth&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} CTS Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} CTS Absolute&#39;,&#39;YTD CTS Absolute&#39; as &#39;YTD CTS Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} CTS Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} CTS Growth&#39;,&#39;YTD CTS Growth&#39; as &#39;YTD CTS Growth&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Availability Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Availability Absolute&#39;,&#39;YTD Availability Absolute&#39; as &#39;YTD Availability Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Availability Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Availability Growth&#39;,&#39;YTD Availability Growth&#39; as &#39;YTD Availability Growth&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Transactions Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Transactions Absolute&#39;,&#39;YTD Transactions Absolute&#39; as &#39;YTD Transactions Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Transactions Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Transactions Growth&#39;,&#39;YTD Transactions Growth&#39; as &#39;YTD Transactions Growth&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Customer Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Customer Absolute&#39;,&#39;YTD Customer Absolute&#39; as &#39;YTD Customer Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Customer Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Customer Growth&#39;,&#39;YTD Customer Growth&#39; as &#39;YTD Customer Growth&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} TAM Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} TAM Absolute&#39;,&#39;YTD TAM Absolute&#39; as &#39;YTD TAM Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} TAM Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} TAM Growth&#39;,&#39;YTD TAM Growth&#39; as &#39;YTD TAM Growth&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Red_Accounts Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Red_Accounts Absolute&#39;,&#39;YTD Red_Accounts Absolute&#39; as &#39;YTD Red_Accounts Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Red_Accounts Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Red_Accounts Growth&#39;,&#39;YTD Red_Accounts Growth&#39; as &#39;YTD Red_Accounts Growth&#39;;\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------NONE for Fake HEADER--------------------------------------------------------------------------------------------------------------\n;result_none = group APM_None by &#39;all&#39;; result_none = foreach result_none generate 0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} ACV Absolute&#39;,  0 as  &#39;YTD ACV Absolute&#39;, 0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} ACV Growth&#39;,0 as &#39;YTD ACV Growth&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AOV Absolute&#39;, 0 as  &#39;YTD AOV Absolute&#39;, 0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} AOV Growth&#39;, 0 as &#39;YTD AOV Growth&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Attrition Absolute&#39;,0 as &#39;YTD Attrition Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Attrition TTM Rate&#39;, 0 as &#39;YTD Attrition TTM Rate&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} PipeGen Absolute&#39;,0 as &#39;YTD PipeGen Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} PipeGen Growth&#39;,0 as &#39;YTD PipeGen Growth&#39;, 0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AEs&#39;,0 as &#39;YTD AE Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE CAGR&#39;,0 as &#39;YTD AE CAGR&#39; ,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime&#39;,0 as &#39;YTD Co_Prime Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime CAGR&#39;,0 as &#39;YTD Co_Prime CAGR&#39;, 0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SEs&#39;,0 as &#39;YTD SE Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE CAGR&#39;,0 as &#39;YTD SE CAGR&#39; ,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE&#39;,0 as &#39;YTD SWE Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SWE Growth&#39;,0 as &#39;YTD SWE Growth&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA&#39;,0 as &#39;YTD INFRA Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} INFRA Growth&#39;,0 as &#39;YTD INFRA Growth&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} CTS Absolute&#39;,0 as &#39;YTD CTS Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} CTS Growth&#39;,0 as &#39;YTD CTS Growth&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Availability Absolute&#39;,0 as &#39;YTD Availability Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Availability Growth&#39;,0 as &#39;YTD Availability Growth&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Transactions Absolute&#39;,0 as &#39;YTD Transactions Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Transactions Growth&#39;,0 as &#39;YTD Transactions Growth&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Customer Absolute&#39;,0 as &#39;YTD Customer Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Customer Growth&#39;,0 as &#39;YTD Customer Growth&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} TAM Absolute&#39;,0 as &#39;YTD TAM Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} TAM Growth&#39;,0 as &#39;YTD TAM Growth&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Red_Accounts Absolute&#39;,0 as &#39;YTD Red_Accounts Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Red_Accounts Growth&#39;,0 as &#39;YTD Red_Accounts Growth&#39;; \n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------UNION--------------------------------------------------------------------------------------------------------------\n;result_union = union result_none, result_Total;result_union = group result_union by &#39;all&#39;; final_result = foreach result_union generate &quot;TOTAL                        &quot; as &#39;Cloud&#39;, sum(&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Customer Absolute&#39;) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Customer Absolute&#39;, sum(&#39;YTD Customer Absolute&#39;) as &#39;YTD Customer Absolute&#39;, sum(&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Customer Growth&#39;) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Customer Growth&#39;, sum(&#39;YTD Customer Growth&#39;) as  &#39;YTD Customer Growth&#39;,sum(&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} TAM Absolute&#39;) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} TAM Absolute&#39;, 0 as &#39;YTD TAM Absolute&#39;, sum(&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} TAM Growth&#39;) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} TAM Growth&#39;, 0 as  &#39;YTD TAM Growth&#39;,sum(&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Red_Accounts Absolute&#39;) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Red_Accounts Absolute&#39;, sum(&#39;YTD Red_Accounts Absolute&#39;) as &#39;YTD Red_Accounts Absolute&#39;, sum(&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Red_Accounts Growth&#39;) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Red_Accounts Growth&#39;, sum(&#39;YTD Red_Accounts Growth&#39;) as  &#39;YTD Red_Accounts Growth&#39; ;",
        "receiveFacet": true,
        "selectMode": "none",
        "strings": [],
        "type": "saql",
        "useGlobal": true,
        "visualizationParameters": {
          "visualizationType": "hbar"
        }
      },
      "Table_Page_2_Header": {
        "broadcastFacet": true,
        "groups": [],
        "label": "Table_Page_2_Header",
        "numbers": [],
        "query": "MasterHierarchy = load &quot;Master_Hierarchy&quot;;\nMasterHierarchy = filter MasterHierarchy by &#39;Level_1&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nACV = load &quot;APM_ACV&quot;;\nACV = filter ACV by &#39;Segment&#39; != &quot;CSG&quot;;\nACV = filter ACV by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nACV = filter ACV by &#39;Cloud&#39; in {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};;\nACV = group ACV by (&#39;Cloud&#39;,&#39;Subcloud&#39;, &#39;Quarter&#39;,&#39;Month&#39;, &#39;Fiscal_Year&#39;, &#39;Region&#39; , &#39;Country&#39;);\nACV = foreach ACV generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39; ,&#39;Month&#39; as &#39;Month&#39;,sum(&#39;ACV&#39;) as &#39;ACV&#39;, &#39;Region&#39; as &#39;Region&#39;,  {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; ACV = filter ACV by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}} ;\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD NONE For Fake Header line----------------------------------------------------------------------------------------------------------------------------------------------------------\n\nAPM_None = load &quot;APM_ACV&quot;;\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------FILTER ACV----------------------------------------------------------------------------------------------------------------------------------------------------------\n\nq2_CYACV = filter ACV by &#39;Month&#39; in   {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}}  &amp;&amp;{{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYACV = filter ACV by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}}  &amp;&amp;{{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYACV = filter ACV by &#39;Month&#39; in   {{cell(Selector_Quarter.selection,0,&quot;YTD_Month&quot;).asString()}} &amp;&amp;{{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYACV = filter ACV by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;YTD_Month&quot;).asString()}} &amp;&amp;{{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nn\nAOV = load &quot;APM_AOV&quot;;\nAOV = filter AOV by &#39;Segment&#39; != &quot;CSG&quot;;\nAOV = filter AOV by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\n--AOV = filter AOV by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nAOV = foreach AOV generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;AOV&#39;) as &#39;AOV&#39;,&#39;Region&#39; as &#39;Region&#39;,  {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39;; AOV = filter AOV by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------FILTER AOV ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nq2_CYAOV = filter AOV by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}} &amp;&amp;{{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYAOV = filter AOV by &#39;Month&#39; in   {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}} &amp;&amp;{{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYAOV = filter AOV by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;YTD_Month_cum&quot;).asString()}}&amp;&amp;{{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYAOV = filter AOV by &#39;Month&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Month_cum&quot;).asString()}} &amp;&amp;{{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------/////////////////////////////-----------LOAD ATTRITION ----------------/////////////////////////////////////////\n\nAttrition = load &quot;APM_Attrition&quot;;\nAttrition = filter Attrition by &#39;Segment&#39; != &quot;CSG&quot;;\nAttrition = filter Attrition by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\n--Attrition = filter Attrition by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nAttrition = foreach Attrition generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Attrition&#39;)*-1 as &#39;Attrition_Product&#39;, sum(&#39;TTM&#39;)*-1 as &#39;TTM_Product&#39;,sum(&#39;AOV_twelve_month_ago&#39;) as &#39;AOV_twelve_month_ago&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39;;\n----------------------------------------------------------------------------------------------FILTER ATTRITION -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n\n Attrition = filter Attrition by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}} ;q2_CYATT = filter Attrition by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}} &amp;&amp;{{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYATT = filter Attrition by &#39;Month&#39; in   {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}} &amp;&amp;{{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYATT = filter Attrition by &#39;Month&#39; in   {{cell(Selector_Quarter.selection,0,&quot;YTD_Month&quot;).asString()}} &amp;&amp;{{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYATT = filter Attrition by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;YTD_Month&quot;).asString()}} &amp;&amp;{{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq4_CYATT = filter Attrition by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;YTD_Month_cum&quot;).asString()}} &amp;&amp;{{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\n------------------------------------------------------------------------------------------------------------------------------------------------LOAD PIPEGEN--------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nPipegen = load &quot;APM_Pipegen1&quot;;\nPipegen = filter Pipegen by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};Pipegen = filter Pipegen by &#39;Segment&#39; != &quot;CSG&quot;;\nPipegen = filter Pipegen by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};Pipegen = group Pipegen by (&#39;Fiscal_Year&#39;,&#39;Quarter&#39;,&#39;Cloud&#39;,&#39;Region&#39;,&#39;Month&#39;,&#39;Country&#39;);\nPipegen = foreach Pipegen generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Pipegen&#39;) as &#39;Pipegen&#39;,&#39;Region&#39; as &#39;Region&#39;,  {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39;  ; Pipegen = filter Pipegen by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}} ;;\n\nq2_CYPipegen = filter Pipegen by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp;{{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYPipegen = filter Pipegen by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp;{{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYPipegen = filter Pipegen by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_pipegen&quot;).asString()}} &amp;&amp;{{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYPipegen = filter Pipegen by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_pipegen&quot;).asString()}} &amp;&amp;{{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD /FILTER HC---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nHC = load &quot;APM_HC&quot;;\nHC = filter HC by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nHC = foreach HC generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;SE&#39;) as &#39;SE&#39;,sum(&#39;AE&#39;) as &#39;AE&#39;,sum(&#39;Co_Prime&#39;) as &#39;Co_Prime&#39;,&#39;Region&#39; as &#39;Region&#39;,  {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39;  ; HC = filter HC by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\n--HC = filter HC by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYHC = filter HC by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYHC = filter HC by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PY_2_HC = filter HC by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYHC = filter HC by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_HC&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYHC = filter HC by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_HC&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PY_2_HC = filter HC by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_HC&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD SWE INFRA------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nSW = load &quot;APM_SWE_INFRA&quot;;\nSW = filter SW by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nSW = foreach SW generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;SWE&#39;) as &#39;SWE&#39;,sum(&#39;INFRA&#39;) as &#39;INFRA&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; SW = filter SW by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};;\nSW = filter SW by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYSW = filter SW by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYSW = filter SW by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PY_2_SW = filter SW by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYSW = filter SW by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_SW&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYSW = filter SW by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_SW&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PY_2_SW = filter SW by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_SW&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD T_P------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nT_P = load &quot;APM_T_P&quot;;\nT_P = filter T_P by &#39;Cloud&#39; != &quot;TOTALS/SUMMARY&quot;;\nT_P = filter T_P by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nT_P = foreach T_P generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;CTS&#39;) as &#39;CTS&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; T_P = filter T_P by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};;\nT_P = filter T_P by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYT_P = filter T_P by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYT_P = filter T_P by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PY_2_T_P = filter T_P by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYT_P = filter T_P by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYT_P = filter T_P by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PY_2_T_P = filter T_P by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD TRANSACTION------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nTRANSACTION = load &quot;APM_T_P_Transactions&quot;;TRANSACTION = filter TRANSACTION by &#39;Cloud&#39; != &quot;TOTALS/SUMMARY&quot;;\nTRANSACTION = filter TRANSACTION by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nTRANSACTION = foreach TRANSACTION generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Transactions&#39;) as &#39;Transactions&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; TRANSACTION = filter TRANSACTION by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};;\nTRANSACTION = filter TRANSACTION by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYTRANSACTION = filter TRANSACTION by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYTRANSACTION = filter TRANSACTION by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PY_2_TRANSACTION = filter TRANSACTION by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYTRANSACTION = filter TRANSACTION by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYTRANSACTION = filter TRANSACTION by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PY_2_TRANSACTION = filter TRANSACTION by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD AVAILABILITY------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nAVAILABILITY = load &quot;APM_TECH_AVAILABILITY&quot;;AVAILABILITY = filter AVAILABILITY by &#39;Cloud&#39; != &quot;TOTALS/SUMMARY&quot;;\nAVAILABILITY = filter AVAILABILITY by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nAVAILABILITY = foreach AVAILABILITY generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Availability&#39;) as &#39;Availability&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; AVAILABILITY = filter AVAILABILITY by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};;\nAVAILABILITY = filter AVAILABILITY by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYAVAILABILITY = filter AVAILABILITY by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYAVAILABILITY = filter AVAILABILITY by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PY_2_AVAILABILITY = filter AVAILABILITY by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYAVAILABILITY = filter AVAILABILITY by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYAVAILABILITY = filter AVAILABILITY by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PY_2_AVAILABILITY = filter AVAILABILITY by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD REDACCOUNTS------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nREDACCOUNTS = load &quot;APM_REDACCOUNTS&quot;;REDACCOUNTS = filter REDACCOUNTS by &#39;Cloud&#39; != &quot;TOTALS/SUMMARY&quot;;\nREDACCOUNTS = filter REDACCOUNTS by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nREDACCOUNTS = foreach REDACCOUNTS generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Red_Accounts&#39;) as &#39;Red_Accounts&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; REDACCOUNTS = filter REDACCOUNTS by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};;\nREDACCOUNTS = filter REDACCOUNTS by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter_REDACCOUNTS&quot;).asString()}};\nq2_CYREDACCOUNTS = filter REDACCOUNTS by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYREDACCOUNTS = filter REDACCOUNTS by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PY_2_REDACCOUNTS = filter REDACCOUNTS by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYREDACCOUNTS = filter REDACCOUNTS by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYREDACCOUNTS = filter REDACCOUNTS by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PY_2_REDACCOUNTS = filter REDACCOUNTS by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD MARKET SHARE------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nSHARE = load &quot;APM_MARKET_SHARE&quot;;SHARE = filter SHARE by &#39;Cloud&#39; == &quot;TOTALS/SUMMARY&quot;;\nSHARE = filter SHARE by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nSHARE = foreach SHARE generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;TAM&#39;) as &#39;TAM&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; SHARE = filter SHARE by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};;\n--SHARE = filter SHARE by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYSHARE = filter SHARE by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYSHARE = filter SHARE by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PY_2_SHARE = filter SHARE by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYSHARE = filter SHARE by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_cum&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYSHARE = filter SHARE by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_cum&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PY_2_SHARE = filter SHARE by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_cum&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD CUSTOMER------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nCUSTOMER = load &quot;APM_MARKET_CUSTOMER&quot;;CUSTOMER = filter CUSTOMER by &#39;Cloud&#39; == &quot;TOTALS/SUMMARY&quot;;\nCUSTOMER = filter CUSTOMER by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nCUSTOMER = foreach CUSTOMER generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Customer&#39;) as &#39;Customer&#39;,sum(&#39;Cloud_m1&#39;) as &#39;Customer1&#39;,sum(&#39;Cloud_m2&#39;) as &#39;Customer2&#39;,sum(&#39;Cloud_m3&#39;) as &#39;Customer3&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ;\n CUSTOMER = filter CUSTOMER by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};;\n--CUSTOMER = filter CUSTOMER by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYCUSTOMER = filter CUSTOMER by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYCUSTOMER = filter CUSTOMER by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PY_2_CUSTOMER = filter CUSTOMER by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYCUSTOMER = filter CUSTOMER by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_cum&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYCUSTOMER = filter CUSTOMER by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_cum&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PY_2_CUSTOMER = filter CUSTOMER by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\n\n----------------------AE PARTICIPATION-----------------------------\nPARTICIPATION = load &quot;APM_AE&quot;;\nPARTICIPATION = filter PARTICIPATION by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nPARTICIPATION = filter PARTICIPATION by &#39;Region&#39; == &quot;N/A&quot;;\nPARTICIPATION = filter PARTICIPATION by &#39;Lead&#39; == &quot;N/A&quot;;\nPARTICIPATION = foreach PARTICIPATION generate &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Cloud_m1&#39;) as &#39;Cloud_m1&#39;,&#39;Region&#39; as &#39;Region&#39;,  {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; \nPARTICIPATION = filter PARTICIPATION by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\nPARTICIPATION = filter PARTICIPATION by &#39;Cloud&#39; in {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\n\nq2_CYPARTICIPATION = filter PARTICIPATION by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYPARTICIPATION = filter PARTICIPATION by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PY_2_PARTICIPATION = filter PARTICIPATION by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYPARTICIPATION = filter PARTICIPATION by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYPARTICIPATION = filter PARTICIPATION by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PY_2_PARTICIPATION = filter PARTICIPATION by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\n\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------Grouping------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nresult_Total = group q2_CYACV by all full, q2_PYACV by all full, q3_CYACV by all full, q3_PYACV by all full, q2_CYAOV by all full, q2_PYAOV by all full, q3_CYAOV by all full, q3_PYAOV by all full, q2_CYATT by all full, q2_PYATT by all full, q3_CYATT by all full, q3_PYATT by all full,q4_CYATT by all full,  q2_CYPipegen by all full, q2_PYPipegen by all full, q3_CYPipegen by all full, q3_PYPipegen by all full,q2_CYHC by all full, q2_PYHC by all full,q2_PY_2_HC by all full, q3_CYHC by all full, q3_PYHC by all full,q3_PY_2_HC by all full, q2_CYSW by all full, q2_PYSW by all full,q2_PY_2_SW by all full, q3_CYSW by all full, q3_PYSW by all full,q3_PY_2_SW by all full, q2_CYT_P by all full, q2_PYT_P by all full, q3_CYT_P by all full, q3_PYT_P by all full, q2_CYTRANSACTION by all full, q2_PYTRANSACTION by all full, q3_CYTRANSACTION by all full, q3_PYTRANSACTION by all full, q2_CYAVAILABILITY by all full, q2_PYAVAILABILITY by all full, q3_CYAVAILABILITY by all full, q3_PYAVAILABILITY by all full, q2_CYREDACCOUNTS by all full, q2_PYREDACCOUNTS by all full, q3_CYREDACCOUNTS by all full, q3_PYREDACCOUNTS by all full, q2_CYSHARE by all full, q2_PYSHARE by all full, q3_CYSHARE by all full, q3_PYSHARE by all full, \n\nq2_CYPARTICIPATION by &#39;Cloud&#39; full, q2_PYPARTICIPATION by &#39;Cloud&#39; full, q2_PY_2_PARTICIPATION by &#39;Cloud&#39; full, q3_CYPARTICIPATION by &#39;Cloud&#39; full, q3_PYPARTICIPATION by &#39;Cloud&#39; full, q3_PY_2_PARTICIPATION by &#39;Cloud&#39; full,\n\nq2_CYCUSTOMER by all full, q2_PYCUSTOMER by all full, q3_CYCUSTOMER by all full, q3_PYCUSTOMER by all;\nn\nresult_Total = foreach result_Total generate &quot;TOTAL&quot; as &#39;Cloud&#39;, coalesce(sum(q2_CYACV.&#39;ACV&#39;),0) as &#39;A&#39;, coalesce(sum(q2_PYACV.&#39;ACV&#39;),0) as &#39;B&#39;, coalesce(sum(q3_CYACV.&#39;ACV&#39;),0) as &#39;C&#39;, coalesce(sum(q3_PYACV.&#39;ACV&#39;),0) as &#39;D&#39;,coalesce(sum(q2_CYAOV.&#39;AOV&#39;),0) as &#39;E&#39;, coalesce(sum(q2_PYAOV.&#39;AOV&#39;),0) as &#39;F&#39;, coalesce(sum(q3_CYAOV.&#39;AOV&#39;),0) as &#39;G&#39;, coalesce(sum(q3_PYAOV.&#39;AOV&#39;),0) as &#39;H&#39;,coalesce(sum(q2_CYATT.&#39;Attrition_Product&#39;),0) as &#39;Attrition_CY_Q2&#39;,coalesce(sum(q3_CYATT.&#39;Attrition_Product&#39;),0) as &#39;Attrition_CY_Q3&#39;,coalesce(round(sum(q2_CYATT.&#39;TTM_Product&#39;), 0), 0) as &#39;TTM_Product_CY_Q2&#39; ,coalesce(round(sum(q2_CYATT.&#39;AOV_twelve_month_ago&#39;), 0), 0) as &#39;AOV_twelve_month_ago_CY_Q2&#39;,coalesce(round(sum(q4_CYATT.&#39;TTM_Product&#39;), 0), 0) as &#39;TTM_Product_CY_Q3&#39; ,coalesce(round(sum(q4_CYATT.&#39;AOV_twelve_month_ago&#39;), 0), 0) as &#39;AOV_twelve_month_ago_CY_Q3&#39;, coalesce(sum(q2_CYPipegen.&#39;Pipegen&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Pipegen Absolute&#39;, coalesce(sum(q3_CYPipegen.&#39;Pipegen&#39;), 0) as &#39;YTD Pipegen Absolute&#39;, ((coalesce(sum(q2_CYPipegen.&#39;Pipegen&#39;), 0) - coalesce(sum(q2_PYPipegen.&#39;Pipegen&#39;), 0)) / coalesce(sum(q2_PYPipegen.&#39;Pipegen&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Pipegen Growth&#39;, ((coalesce(sum(q3_CYPipegen.&#39;Pipegen&#39;), 0) - coalesce(sum(q3_PYPipegen.&#39;Pipegen&#39;), 0)) / coalesce(sum(q3_PYPipegen.&#39;Pipegen&#39;), 0)) * 100 as &#39;YTD Pipegen Growth&#39;,coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE Absolute&#39;, coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) as &#39;YTD SE Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) - coalesce(sum(q2_PYHC.&#39;SE&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;SE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SE Growth&#39;,(power(coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;SE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;SE&#39;), 0),(1/2))-1)*100 as &#39;YTD SE CAGR&#39;, ((coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) - coalesce(sum(q3_PYHC.&#39;SE&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;SE&#39;), 0)) * 100 as &#39;YTD SE Growth&#39;, coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE Absolute&#39;, coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) as &#39;YTD AE Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) - coalesce(sum(q2_PYHC.&#39;AE&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;AE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} AE Growth&#39;, ((coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) - coalesce(sum(q3_PYHC.&#39;AE&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;AE&#39;), 0)) * 100 as &#39;YTD AE Growth&#39;,(power(coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;AE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;AE&#39;), 0),(1/2))-1)*100 as &#39;YTD AE CAGR&#39;, coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime Absolute&#39;, coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) as &#39;YTD Co_Prime Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) - coalesce(sum(q2_PYHC.&#39;Co_Prime&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;Co_Prime&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Co_Prime Growth&#39;, ((coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) - coalesce(sum(q3_PYHC.&#39;Co_Prime&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;Co_Prime&#39;), 0)) * 100 as &#39;YTD Co_Prime Growth&#39;,(power(coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;Co_Prime&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;Co_Prime&#39;), 0),(1/2))-1)*100 as &#39;YTD Co_Prime CAGR&#39;, coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE Absolute&#39;, coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) as &#39;YTD SWE Absolute&#39;, ((coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) - coalesce(sum(q2_PYSW.&#39;SWE&#39;), 0)) / coalesce(sum(q2_PYSW.&#39;SWE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SWE Growth&#39;, ((coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) - coalesce(sum(q3_PYSW.&#39;SWE&#39;), 0)) / coalesce(sum(q3_PYSW.&#39;SWE&#39;), 0)) * 100 as &#39;YTD SWE Growth&#39;,(power(coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) / coalesce(sum(q2_PY_2_SW.&#39;SWE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE CAGR&#39;,(power(coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) / coalesce(sum(q3_PY_2_SW.&#39;SWE&#39;), 0),(1/2))-1)*100 as &#39;YTD SWE CAGR&#39;, coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA Absolute&#39;, coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) as &#39;YTD INFRA Absolute&#39;, ((coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) - coalesce(sum(q2_PYSW.&#39;INFRA&#39;), 0)) / coalesce(sum(q2_PYSW.&#39;INFRA&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} INFRA Growth&#39;, ((coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) - coalesce(sum(q3_PYSW.&#39;INFRA&#39;), 0)) / coalesce(sum(q3_PYSW.&#39;INFRA&#39;), 0)) * 100 as &#39;YTD INFRA Growth&#39;,(power(coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) / coalesce(sum(q2_PY_2_SW.&#39;INFRA&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA CAGR&#39;,(power(coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) / coalesce(sum(q3_PY_2_SW.&#39;INFRA&#39;), 0),(1/2))-1)*100 as &#39;YTD INFRA CAGR&#39;, coalesce(sum(q2_CYT_P.&#39;CTS&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} CTS Absolute&#39;, coalesce(sum(q3_CYT_P.&#39;CTS&#39;), 0) as &#39;YTD CTS Absolute&#39;, ((coalesce(sum(q2_CYT_P.&#39;CTS&#39;), 0) - coalesce(sum(q2_PYT_P.&#39;CTS&#39;), 0)) / coalesce(sum(q2_PYT_P.&#39;CTS&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} CTS Growth&#39;, ((coalesce(sum(q3_CYT_P.&#39;CTS&#39;), 0) - coalesce(sum(q3_PYT_P.&#39;CTS&#39;), 0)) / coalesce(sum(q3_PYT_P.&#39;CTS&#39;), 0)) * 100 as &#39;YTD CTS Growth&#39;, coalesce(sum(q2_CYTRANSACTION.&#39;Transactions&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Transactions Absolute&#39;, coalesce(sum(q3_CYTRANSACTION.&#39;Transactions&#39;), 0) as &#39;YTD Transactions Absolute&#39;, ((coalesce(sum(q2_CYTRANSACTION.&#39;Transactions&#39;), 0) - coalesce(sum(q2_PYTRANSACTION.&#39;Transactions&#39;), 0)) / coalesce(sum(q2_PYTRANSACTION.&#39;Transactions&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Transactions Growth&#39;, ((coalesce(sum(q3_CYTRANSACTION.&#39;Transactions&#39;), 0) - coalesce(sum(q3_PYTRANSACTION.&#39;Transactions&#39;), 0)) / coalesce(sum(q3_PYTRANSACTION.&#39;Transactions&#39;), 0)) * 100 as &#39;YTD Transactions Growth&#39;, coalesce(sum(q2_CYAVAILABILITY.&#39;Availability&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Availability Absolute&#39;, coalesce(sum(q3_CYAVAILABILITY.&#39;Availability&#39;), 0) as &#39;YTD Availability Absolute&#39;, ((coalesce(sum(q2_CYAVAILABILITY.&#39;Availability&#39;), 0) - coalesce(sum(q2_PYAVAILABILITY.&#39;Availability&#39;), 0)) / coalesce(sum(q2_PYAVAILABILITY.&#39;Availability&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Availability Growth&#39;, ((coalesce(sum(q3_CYAVAILABILITY.&#39;Availability&#39;), 0) - coalesce(sum(q3_PYAVAILABILITY.&#39;Availability&#39;), 0)) / coalesce(sum(q3_PYAVAILABILITY.&#39;Availability&#39;), 0)) * 100 as &#39;YTD Availability Growth&#39;,  coalesce(sum(q2_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Red_Accounts Absolute&#39;, coalesce(sum(q3_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) as &#39;YTD Red_Accounts Absolute&#39;, ((coalesce(sum(q2_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) - coalesce(sum(q2_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) / coalesce(sum(q2_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Red_Accounts Growth&#39;, ((coalesce(sum(q3_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) - coalesce(sum(q3_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) / coalesce(sum(q3_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) * 100 as &#39;YTD Red_Accounts Growth&#39;, coalesce(sum(q2_CYSHARE.&#39;TAM&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} TAM Absolute&#39;, coalesce(sum(q3_CYSHARE.&#39;TAM&#39;), 0) as &#39;YTD TAM Absolute&#39;, ((coalesce(sum(q2_CYSHARE.&#39;TAM&#39;), 0) - coalesce(sum(q2_PYSHARE.&#39;TAM&#39;), 0)) / coalesce(sum(q2_PYSHARE.&#39;TAM&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} TAM Growth&#39;, ((coalesce(sum(q3_CYSHARE.&#39;TAM&#39;), 0) - coalesce(sum(q3_PYSHARE.&#39;TAM&#39;), 0)) / coalesce(sum(q3_PYSHARE.&#39;TAM&#39;), 0)) * 100 as &#39;YTD TAM Growth&#39;, \n\ncoalesce(sum(q2_CYPARTICIPATION.&#39;Cloud_m1&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Participation Absolute&#39;, \ncoalesce(sum(q3_CYPARTICIPATION.&#39;Cloud_m1&#39;), 0) as &#39;YTD Participation Absolute&#39;, \n((coalesce(sum(q2_CYPARTICIPATION.&#39;Cloud_m1&#39;), 0) - coalesce(sum(q2_PYPARTICIPATION.&#39;Cloud_m1&#39;), 0)) / coalesce(sum(q2_PYPARTICIPATION.&#39;Cloud_m1&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Participation Growth&#39;, \n((coalesce(sum(q3_CYPARTICIPATION.&#39;Cloud_m1&#39;), 0) - coalesce(sum(q3_PYPARTICIPATION.&#39;Cloud_m1&#39;), 0)) / coalesce(sum(q3_PYPARTICIPATION.&#39;Cloud_m1&#39;), 0)) * 100 as &#39;YTD Participation Growth&#39;,\n\ncoalesce(sum(q2_CYCUSTOMER.&#39;Customer&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Customer Absolute&#39;, \ncoalesce(sum(q3_CYCUSTOMER.&#39;Customer&#39;), 0) as &#39;YTD Customer Absolute&#39;, \n((coalesce(sum(q2_CYCUSTOMER.&#39;Customer&#39;), 0) - coalesce(sum(q2_PYCUSTOMER.&#39;Customer&#39;), 0)) / coalesce(sum(q2_PYCUSTOMER.&#39;Customer&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Customer Growth&#39;, \n((coalesce(sum(q3_CYCUSTOMER.&#39;Customer&#39;), 0) - coalesce(sum(q3_PYCUSTOMER.&#39;Customer&#39;), 0)) / coalesce(sum(q3_PYCUSTOMER.&#39;Customer&#39;), 0)) * 100 as &#39;YTD Customer Growth&#39;;\nnresult_Total = foreach result_Total generate &#39;A&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} ACV Absolute&#39;,  &#39;C&#39; as  &#39;YTD ACV Absolute&#39;, ((A -B) / B) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} ACV Growth&#39;,((C - D) / D) * 100 as &#39;YTD ACV Growth&#39;,&#39;E&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AOV Absolute&#39;,  &#39;G&#39; as  &#39;YTD AOV Absolute&#39;, ((E -F) / F) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} AOV Growth&#39;,  ((G - H) / H) * 100  as &#39;YTD AOV Growth&#39;, coalesce(sum(&#39;Attrition_CY_Q2&#39;),0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Attrition Absolute&#39;, coalesce(sum(&#39;Attrition_CY_Q3&#39;),0) as &#39;YTD Attrition Absolute&#39;,(coalesce(round(sum(&#39;TTM_Product_CY_Q2&#39;), 0), 0) / coalesce(round(sum(AOV_twelve_month_ago_CY_Q2), 0), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Attrition TTM Rate&#39;, (coalesce(round(sum(&#39;TTM_Product_CY_Q3&#39;), 0), 0) / coalesce(round(sum(AOV_twelve_month_ago_CY_Q3), 0), 0)) * 100 as &#39;YTD Attrition TTM Rate&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Pipegen Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} PipeGen Absolute&#39;,&#39;YTD Pipegen Absolute&#39; as &#39;YTD PipeGen Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Pipegen Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} PipeGen Growth&#39;,&#39;YTD Pipegen Growth&#39; as &#39;YTD PipeGen Growth&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AEs&#39;,&#39;YTD AE Absolute&#39; as &#39;YTD AE Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE CAGR&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE CAGR&#39;,&#39;YTD AE CAGR&#39; as &#39;YTD AE CAGR&#39; ,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime&#39;,&#39;YTD Co_Prime Absolute&#39; as &#39;YTD Co_Prime Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime CAGR&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime CAGR&#39;,&#39;YTD Co_Prime CAGR&#39; as &#39;YTD Co_Prime CAGR&#39;, &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SEs&#39;,&#39;YTD SE Absolute&#39; as &#39;YTD SE Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE CAGR&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE CAGR&#39;,&#39;YTD SE CAGR&#39; as &#39;YTD SE CAGR&#39; ,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE&#39;,&#39;YTD SWE Absolute&#39; as &#39;YTD SWE Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SWE Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SWE Growth&#39;,&#39;YTD SWE Growth&#39; as &#39;YTD SWE Growth&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA&#39;,&#39;YTD INFRA Absolute&#39; as &#39;YTD INFRA Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} INFRA Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} INFRA Growth&#39;,&#39;YTD INFRA Growth&#39; as &#39;YTD INFRA Growth&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} CTS Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} CTS Absolute&#39;,&#39;YTD CTS Absolute&#39; as &#39;YTD CTS Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} CTS Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} CTS Growth&#39;,&#39;YTD CTS Growth&#39; as &#39;YTD CTS Growth&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Availability Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Availability Absolute&#39;,&#39;YTD Availability Absolute&#39; as &#39;YTD Availability Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Availability Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Availability Growth&#39;,&#39;YTD Availability Growth&#39; as &#39;YTD Availability Growth&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Transactions Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Transactions Absolute&#39;,&#39;YTD Transactions Absolute&#39; as &#39;YTD Transactions Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Transactions Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Transactions Growth&#39;,&#39;YTD Transactions Growth&#39; as &#39;YTD Transactions Growth&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Customer Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Customer Absolute&#39;,&#39;YTD Customer Absolute&#39; as &#39;YTD Customer Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Customer Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Customer Growth&#39;,&#39;YTD Customer Growth&#39; as &#39;YTD Customer Growth&#39;,\n\n&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Participation Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Participation Absolute&#39;,\n&#39;YTD Participation Absolute&#39; as &#39;YTD Participation Absolute&#39;,\n&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Participation Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Participation Growth&#39;,\n&#39;YTD Participation Growth&#39; as &#39;YTD Participation Growth&#39;,\n\n&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} TAM Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} TAM Absolute&#39;,&#39;YTD TAM Absolute&#39; as &#39;YTD TAM Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} TAM Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} TAM Growth&#39;,&#39;YTD TAM Growth&#39; as &#39;YTD TAM Growth&#39;;\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------NONE for Fake HEADER--------------------------------------------------------------------------------------------------------------\n\nresult_none = group APM_None by &#39;all&#39;; result_none = foreach result_none generate 0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} ACV Absolute&#39;,  0 as  &#39;YTD ACV Absolute&#39;, 0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} ACV Growth&#39;,0 as &#39;YTD ACV Growth&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AOV Absolute&#39;, 0 as  &#39;YTD AOV Absolute&#39;, 0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} AOV Growth&#39;, 0 as &#39;YTD AOV Growth&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Attrition Absolute&#39;,0 as &#39;YTD Attrition Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Attrition TTM Rate&#39;, 0 as &#39;YTD Attrition TTM Rate&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} PipeGen Absolute&#39;,0 as &#39;YTD PipeGen Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} PipeGen Growth&#39;,0 as &#39;YTD PipeGen Growth&#39;, 0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AEs&#39;,0 as &#39;YTD AE Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE CAGR&#39;,0 as &#39;YTD AE CAGR&#39; ,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime&#39;,0 as &#39;YTD Co_Prime Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime CAGR&#39;,0 as &#39;YTD Co_Prime CAGR&#39;, 0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SEs&#39;,0 as &#39;YTD SE Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE CAGR&#39;,0 as &#39;YTD SE CAGR&#39; ,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE&#39;,0 as &#39;YTD SWE Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SWE Growth&#39;,0 as &#39;YTD SWE Growth&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA&#39;,0 as &#39;YTD INFRA Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} INFRA Growth&#39;,0 as &#39;YTD INFRA Growth&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} CTS Absolute&#39;,0 as &#39;YTD CTS Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} CTS Growth&#39;,0 as &#39;YTD CTS Growth&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Availability Absolute&#39;,0 as &#39;YTD Availability Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Availability Growth&#39;,0 as &#39;YTD Availability Growth&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Transactions Absolute&#39;,0 as &#39;YTD Transactions Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Transactions Growth&#39;,0 as &#39;YTD Transactions Growth&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Customer Absolute&#39;,0 as &#39;YTD Customer Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Customer Growth&#39;,0 as &#39;YTD Customer Growth&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} TAM Absolute&#39;,0 as &#39;YTD TAM Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} TAM Growth&#39;,0 as &#39;YTD TAM Growth&#39;,\n\n0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Participation Absolute&#39;,\n0 as &#39;YTD Participation Absolute&#39;,\n0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Participation Growth&#39;,\n0 as &#39;YTD Participation Growth&#39;,\n\n0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Red_Accounts Absolute&#39;,\n0 as &#39;YTD Red_Accounts Absolute&#39;,\n0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Red_Accounts Growth&#39;,\n0 as &#39;YTD Red_Accounts Growth&#39;; \n\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------UNION--------------------------------------------------------------------------------------------------------------\nresult_union = union result_none, result_Total;\nresult_union = group result_union by &#39;all&#39;;  \nfinal_result = foreach result_union generate &quot;TOTAL                        &quot; as &#39;Cloud&#39;, \nsum(&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AEs&#39;) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AEs&#39;,\nsum(&#39;YTD AE Absolute&#39;) as &#39;YTD AE Absolute&#39;,\nsum(&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE CAGR&#39;) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE CAGR&#39;,\nsum(&#39;YTD AE CAGR&#39;) as &#39;YTD AE CAGR&#39; ,\n\nsum(&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime&#39;) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime&#39;,\nsum(&#39;YTD Co_Prime Absolute&#39;) as &#39;YTD Co_Prime Absolute&#39;,\nsum(&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime CAGR&#39;) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime CAGR&#39;,\nsum(&#39;YTD Co_Prime CAGR&#39;) as &#39;YTD Co_Prime CAGR&#39;,\n\nsum(&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SEs&#39;) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SEs&#39;,\nsum(&#39;YTD SE Absolute&#39;) as &#39;YTD SE Absolute&#39;,\nsum(&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE CAGR&#39;) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE CAGR&#39;,\nsum(&#39;YTD SE CAGR&#39;) as &#39;YTD SE CAGR&#39;,\n\n0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Participation Absolute&#39;,\n0 as &#39;YTD Participation Absolute&#39;,\n0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Participation Growth&#39;,\n0 as &#39;YTD Participation Growth&#39; ;",
        "receiveFacet": true,
        "selectMode": "none",
        "strings": [],
        "type": "saql",
        "useGlobal": true,
        "visualizationParameters": {
          "visualizationType": "hbar"
        }
      },
      "Table_Page_1_Header": {
        "broadcastFacet": true,
        "groups": [],
        "label": "Table_Page_1_Header",
        "numbers": [],
        "query": "MasterHierarchy = load &quot;Master_Hierarchy&quot;;\nMasterHierarchy = filter MasterHierarchy by &#39;Level_1&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nACV = load &quot;APM_ACV&quot;;\nACV = filter ACV by &#39;Segment&#39; != &quot;CSG&quot;;\nACV = filter ACV by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nACV = filter ACV by {{column(Filter_Lead_1.selection,[&quot;Lead_1&quot;]).asEquality(&#39;Lead_1&#39;)}};\nACV = filter ACV by {{column(Filter_Segment.selection,[&quot;Segment&quot;]).asEquality(&#39;Segment&#39;)}};\nACV = filter ACV by {{column(Filter_Industry.selection,[&quot;Industry&quot;]).asEquality(&#39;Industry&#39;)}};\nACV = filter ACV by {{column(Filter_Lead.selection,[&quot;Lead&quot;]).asEquality(&#39;Lead&#39;)}};\nACV = filter ACV by {{column(Filter_Cloud.selection,[&quot;Cloud&quot;]).asEquality(&#39;Cloud&#39;)}};\nACV = filter ACV by &#39;Cloud&#39; in {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};;\nACV = group ACV by (&#39;Cloud&#39;,&#39;Subcloud&#39;, &#39;Quarter&#39;,&#39;Month&#39;, &#39;Fiscal_Year&#39;, &#39;Region&#39; , &#39;Country&#39;);\nACV = foreach ACV generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39; ,&#39;Month&#39; as &#39;Month&#39;,sum(&#39;ACV&#39;) as &#39;ACV&#39;, &#39;Region&#39; as &#39;Region&#39;,  {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; ACV = filter ACV by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}} ;\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD NONE For Fake Header line----------------------------------------------------------------------------------------------------------------------------------------------------------\n\nAPM_None = load &quot;APM_ACV&quot;;\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------FILTER ACV----------------------------------------------------------------------------------------------------------------------------------------------------------\n\nq2_CYACV = filter ACV by &#39;Month&#39; in   {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}}  &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYACV = filter ACV by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}}  &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYACV = filter ACV by &#39;Month&#39; in   {{cell(Selector_Quarter.selection,0,&quot;YTD_Month&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYACV = filter ACV by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;YTD_Month&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nn\nAOV = load &quot;APM_AOV&quot;;\nAOV = filter AOV by &#39;Segment&#39; != &quot;CSG&quot;;\nAOV = filter AOV by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\n--AOV = filter AOV by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nAOV = foreach AOV generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;AOV&#39;) as &#39;AOV&#39;,&#39;Region&#39; as &#39;Region&#39;,   {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39;; AOV = filter AOV by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------FILTER AOV ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nq2_CYAOV = filter AOV by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYAOV = filter AOV by &#39;Month&#39; in   {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYAOV = filter AOV by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;YTD_Month_cum&quot;).asString()}}&amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYAOV = filter AOV by &#39;Month&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Month_cum&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------/////////////////////////////-----------LOAD ATTRITION ----------------/////////////////////////////////////////\n\nAttrition = load &quot;APM_Attrition&quot;; Attrition = filter Attrition by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}} ;\nAttrition = filter Attrition by &#39;Segment&#39; != &quot;CSG&quot;;\nAttrition = filter Attrition by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\n--Attrition = filter Attrition by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nAttrition = foreach Attrition generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Attrition&#39;)*-1 as &#39;Attrition_Product&#39;, sum(&#39;TTM&#39;)*-1 as &#39;TTM_Product&#39;,sum(&#39;AOV_twelve_month_ago&#39;) as &#39;AOV_twelve_month_ago&#39;,&#39;Region&#39; as &#39;Region&#39;,  {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39;;\n----------------------------------------------------------------------------------------------FILTER ATTRITION -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nq2_CYATT = filter Attrition by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYATT = filter Attrition by &#39;Month&#39; in   {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYATT = filter Attrition by &#39;Month&#39; in   {{cell(Selector_Quarter.selection,0,&quot;YTD_Month&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYATT = filter Attrition by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;YTD_Month&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq4_CYATT = filter Attrition by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;YTD_Month_cum_attrit&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\n------------------------------------------------------------------------------------------------------------------------------------------------LOAD PIPEGEN--------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nPipegen = load &quot;APM_Pipegen1&quot;;\nPipegen = filter Pipegen by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};Pipegen = filter Pipegen by &#39;Segment&#39; != &quot;CSG&quot;;\nPipegen = filter Pipegen by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nPipegen = group Pipegen by (&#39;Fiscal_Year&#39;,&#39;Quarter&#39;, &#39;Region&#39;, &#39;Cloud&#39;, &#39;Month&#39;,&#39;Subcloud&#39;, &#39;Cloud_2&#39;,&#39;Country&#39;);\nPipegen = foreach Pipegen generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Pipegen&#39;) as &#39;Pipegen&#39;,&#39;Region&#39; as &#39;Region&#39;,  {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39;; Pipegen = filter Pipegen by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}} ;;\n\nq2_CYPipegen = filter Pipegen by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYPipegen = filter Pipegen by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYPipegen = filter Pipegen by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_pipegen&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYPipegen = filter Pipegen by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_pipegen&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD /FILTER HC---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nHC = load &quot;APM_HC&quot;;\nHC = filter HC by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nHC = foreach HC generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;SE&#39;) as &#39;SE&#39;,sum(&#39;AE&#39;) as &#39;AE&#39;,sum(&#39;Co_Prime&#39;) as &#39;Co_Prime&#39;,&#39;Region&#39; as &#39;Region&#39;,  {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; HC = filter HC by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\n--HC = filter HC by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYHC = filter HC by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYHC = filter HC by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_HC = filter HC by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYHC = filter HC by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_HC&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYHC = filter HC by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_HC&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_HC = filter HC by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_HC&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD SWE INFRA------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nSW = load &quot;APM_SWE_INFRA&quot;;\nSW = filter SW by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nSW = foreach SW generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;SWE&#39;) as &#39;SWE&#39;,sum(&#39;INFRA&#39;) as &#39;INFRA&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39;; SW = filter SW by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};;\nSW = filter SW by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYSW = filter SW by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYSW = filter SW by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_SW = filter SW by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYSW = filter SW by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_SW&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYSW = filter SW by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_SW&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_SW = filter SW by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_SW&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD T_P------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nT_P = load &quot;APM_T_P&quot;;\nT_P = filter T_P by &#39;Cloud&#39; != &quot;TOTALS/SUMMARY&quot;;\nT_P = filter T_P by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nT_P = foreach T_P generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;CTS&#39;) as &#39;CTS&#39;,&#39;Region&#39; as &#39;Region&#39;,  {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39;; T_P = filter T_P by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};;\nT_P = filter T_P by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYT_P = filter T_P by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYT_P = filter T_P by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_T_P = filter T_P by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYT_P = filter T_P by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYT_P = filter T_P by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_T_P = filter T_P by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD TRANSACTION------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nTRANSACTION = load &quot;APM_T_P_Transactions&quot;;TRANSACTION = filter TRANSACTION by &#39;Cloud&#39; != &quot;TOTALS/SUMMARY&quot;;\nTRANSACTION = filter TRANSACTION by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nTRANSACTION = foreach TRANSACTION generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Transactions&#39;) as &#39;Transactions&#39;,&#39;Region&#39; as &#39;Region&#39;,  {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39;; TRANSACTION = filter TRANSACTION by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};;\nTRANSACTION = filter TRANSACTION by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYTRANSACTION = filter TRANSACTION by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYTRANSACTION = filter TRANSACTION by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_TRANSACTION = filter TRANSACTION by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYTRANSACTION = filter TRANSACTION by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYTRANSACTION = filter TRANSACTION by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_TRANSACTION = filter TRANSACTION by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD AVAILABILITY------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nAVAILABILITY = load &quot;APM_TECH_AVAILABILITY&quot;;AVAILABILITY = filter AVAILABILITY by &#39;Cloud&#39; != &quot;TOTALS/SUMMARY&quot;;\nAVAILABILITY = filter AVAILABILITY by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nAVAILABILITY = foreach AVAILABILITY generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Availability&#39;) as &#39;Availability&#39;,&#39;Region&#39; as &#39;Region&#39;,  {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39;; AVAILABILITY = filter AVAILABILITY by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};;\nAVAILABILITY = filter AVAILABILITY by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYAVAILABILITY = filter AVAILABILITY by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYAVAILABILITY = filter AVAILABILITY by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_AVAILABILITY = filter AVAILABILITY by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYAVAILABILITY = filter AVAILABILITY by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYAVAILABILITY = filter AVAILABILITY by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_AVAILABILITY = filter AVAILABILITY by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD REDACCOUNTS------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nREDACCOUNTS = load &quot;APM_REDACCOUNTS&quot;;REDACCOUNTS = filter REDACCOUNTS by &#39;Cloud&#39; != &quot;TOTALS/SUMMARY&quot;;\nREDACCOUNTS = filter REDACCOUNTS by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nREDACCOUNTS = foreach REDACCOUNTS generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Red_Accounts&#39;) as &#39;Red_Accounts&#39;,&#39;Region&#39; as &#39;Region&#39;,  {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39;; REDACCOUNTS = filter REDACCOUNTS by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};;\nREDACCOUNTS = filter REDACCOUNTS by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYREDACCOUNTS = filter REDACCOUNTS by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYREDACCOUNTS = filter REDACCOUNTS by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_REDACCOUNTS = filter REDACCOUNTS by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYREDACCOUNTS = filter REDACCOUNTS by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYREDACCOUNTS = filter REDACCOUNTS by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_REDACCOUNTS = filter REDACCOUNTS by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD MARKET SHARE------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nSHARE = load &quot;APM_MARKET_SHARE&quot;;SHARE = filter SHARE by &#39;Cloud&#39; != &quot;TOTALS/SUMMARY&quot;;\nSHARE = filter SHARE by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nSHARE = foreach SHARE generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;TAM&#39;) as &#39;TAM&#39;,&#39;Region&#39; as &#39;Region&#39;,   {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; SHARE = filter SHARE by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};;\nSHARE = filter SHARE by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYSHARE = filter SHARE by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYSHARE = filter SHARE by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_SHARE = filter SHARE by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYSHARE = filter SHARE by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYSHARE = filter SHARE by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_SHARE = filter SHARE by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD CUSTOMER------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nCUSTOMER = load &quot;APM_MARKET_CUSTOMER&quot;;CUSTOMER = filter CUSTOMER by &#39;Cloud&#39; != &quot;TOTALS/SUMMARY&quot;;\nCUSTOMER = filter CUSTOMER by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nCUSTOMER = foreach CUSTOMER generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Customer&#39;) as &#39;Customer&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; CUSTOMER = filter CUSTOMER by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};;\nCUSTOMER = filter CUSTOMER by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYCUSTOMER = filter CUSTOMER by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYCUSTOMER = filter CUSTOMER by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_CUSTOMER = filter CUSTOMER by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYCUSTOMER = filter CUSTOMER by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYCUSTOMER = filter CUSTOMER by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_CUSTOMER = filter CUSTOMER by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------Grouping------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nresult_Total = group q2_CYACV by all full, q2_PYACV by all full, q3_CYACV by all full, q3_PYACV by all full, q2_CYAOV by all full, q2_PYAOV by all full, q3_CYAOV by all full, q3_PYAOV by all full, q2_CYATT by all full, q2_PYATT by all full, q3_CYATT by all full, q3_PYATT by all full,q4_CYATT by all full,  q2_CYPipegen by all full, q2_PYPipegen by all full, q3_CYPipegen by all full, q3_PYPipegen by all full,q2_CYHC by all full, q2_PYHC by all full,q2_PY_2_HC by all full, q3_CYHC by all full, q3_PYHC by all full,q3_PY_2_HC by all full, q2_CYSW by all full, q2_PYSW by all full,q2_PY_2_SW by all full, q3_CYSW by all full, q3_PYSW by all full,q3_PY_2_SW by all full, q2_CYT_P by all full, q2_PYT_P by all full, q3_CYT_P by all full, q3_PYT_P by all full, q2_CYTRANSACTION by all full, q2_PYTRANSACTION by all full, q3_CYTRANSACTION by all full, q3_PYTRANSACTION by all full, q2_CYAVAILABILITY by all full, q2_PYAVAILABILITY by all full, q3_CYAVAILABILITY by all full, q3_PYAVAILABILITY by all full, q2_CYREDACCOUNTS by all full, q2_PYREDACCOUNTS by all full, q3_CYREDACCOUNTS by all full, q3_PYREDACCOUNTS by all full, q2_CYSHARE by all full, q2_PYSHARE by all full, q3_CYSHARE by all full, q3_PYSHARE by all full, q2_CYCUSTOMER by all full, q2_PYCUSTOMER by all full, q3_CYCUSTOMER by all full, q3_PYCUSTOMER by all;\nn\nresult_Total = foreach result_Total generate &quot;TOTAL&quot; as &#39;Cloud&#39;, coalesce(sum(q2_CYACV.&#39;ACV&#39;),0) as &#39;A&#39;, coalesce(sum(q2_PYACV.&#39;ACV&#39;),0) as &#39;B&#39;, coalesce(sum(q3_CYACV.&#39;ACV&#39;),0) as &#39;C&#39;, coalesce(sum(q3_PYACV.&#39;ACV&#39;),0) as &#39;D&#39;,coalesce(sum(q2_CYAOV.&#39;AOV&#39;),0) as &#39;E&#39;, coalesce(sum(q2_PYAOV.&#39;AOV&#39;),0) as &#39;F&#39;, coalesce(sum(q3_CYAOV.&#39;AOV&#39;),0) as &#39;G&#39;, coalesce(sum(q3_PYAOV.&#39;AOV&#39;),0) as &#39;H&#39;,coalesce(sum(q2_CYATT.&#39;Attrition_Product&#39;),0) as &#39;Attrition_CY_Q2&#39;,coalesce(sum(q3_CYATT.&#39;Attrition_Product&#39;),0) as &#39;Attrition_CY_Q3&#39;,coalesce(round(sum(q2_CYATT.&#39;TTM_Product&#39;), 0), 0) as &#39;TTM_Product_CY_Q2&#39; ,coalesce(round(sum(q2_CYATT.&#39;AOV_twelve_month_ago&#39;), 0), 0) as &#39;AOV_twelve_month_ago_CY_Q2&#39;,coalesce(round(sum(q4_CYATT.&#39;TTM_Product&#39;), 0), 0) as &#39;TTM_Product_CY_Q3&#39; ,coalesce(round(sum(q4_CYATT.&#39;AOV_twelve_month_ago&#39;), 0), 0) as &#39;AOV_twelve_month_ago_CY_Q3&#39;, coalesce(sum(q2_CYPipegen.&#39;Pipegen&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Pipegen Absolute&#39;, coalesce(sum(q3_CYPipegen.&#39;Pipegen&#39;), 0) as &#39;YTD Pipegen Absolute&#39;, ((coalesce(sum(q2_CYPipegen.&#39;Pipegen&#39;), 0) - coalesce(sum(q2_PYPipegen.&#39;Pipegen&#39;), 0)) / coalesce(sum(q2_PYPipegen.&#39;Pipegen&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Pipegen Growth&#39;, ((coalesce(sum(q3_CYPipegen.&#39;Pipegen&#39;), 0) - coalesce(sum(q3_PYPipegen.&#39;Pipegen&#39;), 0)) / coalesce(sum(q3_PYPipegen.&#39;Pipegen&#39;), 0)) * 100 as &#39;YTD Pipegen Growth&#39;,coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE Absolute&#39;, coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) as &#39;YTD SE Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) - coalesce(sum(q2_PYHC.&#39;SE&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;SE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SE Growth&#39;,(power(coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;SE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;SE&#39;), 0),(1/2))-1)*100 as &#39;YTD SE CAGR&#39;, ((coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) - coalesce(sum(q3_PYHC.&#39;SE&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;SE&#39;), 0)) * 100 as &#39;YTD SE Growth&#39;, coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE Absolute&#39;, coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) as &#39;YTD AE Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) - coalesce(sum(q2_PYHC.&#39;AE&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;AE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} AE Growth&#39;, ((coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) - coalesce(sum(q3_PYHC.&#39;AE&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;AE&#39;), 0)) * 100 as &#39;YTD AE Growth&#39;,(power(coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;AE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;AE&#39;), 0),(1/2))-1)*100 as &#39;YTD AE CAGR&#39;, coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime Absolute&#39;, coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) as &#39;YTD Co_Prime Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) - coalesce(sum(q2_PYHC.&#39;Co_Prime&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;Co_Prime&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Co_Prime Growth&#39;, ((coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) - coalesce(sum(q3_PYHC.&#39;Co_Prime&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;Co_Prime&#39;), 0)) * 100 as &#39;YTD Co_Prime Growth&#39;,(power(coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;Co_Prime&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;Co_Prime&#39;), 0),(1/2))-1)*100 as &#39;YTD Co_Prime CAGR&#39;, coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE Absolute&#39;, coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) as &#39;YTD SWE Absolute&#39;, ((coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) - coalesce(sum(q2_PYSW.&#39;SWE&#39;), 0)) / coalesce(sum(q2_PYSW.&#39;SWE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SWE Growth&#39;, ((coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) - coalesce(sum(q3_PYSW.&#39;SWE&#39;), 0)) / coalesce(sum(q3_PYSW.&#39;SWE&#39;), 0)) * 100 as &#39;YTD SWE Growth&#39;,(power(coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) / coalesce(sum(q2_PY_2_SW.&#39;SWE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE CAGR&#39;,(power(coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) / coalesce(sum(q3_PY_2_SW.&#39;SWE&#39;), 0),(1/2))-1)*100 as &#39;YTD SWE CAGR&#39;, coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA Absolute&#39;, coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) as &#39;YTD INFRA Absolute&#39;, ((coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) - coalesce(sum(q2_PYSW.&#39;INFRA&#39;), 0)) / coalesce(sum(q2_PYSW.&#39;INFRA&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} INFRA Growth&#39;, ((coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) - coalesce(sum(q3_PYSW.&#39;INFRA&#39;), 0)) / coalesce(sum(q3_PYSW.&#39;INFRA&#39;), 0)) * 100 as &#39;YTD INFRA Growth&#39;,(power(coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) / coalesce(sum(q2_PY_2_SW.&#39;INFRA&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA CAGR&#39;,(power(coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) / coalesce(sum(q3_PY_2_SW.&#39;INFRA&#39;), 0),(1/2))-1)*100 as &#39;YTD INFRA CAGR&#39;, coalesce(sum(q2_CYT_P.&#39;CTS&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} CTS Absolute&#39;, coalesce(sum(q3_CYT_P.&#39;CTS&#39;), 0) as &#39;YTD CTS Absolute&#39;, ((coalesce(sum(q2_CYT_P.&#39;CTS&#39;), 0) - coalesce(sum(q2_PYT_P.&#39;CTS&#39;), 0)) / coalesce(sum(q2_PYT_P.&#39;CTS&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} CTS Growth&#39;, ((coalesce(sum(q3_CYT_P.&#39;CTS&#39;), 0) - coalesce(sum(q3_PYT_P.&#39;CTS&#39;), 0)) / coalesce(sum(q3_PYT_P.&#39;CTS&#39;), 0)) * 100 as &#39;YTD CTS Growth&#39;, coalesce(sum(q2_CYTRANSACTION.&#39;Transactions&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Transactions Absolute&#39;, coalesce(sum(q3_CYTRANSACTION.&#39;Transactions&#39;), 0) as &#39;YTD Transactions Absolute&#39;, ((coalesce(sum(q2_CYTRANSACTION.&#39;Transactions&#39;), 0) - coalesce(sum(q2_PYTRANSACTION.&#39;Transactions&#39;), 0)) / coalesce(sum(q2_PYTRANSACTION.&#39;Transactions&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Transactions Growth&#39;, ((coalesce(sum(q3_CYTRANSACTION.&#39;Transactions&#39;), 0) - coalesce(sum(q3_PYTRANSACTION.&#39;Transactions&#39;), 0)) / coalesce(sum(q3_PYTRANSACTION.&#39;Transactions&#39;), 0)) * 100 as &#39;YTD Transactions Growth&#39;, coalesce(sum(q2_CYAVAILABILITY.&#39;Availability&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Availability Absolute&#39;, coalesce(sum(q3_CYAVAILABILITY.&#39;Availability&#39;), 0) as &#39;YTD Availability Absolute&#39;, ((coalesce(sum(q2_CYAVAILABILITY.&#39;Availability&#39;), 0) - coalesce(sum(q2_PYAVAILABILITY.&#39;Availability&#39;), 0)) / coalesce(sum(q2_PYAVAILABILITY.&#39;Availability&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Availability Growth&#39;, ((coalesce(sum(q3_CYAVAILABILITY.&#39;Availability&#39;), 0) - coalesce(sum(q3_PYAVAILABILITY.&#39;Availability&#39;), 0)) / coalesce(sum(q3_PYAVAILABILITY.&#39;Availability&#39;), 0)) * 100 as &#39;YTD Availability Growth&#39;,  coalesce(sum(q2_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Red_Accounts Absolute&#39;, coalesce(sum(q3_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) as &#39;YTD Red_Accounts Absolute&#39;, ((coalesce(sum(q2_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) - coalesce(sum(q2_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) / coalesce(sum(q2_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Red_Accounts Growth&#39;, ((coalesce(sum(q3_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) - coalesce(sum(q3_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) / coalesce(sum(q3_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) * 100 as &#39;YTD Red_Accounts Growth&#39;, coalesce(sum(q2_CYSHARE.&#39;TAM&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} TAM Absolute&#39;, coalesce(sum(q3_CYSHARE.&#39;TAM&#39;), 0) as &#39;YTD TAM Absolute&#39;, ((coalesce(sum(q2_CYSHARE.&#39;TAM&#39;), 0) - coalesce(sum(q2_PYSHARE.&#39;TAM&#39;), 0)) / coalesce(sum(q2_PYSHARE.&#39;TAM&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} TAM Growth&#39;, ((coalesce(sum(q3_CYSHARE.&#39;TAM&#39;), 0) - coalesce(sum(q3_PYSHARE.&#39;TAM&#39;), 0)) / coalesce(sum(q3_PYSHARE.&#39;TAM&#39;), 0)) * 100 as &#39;YTD TAM Growth&#39;, coalesce(sum(q2_CYCUSTOMER.&#39;Customer&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Customer Absolute&#39;, coalesce(sum(q3_CYCUSTOMER.&#39;Customer&#39;), 0) as &#39;YTD Customer Absolute&#39;, ((coalesce(sum(q2_CYCUSTOMER.&#39;Customer&#39;), 0) - coalesce(sum(q2_PYCUSTOMER.&#39;Customer&#39;), 0)) / coalesce(sum(q2_PYCUSTOMER.&#39;Customer&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Customer Growth&#39;, ((coalesce(sum(q3_CYCUSTOMER.&#39;Customer&#39;), 0) - coalesce(sum(q3_PYCUSTOMER.&#39;Customer&#39;), 0)) / coalesce(sum(q3_PYCUSTOMER.&#39;Customer&#39;), 0)) * 100 as &#39;YTD Customer Growth&#39;;\nnresult_Total = foreach result_Total generate &#39;A&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} ACV Absolute&#39;,  &#39;C&#39; as  &#39;YTD ACV Absolute&#39;, ((A -B) / B) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} ACV Growth&#39;,((C - D) / D) * 100 as &#39;YTD ACV Growth&#39;,&#39;E&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AOV Absolute&#39;,  &#39;G&#39; as  &#39;YTD AOV Absolute&#39;, ((E -F) / F) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} AOV Growth&#39;,  ((G - H) / H) * 100  as &#39;YTD AOV Growth&#39;, coalesce(sum(&#39;Attrition_CY_Q2&#39;),0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Attrition Absolute&#39;, coalesce(sum(&#39;Attrition_CY_Q3&#39;),0) as &#39;YTD Attrition Absolute&#39;,(coalesce(round(sum(&#39;TTM_Product_CY_Q2&#39;), 0), 0) / coalesce(round(sum(AOV_twelve_month_ago_CY_Q2), 0), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Attrition TTM Rate&#39;, (coalesce(round(sum(&#39;TTM_Product_CY_Q3&#39;), 0), 0) / coalesce(round(sum(AOV_twelve_month_ago_CY_Q3), 0), 0)) * 100 as &#39;YTD Attrition TTM Rate&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Pipegen Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} PipeGen Absolute&#39;,&#39;YTD Pipegen Absolute&#39; as &#39;YTD PipeGen Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Pipegen Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} PipeGen Growth&#39;,&#39;YTD Pipegen Growth&#39; as &#39;YTD PipeGen Growth&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AEs&#39;,&#39;YTD AE Absolute&#39; as &#39;YTD AE Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE CAGR&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE CAGR&#39;,&#39;YTD AE CAGR&#39; as &#39;YTD AE CAGR&#39; ,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime&#39;,&#39;YTD Co_Prime Absolute&#39; as &#39;YTD Co_Prime Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime CAGR&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime CAGR&#39;,&#39;YTD Co_Prime CAGR&#39; as &#39;YTD Co_Prime CAGR&#39;, &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SEs&#39;,&#39;YTD SE Absolute&#39; as &#39;YTD SE Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE CAGR&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE CAGR&#39;,&#39;YTD SE CAGR&#39; as &#39;YTD SE CAGR&#39; ,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE&#39;,&#39;YTD SWE Absolute&#39; as &#39;YTD SWE Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SWE Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SWE Growth&#39;,&#39;YTD SWE Growth&#39; as &#39;YTD SWE Growth&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA&#39;,&#39;YTD INFRA Absolute&#39; as &#39;YTD INFRA Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} INFRA Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} INFRA Growth&#39;,&#39;YTD INFRA Growth&#39; as &#39;YTD INFRA Growth&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} CTS Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} CTS Absolute&#39;,&#39;YTD CTS Absolute&#39; as &#39;YTD CTS Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} CTS Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} CTS Growth&#39;,&#39;YTD CTS Growth&#39; as &#39;YTD CTS Growth&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Availability Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Availability Absolute&#39;,&#39;YTD Availability Absolute&#39; as &#39;YTD Availability Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Availability Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Availability Growth&#39;,&#39;YTD Availability Growth&#39; as &#39;YTD Availability Growth&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Transactions Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Transactions Absolute&#39;,&#39;YTD Transactions Absolute&#39; as &#39;YTD Transactions Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Transactions Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Transactions Growth&#39;,&#39;YTD Transactions Growth&#39; as &#39;YTD Transactions Growth&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Customer Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Customer Absolute&#39;,&#39;YTD Customer Absolute&#39; as &#39;YTD Customer Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Customer Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Customer Growth&#39;,&#39;YTD Customer Growth&#39; as &#39;YTD Customer Growth&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} TAM Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} TAM Absolute&#39;,&#39;YTD TAM Absolute&#39; as &#39;YTD TAM Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} TAM Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} TAM Growth&#39;,&#39;YTD TAM Growth&#39; as &#39;YTD TAM Growth&#39;;\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------NONE for Fake HEADER--------------------------------------------------------------------------------------------------------------\n;result_none = group APM_None by &#39;all&#39;; result_none = foreach result_none generate 0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} ACV Absolute&#39;,  0 as  &#39;YTD ACV Absolute&#39;, 0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} ACV Growth&#39;,0 as &#39;YTD ACV Growth&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AOV Absolute&#39;, 0 as  &#39;YTD AOV Absolute&#39;, 0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} AOV Growth&#39;, 0 as &#39;YTD AOV Growth&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Attrition Absolute&#39;,0 as &#39;YTD Attrition Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Attrition TTM Rate&#39;, 0 as &#39;YTD Attrition TTM Rate&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} PipeGen Absolute&#39;,0 as &#39;YTD PipeGen Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} PipeGen Growth&#39;,0 as &#39;YTD PipeGen Growth&#39;, 0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AEs&#39;,0 as &#39;YTD AE Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE CAGR&#39;,0 as &#39;YTD AE CAGR&#39; ,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime&#39;,0 as &#39;YTD Co_Prime Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime CAGR&#39;,0 as &#39;YTD Co_Prime CAGR&#39;, 0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SEs&#39;,0 as &#39;YTD SE Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE CAGR&#39;,0 as &#39;YTD SE CAGR&#39; ,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE&#39;,0 as &#39;YTD SWE Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SWE Growth&#39;,0 as &#39;YTD SWE Growth&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA&#39;,0 as &#39;YTD INFRA Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} INFRA Growth&#39;,0 as &#39;YTD INFRA Growth&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} CTS Absolute&#39;,0 as &#39;YTD CTS Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} CTS Growth&#39;,0 as &#39;YTD CTS Growth&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Availability Absolute&#39;,0 as &#39;YTD Availability Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Availability Growth&#39;,0 as &#39;YTD Availability Growth&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Transactions Absolute&#39;,0 as &#39;YTD Transactions Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Transactions Growth&#39;,0 as &#39;YTD Transactions Growth&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Customer Absolute&#39;,0 as &#39;YTD Customer Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Customer Growth&#39;,0 as &#39;YTD Customer Growth&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} TAM Absolute&#39;,0 as &#39;YTD TAM Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} TAM Growth&#39;,0 as &#39;YTD TAM Growth&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Red_Accounts Absolute&#39;,0 as &#39;YTD Red_Accounts Absolute&#39;,0 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Red_Accounts Growth&#39;,0 as &#39;YTD Red_Accounts Growth&#39;; \n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------UNION--------------------------------------------------------------------------------------------------------------\n;result_union = union result_none, result_Total;result_union = group result_union by &#39;all&#39;;  final_result = foreach result_union generate &quot;TOTAL                        &quot; as &#39;Cloud&#39;, sum(&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} ACV Absolute&#39;) as  &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} ACV Absolute&#39;, sum(&#39;YTD ACV Absolute&#39;) as&#39;YTD ACV Absolute&#39; , sum(&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} ACV Growth&#39;) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} ACV Growth&#39;, sum(&#39;YTD ACV Growth&#39;) as  &#39;YTD ACV Growth&#39;,sum (&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AOV Absolute&#39;) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AOV Absolute&#39;, sum( &#39;YTD AOV Absolute&#39;) as  &#39;YTD AOV Absolute&#39;, sum( &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} AOV Growth&#39;) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} AOV Growth&#39;, sum(&#39;YTD AOV Growth&#39;) as &#39;YTD AOV Growth&#39;, sum(&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Attrition Absolute&#39;) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Attrition Absolute&#39;, sum(&#39;YTD Attrition Absolute&#39;) as &#39;YTD Attrition Absolute&#39;, sum(&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Attrition TTM Rate&#39;) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Attrition TTM Rate&#39;, sum(&#39;YTD Attrition TTM Rate&#39;) as  &#39;YTD Attrition TTM Rate&#39;, sum(&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} PipeGen Absolute&#39;) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} PipeGen Absolute&#39;, sum(&#39;YTD PipeGen Absolute&#39;) as &#39;YTD PipeGen Absolute&#39;, sum(&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} PipeGen Growth&#39;) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} PipeGen Growth&#39;, sum(&#39;YTD PipeGen Growth&#39;) as  &#39;YTD PipeGen Growth&#39; ; ",
        "receiveFacet": true,
        "selectMode": "none",
        "strings": [],
        "type": "saql",
        "useGlobal": true,
        "visualizationParameters": {
          "visualizationType": "hbar"
        }
      },
      "Filter_Lead_1": {
        "broadcastFacet": true,
        "datasets": [
          {
            "id": "0Fbf2000000HtY7CAK",
            "label": "APM_ACV1",
            "name": "APM_ACV",
            "url": "/services/data/v42.0/wave/datasets/0Fbf2000000HtY7CAK"
          }
        ],
        "isGlobal": false,
        "query": {
          "query": "{&quot;measures&quot;:[[&quot;count&quot;,&quot;*&quot;]],&quot;groups&quot;:[&quot;Lead_1&quot;]}",
          "version": -1
        },
        "receiveFacet": true,
        "selectMode": "multi",
        "type": "aggregateflex",
        "useGlobal": true,
        "visualizationParameters": {}
      },
      "Table_Page_2_Header_Top": {
        "broadcastFacet": true,
        "groups": [],
        "label": "Table_Page_2_Header_Top",
        "numbers": [],
        "query": "MasterHierarchy = load &quot;Master_Hierarchy&quot;;\nresult_Total = group MasterHierarchy by all;\nresult_Total = foreach result_Total generate &quot;                                &quot; as &#39; &#39;, &quot;    AE    &quot; as &#39;AE&#39;, &quot;    Co Prime    &quot; as &#39;Co Prime&#39;, &quot;    SE    &quot; as &#39;SE&#39;, &quot;AE                                        &quot; as &#39;AE Participation&#39;",
        "receiveFacet": true,
        "selectMode": "none",
        "strings": [],
        "type": "saql",
        "useGlobal": true,
        "visualizationParameters": {
          "parameters": {
            "autoFitMode": "none",
            "showValues": true,
            "bins": {
              "breakpoints": {
                "high": 100,
                "low": 0
              },
              "bands": {
                "high": {
                  "color": "#008000",
                  "label": ""
                },
                "low": {
                  "color": "#B22222",
                  "label": ""
                },
                "medium": {
                  "color": "#ffa500",
                  "label": ""
                }
              }
            },
            "legend": {
              "showHeader": true,
              "show": true,
              "customSize": "auto",
              "position": "right-top",
              "inside": false
            },
            "axisMode": "multi",
            "tooltip": {
              "showBinLabel": true,
              "measures": "",
              "showPercentage": true,
              "showDimensions": true,
              "showMeasures": true,
              "customizeTooltip": false,
              "dimensions": ""
            },
            "visualizationType": "hbar",
            "title": {
              "fontSize": 14,
              "subtitleFontSize": 11,
              "label": "",
              "align": "center",
              "subtitleLabel": ""
            },
            "binValues": false,
            "trellis": {
              "flipLabels": false,
              "showGridLines": true,
              "size": [
                100,
                100
              ],
              "enable": false,
              "type": "x",
              "chartsPerLine": 4
            },
            "measureAxis2": {
              "sqrtScale": false,
              "showTitle": true,
              "showAxis": true,
              "title": "",
              "customDomain": {
                "showDomain": false
              }
            },
            "measureAxis1": {
              "sqrtScale": false,
              "showTitle": true,
              "showAxis": true,
              "title": "",
              "customDomain": {
                "showDomain": false
              }
            },
            "theme": "wave",
            "dimensionAxis": {
              "showTitle": true,
              "customSize": "auto",
              "showAxis": true,
              "title": "",
              "icons": {
                "useIcons": false,
                "iconProps": {
                  "fit": "cover",
                  "column": "",
                  "type": "round"
                }
              }
            }
          },
          "type": "chart",
          "visualizationType": "hbar"
        }
      },
      "Table_Level_2_Measures_4": {
        "broadcastFacet": true,
        "groups": [],
        "label": "Table_Level_2_Measures_4",
        "numbers": [],
        "query": "MasterHierarchy = load &quot;Master_Hierarchy&quot;;\nMasterHierarchy = filter MasterHierarchy by &#39;Level_1&#39; in   {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nnACV = load &quot;APM_ACV&quot;;\nACV = filter ACV by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nACV = filter ACV by {{column(Filter_Lead_1.selection,[&quot;Lead_1&quot;]).asEquality(&#39;Lead_1&#39;)}};\nACV = filter ACV by {{column(Filter_Segment.selection,[&quot;Segment&quot;]).asEquality(&#39;Segment&#39;)}};\nACV = filter ACV by {{column(Filter_Industry.selection,[&quot;Industry&quot;]).asEquality(&#39;Industry&#39;)}};\nACV = filter ACV by {{column(Filter_Lead.selection,[&quot;Lead&quot;]).asEquality(&#39;Lead&#39;)}};\nACV = filter ACV by {{column(Filter_Cloud.selection,[&quot;Cloud&quot;]).asEquality(&#39;Cloud&#39;)}};\nACV = filter ACV by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nACV = group ACV by (&#39;Cloud&#39;,&#39;Cloud_2&#39;,&#39;Subcloud&#39;, &#39;Quarter&#39;,&#39;Month&#39;, &#39;Fiscal_Year&#39;, &#39;Region&#39; , &#39;Country&#39;);\nACV = foreach ACV generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39; ,&#39;Month&#39; as &#39;Month&#39;,sum(&#39;ACV&#39;) as &#39;ACV&#39;, &#39;Region&#39; as &#39;Region&#39;,  {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; ACV = filter ACV by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\nq2_CYACV = filter ACV by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}}  &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYACV = filter ACV by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}}  &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYACV = filter ACV by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;YTD_Month&quot;).asString()}}  &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYACV = filter ACV by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;YTD_Month&quot;).asString()}}  &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}} ;\nnAOV = load &quot;APM_AOV&quot;;\nAOV = filter AOV by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nAOV = filter AOV by &#39;Cloud&#39; in{{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nAOV = group AOV by (&#39;Cloud&#39;,&#39;Subcloud&#39;, &#39;Cloud_2&#39;, &#39;Quarter&#39;, &#39;Month&#39;, &#39;Fiscal_Year&#39;, &#39;Region&#39; , &#39;Country&#39;);\nAOV = foreach AOV generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;AOV&#39;) as &#39;AOV&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; AOV = filter AOV by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\nq2_CYAOV = filter AOV by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}}  &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYAOV = filter AOV by &#39;Month&#39; in   {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}}  &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYAOV = filter AOV by &#39;Month&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Month_cum&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYAOV = filter AOV by &#39;Month&#39; in{{cell(Selector_Quarter.selection,0,&quot;YTD_Month_cum&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD/FILTER ATTRITION--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nAttrition = load &quot;APM_Attrition&quot;;\nAttrition = filter Attrition by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nAttrition = filter Attrition by &#39;Segment&#39; != &quot;CSG&quot;;\nAttrition = filter Attrition by &#39;Cloud&#39; in   {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nAttrition = foreach Attrition generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;,&#39;Segment&#39; as &#39;Segment&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Attrition_Product&#39;)*-1 as &#39;Attrition_Product&#39;, sum(&#39;TTM_Product&#39;)*-1 as &#39;TTM_Product&#39;,sum(&#39;AOV_twelve_month_ago_Product&#39;) as &#39;AOV_twelve_month_ago&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39;; Attrition = filter Attrition by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}} ;\nq2_CYATT = filter Attrition by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}}  &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYATT = filter Attrition by &#39;Month&#39; in   {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}}  &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYATT = filter Attrition by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;YTD_Month&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYATT = filter Attrition by &#39;Month&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Month&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq4_CYATT = filter Attrition by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;YTD_Month_cum&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD /FILTER PIPEGEN-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nPipegen = load &quot;APM_Pipegen1&quot;;\nPipegen = filter Pipegen by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nPipegen = group Pipegen by (&#39;Fiscal_Year&#39;,&#39;Quarter&#39;, &#39;Region&#39;, &#39;Cloud&#39;, &#39;Month&#39;,&#39;Subcloud&#39;, &#39;Cloud_2&#39;,&#39;Country&#39;);\nPipegen = foreach Pipegen generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Pipegen&#39;) as &#39;Pipegen&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; Pipegen = filter Pipegen by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\nPipegen = filter Pipegen by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYPipegen = filter Pipegen by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYPipegen = filter Pipegen by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYPipegen = filter Pipegen by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_pipegen&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYPipegen = filter Pipegen by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_pipegen&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nnHC = load &quot;APM_HC&quot;;\nHC = filter HC by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nHC = foreach HC generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;SE&#39;) as &#39;SE&#39;,sum(&#39;AE&#39;) as &#39;AE&#39;,sum(&#39;Co_Prime&#39;) as &#39;Co_Prime&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; HC = filter HC by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\nHC = filter HC by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYHC = filter HC by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYHC = filter HC by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_HC = filter HC by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYHC = filter HC by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_HC&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYHC = filter HC by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_HC&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_HC = filter HC by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_HC&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD SWE INFRA------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nSW = load &quot;APM_SWE_INFRA&quot;;\nSW = filter SW by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nSW = foreach SW generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;SWE&#39;) as &#39;SWE&#39;,sum(&#39;INFRA&#39;) as &#39;INFRA&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; SW = filter SW by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};;\nSW = filter SW by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYSW = filter SW by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYSW = filter SW by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_SW = filter SW by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYSW = filter SW by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_SW&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYSW = filter SW by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_SW&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_SW = filter SW by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_SW&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD REDACCOUNTS------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nREDACCOUNTS = load &quot;APM_REDACCOUNTS&quot;;\nREDACCOUNTS = filter REDACCOUNTS by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nREDACCOUNTS = foreach REDACCOUNTS generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Red_Accounts&#39;) as &#39;Red_Accounts&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39;; REDACCOUNTS = filter REDACCOUNTS by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\nREDACCOUNTS = filter REDACCOUNTS by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYREDACCOUNTS = filter REDACCOUNTS by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYREDACCOUNTS = filter REDACCOUNTS by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_REDACCOUNTS = filter REDACCOUNTS by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYREDACCOUNTS = filter REDACCOUNTS by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYREDACCOUNTS = filter REDACCOUNTS by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_REDACCOUNTS = filter REDACCOUNTS by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD T_P T&amp;P Cost to Serve------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nT_P = load &quot;APM_T_P&quot;;\nT_P = filter T_P by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nT_P = foreach T_P generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;CTS&#39;) as &#39;CTS&#39;,&#39;Region&#39; as &#39;Region&#39;,{{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; T_P = filter T_P by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\nT_P = filter T_P by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYT_P = filter T_P by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYT_P = filter T_P by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_T_P = filter T_P by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYT_P = filter T_P by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYT_P = filter T_P by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_T_P = filter T_P by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD AVAILABILITY------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nAVAILABILITY = load &quot;APM_TECH_AVAILABILITY&quot;;\nAVAILABILITY = filter AVAILABILITY by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nAVAILABILITY = foreach AVAILABILITY generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Availability&#39;) as &#39;Availability&#39;,&#39;Region&#39; as &#39;Region&#39;,{{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; AVAILABILITY = filter AVAILABILITY by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\nAVAILABILITY = filter AVAILABILITY by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYAVAILABILITY = filter AVAILABILITY by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYAVAILABILITY = filter AVAILABILITY by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_AVAILABILITY = filter AVAILABILITY by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYAVAILABILITY = filter AVAILABILITY by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYAVAILABILITY = filter AVAILABILITY by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_AVAILABILITY = filter AVAILABILITY by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD TRANSACTIONS------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nTRANSACTIONS = load &quot;APM_T_P_Transactions&quot;;\nTRANSACTIONS = filter TRANSACTIONS by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nTRANSACTIONS = foreach TRANSACTIONS generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Transactions&#39;) as &#39;Transactions&#39;,&#39;Region&#39; as &#39;Region&#39;,{{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39;; TRANSACTIONS = filter TRANSACTIONS by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\nTRANSACTIONS = filter TRANSACTIONS by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYTRANSACTIONS = filter TRANSACTIONS by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYTRANSACTIONS = filter TRANSACTIONS by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_TRANSACTIONS = filter TRANSACTIONS by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYTRANSACTIONS = filter TRANSACTIONS by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYTRANSACTIONS = filter TRANSACTIONS by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_TRANSACTIONS = filter TRANSACTIONS by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD MARKET CUSTOMER------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nCUSTOMER = load &quot;APM_MARKET_CUSTOMER&quot;;\nCUSTOMER = filter CUSTOMER by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nCUSTOMER = foreach CUSTOMER generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Customer&#39;) as &#39;Customer&#39;,sum(&#39;Cloud_m1&#39;) as &#39;Customer1&#39;,sum(&#39;Cloud_m2&#39;) as &#39;Customer2&#39;,sum(&#39;Cloud_m3&#39;) as &#39;Customer3&#39;,&#39;Region&#39; as &#39;Region&#39;,{{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39;; CUSTOMER = filter CUSTOMER by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\nCUSTOMER = filter CUSTOMER by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYCUSTOMER = filter CUSTOMER by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYCUSTOMER = filter CUSTOMER by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_CUSTOMER = filter CUSTOMER by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYCUSTOMER = filter CUSTOMER by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_cum&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYCUSTOMER = filter CUSTOMER by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_cum&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_CUSTOMER = filter CUSTOMER by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_cum&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD MARKET SHARE------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nSHARE= load &quot;APM_MARKET_SHARE&quot;;\nSHARE= filter SHARE by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nSHARE= foreach SHARE generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;TAM&#39;) as &#39;TAM&#39;,sum(&#39;Cloud_m1&#39;) as &#39;TAM1&#39;,sum(&#39;Cloud_m2&#39;) as &#39;TAM2&#39; ,sum(&#39;Cloud_m3&#39;) as &#39;TAM3&#39;,sum(&#39;Original_TAM&#39;) as &#39;Original_TAM&#39;,sum(&#39;Cloud_merged&#39;) as &#39;Cloud_merged&#39;, &#39;Region&#39; as &#39;Region&#39;,{{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; SHARE= filter SHARE by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\nSHARE = filter SHARE by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYSHARE = filter SHARE by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYSHARE = filter SHARE by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_SHARE = filter SHARE by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYSHARE = filter SHARE by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_cum&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYSHARE = filter SHARE by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_cum&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_SHARE = filter SHARE by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_cum&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nnresult = group  q2_CYACV by &#39;Cloud&#39; full, q2_PYACV by &#39;Cloud&#39; full, q3_CYACV by &#39;Cloud&#39; full, q3_PYACV by &#39;Cloud&#39; full, q2_CYAOV by &#39;Cloud&#39; full, q2_PYAOV by &#39;Cloud&#39; full, q3_CYAOV by &#39;Cloud&#39; full, q3_PYAOV by &#39;Cloud&#39; full,  q2_CYATT by &#39;Cloud&#39; full, q2_PYATT by &#39;Cloud&#39; full, q3_CYATT by &#39;Cloud&#39; full, q3_PYATT by &#39;Cloud&#39; full,q4_CYATT by &#39;Cloud&#39; full, q2_CYPipegen by &#39;Cloud&#39; full, q2_PYPipegen by &#39;Cloud&#39; full, q3_CYPipegen by &#39;Cloud&#39; full, q3_PYPipegen by &#39;Cloud&#39;full,q2_CYHC by &#39;Cloud&#39; full, q2_PYHC by &#39;Cloud&#39; full,q2_PY_2_HC by &#39;Cloud&#39; full, q3_CYHC by &#39;Cloud&#39; full, q3_PYHC by &#39;Cloud&#39; full,q3_PY_2_HC by &#39;Cloud&#39; full, q2_CYSW by &#39;Cloud&#39; full, q2_PYSW by &#39;Cloud&#39; full,q2_PY_2_SW by &#39;Cloud&#39; full, q3_CYSW by &#39;Cloud&#39; full, q3_PYSW by &#39;Cloud&#39; full,q3_PY_2_SW by &#39;Cloud&#39;full, q2_CYREDACCOUNTS by &#39;Cloud&#39; full, q2_PYREDACCOUNTS by &#39;Cloud&#39; full,q2_PY_2_REDACCOUNTS by &#39;Cloud&#39; full, q3_CYREDACCOUNTS by &#39;Cloud&#39; full, q3_PYREDACCOUNTS by &#39;Cloud&#39; full,q3_PY_2_REDACCOUNTS by &#39;Cloud&#39; full, q2_CYT_P by &#39;Cloud&#39; full, q2_PYT_P by &#39;Cloud&#39; full,q2_PY_2_T_P by &#39;Cloud&#39; full, q3_CYT_P by &#39;Cloud&#39; full, q3_PYT_P by &#39;Cloud&#39; full,q3_PY_2_T_P by &#39;Cloud&#39; full, q2_CYAVAILABILITY by &#39;Cloud&#39; full, q2_PYAVAILABILITY by &#39;Cloud&#39; full,q2_PY_2_AVAILABILITY by &#39;Cloud&#39; full, q3_CYAVAILABILITY by &#39;Cloud&#39; full, q3_PYAVAILABILITY by &#39;Cloud&#39; full,q3_PY_2_AVAILABILITY by &#39;Cloud&#39; full, q2_CYTRANSACTIONS by &#39;Cloud&#39; full, q2_PYTRANSACTIONS by &#39;Cloud&#39; full,q2_PY_2_TRANSACTIONS by &#39;Cloud&#39; full, q3_CYTRANSACTIONS by &#39;Cloud&#39; full, q3_PYTRANSACTIONS by &#39;Cloud&#39; full,q3_PY_2_TRANSACTIONS by &#39;Cloud&#39;  full, q2_CYCUSTOMER by &#39;Cloud&#39; full, q2_PYCUSTOMER by &#39;Cloud&#39; full,q2_PY_2_CUSTOMER by &#39;Cloud&#39; full, q3_CYCUSTOMER by &#39;Cloud&#39; full, q3_PYCUSTOMER by &#39;Cloud&#39; full,q3_PY_2_CUSTOMER by &#39;Cloud&#39;full, q2_CYSHARE by &#39;Cloud&#39; full, q2_PYSHARE by &#39;Cloud&#39; full,q2_PY_2_SHARE by &#39;Cloud&#39; full, q3_CYSHARE by &#39;Cloud&#39; full, q3_PYSHARE by &#39;Cloud&#39; full,q3_PY_2_SHARE by &#39;Cloud&#39;,MasterHierarchy by &#39;Level_1&#39;;\nn;\nresult = foreach result generate  &quot;☁ &quot; + coalesce(MasterHierarchy.&#39;Level_1&#39;, q2_CYACV.&#39;Cloud&#39;, q2_PYACV.&#39;Cloud&#39;, q3_CYACV.&#39;Cloud&#39;, q3_PYACV.&#39;Cloud&#39;, q2_CYAOV.&#39;Cloud&#39;, q2_PYAOV.&#39;Cloud&#39;, q3_CYAOV.&#39;Cloud&#39;, q3_PYAOV.&#39;Cloud&#39;,q2_PYATT.&#39;Cloud&#39;,q2_CYATT.&#39;Cloud&#39;,q3_PYATT.&#39;Cloud&#39;,q3_CYATT.&#39;Cloud&#39;,q2_CYPipegen.&#39;Cloud&#39;, q2_PYPipegen.&#39;Cloud&#39;, q3_CYPipegen.&#39;Cloud&#39;, q3_PYPipegen.&#39;Cloud&#39;,q2_CYREDACCOUNTS.&#39;Cloud&#39;, q2_PYREDACCOUNTS.&#39;Cloud&#39;, q3_CYREDACCOUNTS.&#39;Cloud&#39;, q3_PYREDACCOUNTS.&#39;Cloud&#39;, q2_CYT_P.&#39;Cloud&#39;, q2_PYT_P.&#39;Cloud&#39;, q3_CYT_P.&#39;Cloud&#39;, q3_PYT_P.&#39;Cloud&#39;, q2_CYAVAILABILITY.&#39;Cloud&#39;, q2_PYAVAILABILITY.&#39;Cloud&#39;, q3_CYAVAILABILITY.&#39;Cloud&#39;, q3_PYAVAILABILITY.&#39;Cloud&#39;, q2_CYTRANSACTIONS.&#39;Cloud&#39;, q2_PYTRANSACTIONS.&#39;Cloud&#39;, q3_CYTRANSACTIONS.&#39;Cloud&#39;, q3_PYTRANSACTIONS.&#39;Cloud&#39;, q2_CYAVAILABILITY.&#39;Cloud&#39;, q2_PYAVAILABILITY.&#39;Cloud&#39;, q3_CYAVAILABILITY.&#39;Cloud&#39;, q3_PYAVAILABILITY.&#39;Cloud&#39;, q2_CYCUSTOMER.&#39;Cloud&#39;, q2_PYCUSTOMER.&#39;Cloud&#39;, q3_CYCUSTOMER.&#39;Cloud&#39;, q3_PYCUSTOMER.&#39;Cloud&#39;, q2_CYSHARE.&#39;Cloud&#39;, q2_PYSHARE.&#39;Cloud&#39;, q3_CYSHARE.&#39;Cloud&#39;, q3_PYSHARE.&#39;Cloud&#39;) as &#39;Cloud&#39;,  coalesce(sum(q2_CYACV.&#39;ACV&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} ACV Absolute&#39;, coalesce(sum(q3_CYACV.&#39;ACV&#39;), 0) as &#39;YTD ACV Absolute&#39;, ((coalesce(sum(q2_CYACV.&#39;ACV&#39;), 0) - coalesce(sum(q2_PYACV.&#39;ACV&#39;), 0)) / coalesce(sum(q2_PYACV.&#39;ACV&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} ACV Growth&#39;, ((coalesce(sum(q3_CYACV.&#39;ACV&#39;), 0) - coalesce(sum(q3_PYACV.&#39;ACV&#39;), 0)) / coalesce(sum(q3_PYACV.&#39;ACV&#39;), 0)) * 100 as &#39;YTD ACV Growth&#39;, coalesce(sum(q2_CYAOV.&#39;AOV&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AOV Absolute&#39;, coalesce(sum(q3_CYAOV.&#39;AOV&#39;), 0) as &#39;YTD AOV Absolute&#39;, ((coalesce(sum(q2_CYAOV.&#39;AOV&#39;), 0) - coalesce(sum(q2_PYAOV.&#39;AOV&#39;), 0)) / coalesce(sum(q2_PYAOV.&#39;AOV&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} AOV Growth&#39;, ((coalesce(sum(q3_CYAOV.&#39;AOV&#39;), 0) - coalesce(sum(q3_PYAOV.&#39;AOV&#39;), 0)) / coalesce(sum(q3_PYAOV.&#39;AOV&#39;), 0)) * 100 as &#39;YTD AOV Growth&#39;,last(MasterHierarchy.&#39;Level_1_Ranking&#39;) as &#39;Sort_Code&#39;, coalesce(sum(q2_CYATT.&#39;Attrition_Product&#39;),0) as &#39;Attrition_CY_Q2&#39;,coalesce(sum(q3_CYATT.&#39;Attrition_Product&#39;),0) as &#39;Attrition_CY_Q3&#39;,coalesce(round(sum(q2_CYATT.&#39;TTM_Product&#39;), 0), 0) as &#39;TTM_Product_CY_Q2&#39; ,coalesce(round(sum(q2_CYATT.&#39;AOV_twelve_month_ago&#39;), 0), 0) as &#39;AOV_twelve_month_ago_CY_Q2&#39;,coalesce(round(sum(q4_CYATT.&#39;TTM_Product&#39;), 0), 0) as &#39;TTM_Product_CY_Q3&#39; ,coalesce(round(sum(q4_CYATT.&#39;AOV_twelve_month_ago&#39;), 0), 0) as &#39;AOV_twelve_month_ago_CY_Q3&#39;,(coalesce(round(sum(q2_CYATT.&#39;TTM_Product&#39;), 0), 0) / coalesce(round(sum(q2_CYATT.&#39;AOV_twelve_month_ago&#39;), 0), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Attrition TTM Rate&#39;, (coalesce(round(sum(q4_CYATT.&#39;TTM_Product&#39;), 0), 0) / coalesce(round(sum(q4_CYATT.&#39;AOV_twelve_month_ago&#39;), 0), 0)) * 100 as &#39;YTD Attrition TTM Rate&#39;, coalesce(sum(q2_CYPipegen.&#39;Pipegen&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Pipegen Absolute&#39;, coalesce(sum(q3_CYPipegen.&#39;Pipegen&#39;), 0) as &#39;YTD Pipegen Absolute&#39;, ((coalesce(sum(q2_CYPipegen.&#39;Pipegen&#39;), 0) - coalesce(sum(q2_PYPipegen.&#39;Pipegen&#39;), 0)) / coalesce(sum(q2_PYPipegen.&#39;Pipegen&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Pipegen Growth&#39;, ((coalesce(sum(q3_CYPipegen.&#39;Pipegen&#39;), 0) - coalesce(sum(q3_PYPipegen.&#39;Pipegen&#39;), 0)) / coalesce(sum(q3_PYPipegen.&#39;Pipegen&#39;), 0)) * 100 as &#39;YTD Pipegen Growth&#39;, coalesce(sum(q2_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Red_Accounts Absolute&#39;, coalesce(sum(q3_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) as &#39;YTD Red_Accounts Absolute&#39;, ((coalesce(sum(q2_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) - coalesce(sum(q2_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) / coalesce(sum(q2_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Red_Accounts Growth&#39;, ((coalesce(sum(q3_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) - coalesce(sum(q3_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) / coalesce(sum(q3_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) * 100 as &#39;YTD Red_Accounts Growth&#39;, coalesce(sum(q2_CYT_P.&#39;CTS&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} CTS Absolute&#39;, coalesce(sum(q3_CYT_P.&#39;CTS&#39;), 0) as &#39;YTD CTS Absolute&#39;, ((coalesce(sum(q2_CYT_P.&#39;CTS&#39;), 0) - coalesce(sum(q2_PYT_P.&#39;CTS&#39;), 0)) / coalesce(sum(q2_PYT_P.&#39;CTS&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} CTS Growth&#39;, ((coalesce(sum(q3_CYT_P.&#39;CTS&#39;), 0) - coalesce(sum(q3_PYT_P.&#39;CTS&#39;), 0)) / coalesce(sum(q3_PYT_P.&#39;CTS&#39;), 0)) * 100 as &#39;YTD CTS Growth&#39;, coalesce(sum(q2_CYAVAILABILITY.&#39;Availability&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Availability Absolute&#39;, coalesce(sum(q3_CYAVAILABILITY.&#39;Availability&#39;), 0) as &#39;YTD Availability Absolute&#39;, ((coalesce(sum(q2_CYAVAILABILITY.&#39;Availability&#39;), 0) - coalesce(sum(q2_PYAVAILABILITY.&#39;Availability&#39;), 0)) / coalesce(sum(q2_PYAVAILABILITY.&#39;Availability&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Availability Growth&#39;, ((coalesce(sum(q3_CYAVAILABILITY.&#39;Availability&#39;), 0) - coalesce(sum(q3_PYAVAILABILITY.&#39;Availability&#39;), 0)) / coalesce(sum(q3_PYAVAILABILITY.&#39;Availability&#39;), 0)) * 100 as &#39;YTD Availability Growth&#39;, coalesce(sum(q2_CYTRANSACTIONS.&#39;Transactions&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Transactions Absolute&#39;, coalesce(sum(q3_CYTRANSACTIONS.&#39;Transactions&#39;), 0) as &#39;YTD Transactions Absolute&#39;, ((coalesce(sum(q2_CYTRANSACTIONS.&#39;Transactions&#39;), 0) - coalesce(sum(q2_PYTRANSACTIONS.&#39;Transactions&#39;), 0)) / coalesce(sum(q2_PYTRANSACTIONS.&#39;Transactions&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Transactions Growth&#39;, ((coalesce(sum(q3_CYTRANSACTIONS.&#39;Transactions&#39;), 0) - coalesce(sum(q3_PYTRANSACTIONS.&#39;Transactions&#39;), 0)) / coalesce(sum(q3_PYTRANSACTIONS.&#39;Transactions&#39;), 0)) * 100 as &#39;YTD Transactions Growth&#39;, coalesce(sum(q2_CYCUSTOMER.&#39;Customer1&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Customer Absolute&#39;, coalesce(sum(q3_CYCUSTOMER.&#39;Customer1&#39;), 0) as &#39;YTD Customer Absolute&#39;, ((coalesce(sum(q2_CYCUSTOMER.&#39;Customer1&#39;), 0) - coalesce(sum(q2_PYCUSTOMER.&#39;Customer1&#39;), 0)) / coalesce(sum(q2_PYCUSTOMER.&#39;Customer1&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Customer Growth&#39;, ((coalesce(sum(q3_CYCUSTOMER.&#39;Customer1&#39;), 0) - coalesce(sum(q3_PYCUSTOMER.&#39;Customer1&#39;), 0)) / coalesce(sum(q3_PYCUSTOMER.&#39;Customer1&#39;), 0)) * 100 as &#39;YTD Customer Growth&#39;,coalesce(sum(q2_CYSHARE.&#39;TAM1&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} TAM Absolute&#39;, coalesce(sum(q3_CYSHARE.&#39;TAM1&#39;), 0) as &#39;YTD TAM Absolute&#39;,(coalesce(sum(q2_CYAOV.&#39;AOV&#39;),0)/10000) / coalesce(sum(q2_CYSHARE.&#39;TAM1&#39;), 0) as  &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} TAM Growth&#39; , (coalesce(sum(q3_CYAOV.&#39;AOV&#39;),0)/10000)/ coalesce(sum(q3_CYSHARE.&#39;TAM1&#39;), 0)   as &#39;YTD TAM Growth&#39;,coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE Absolute&#39;, coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) as &#39;YTD SE Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) - coalesce(sum(q2_PYHC.&#39;SE&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;SE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SE Growth&#39;, ((coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) - coalesce(sum(q3_PYHC.&#39;SE&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;SE&#39;), 0)) * 100 as &#39;YTD SE Growth&#39;,(power(coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;SE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;SE&#39;), 0),(1/2))-1)*100 as &#39;YTD SE CAGR&#39;, coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE Absolute&#39;, coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) as &#39;YTD AE Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) - coalesce(sum(q2_PYHC.&#39;AE&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;AE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} AE Growth&#39;, ((coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) - coalesce(sum(q3_PYHC.&#39;AE&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;AE&#39;), 0)) * 100 as &#39;YTD AE Growth&#39;, (power(coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;AE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;AE&#39;), 0),(1/2))-1)*100 as &#39;YTD AE CAGR&#39;,coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime Absolute&#39;, coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) as &#39;YTD Co_Prime Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) - coalesce(sum(q2_PYHC.&#39;Co_Prime&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;Co_Prime&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Co_Prime Growth&#39;, ((coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) - coalesce(sum(q3_PYHC.&#39;Co_Prime&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;Co_Prime&#39;), 0)) * 100 as &#39;YTD Co_Prime Growth&#39;,(power(coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;Co_Prime&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;Co_Prime&#39;), 0),(1/2))-1)*100 as &#39;YTD Co_Prime CAGR&#39;, coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE Absolute&#39;, coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) as &#39;YTD SWE Absolute&#39;, ((coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) - coalesce(sum(q2_PYSW.&#39;SWE&#39;), 0)) / coalesce(sum(q2_PYSW.&#39;SWE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SWE Growth&#39;, ((coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) - coalesce(sum(q3_PYSW.&#39;SWE&#39;), 0)) / coalesce(sum(q3_PYSW.&#39;SWE&#39;), 0)) * 100 as &#39;YTD SWE Growth&#39;,(power(coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) / coalesce(sum(q2_PY_2_SW.&#39;SWE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE CAGR&#39;,(power(coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) / coalesce(sum(q3_PY_2_SW.&#39;SWE&#39;), 0),(1/2))-1)*100 as &#39;YTD SWE CAGR&#39;, coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA Absolute&#39;, coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) as &#39;YTD INFRA Absolute&#39;, ((coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) - coalesce(sum(q2_PYSW.&#39;INFRA&#39;), 0)) / coalesce(sum(q2_PYSW.&#39;INFRA&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} INFRA Growth&#39;, ((coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) - coalesce(sum(q3_PYSW.&#39;INFRA&#39;), 0)) / coalesce(sum(q3_PYSW.&#39;INFRA&#39;), 0)) * 100 as &#39;YTD INFRA Growth&#39;,(power(coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) / coalesce(sum(q2_PY_2_SW.&#39;INFRA&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA CAGR&#39;,(power(coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) / coalesce(sum(q3_PY_2_SW.&#39;INFRA&#39;), 0),(1/2))-1)*100 as &#39;YTD INFRA CAGR&#39;;\nnresult_SubCloud = group q2_CYACV by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_PYACV by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_CYACV by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PYACV by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_CYAOV by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_PYAOV by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_CYAOV by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PYAOV by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q2_CYATT by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_PYATT by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_CYATT by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PYATT by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q4_CYATT by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_CYPipegen by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_PYPipegen by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_CYPipegen by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PYPipegen by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q2_CYHC by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_PYHC by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q2_PY_2_HC by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_CYHC by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PYHC by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PY_2_HC by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full ,q2_CYSW by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_PYSW by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q2_PY_2_SW by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_CYSW by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PYSW by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PY_2_SW by (&#39;Cloud&#39;, &#39;Subcloud&#39;)full, q2_CYREDACCOUNTS by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_PYREDACCOUNTS by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q2_PY_2_REDACCOUNTS by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_CYREDACCOUNTS by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PYREDACCOUNTS by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q3_PY_2_REDACCOUNTS by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_CYT_P by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_PYT_P by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q2_PY_2_T_P by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_CYT_P by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PYT_P by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q3_PY_2_T_P by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_CYAVAILABILITY by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_PYAVAILABILITY by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q2_PY_2_AVAILABILITY by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_CYAVAILABILITY by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PYAVAILABILITY by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q3_PY_2_AVAILABILITY by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_CYTRANSACTIONS by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_PYTRANSACTIONS by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q2_PY_2_TRANSACTIONS by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_CYTRANSACTIONS by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PYTRANSACTIONS by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q3_PY_2_TRANSACTIONS by (&#39;Cloud&#39;, &#39;Subcloud&#39;)  full, q2_CYCUSTOMER by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_PYCUSTOMER by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q2_PY_2_CUSTOMER by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_CYCUSTOMER by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PYCUSTOMER by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q3_PY_2_CUSTOMER by (&#39;Cloud&#39;, &#39;Subcloud&#39;)full, q2_CYSHARE by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_PYSHARE by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q2_PY_2_SHARE by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_CYSHARE by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PYSHARE by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q3_PY_2_SHARE by (&#39;Cloud&#39;, &#39;Subcloud&#39;),MasterHierarchy by (&#39;Level_1&#39;, &#39;Level_2&#39;) ;\nn\nresult_SubCloud = foreach result_SubCloud generate &quot;    ↳  &quot; + coalesce(MasterHierarchy.&#39;Level_2&#39;, q2_CYACV.&#39;Subcloud&#39;, q2_PYACV.&#39;Subcloud&#39;, q3_CYACV.&#39;Subcloud&#39;, q3_PYACV.&#39;Subcloud&#39;, q2_CYAOV.&#39;Subcloud&#39;, q2_PYAOV.&#39;Subcloud&#39;, q3_CYAOV.&#39;Subcloud&#39;, q3_PYAOV.&#39;Subcloud&#39;,q2_CYREDACCOUNTS.&#39;Subcloud&#39;, q2_PYREDACCOUNTS.&#39;Subcloud&#39;, q3_CYREDACCOUNTS.&#39;Subcloud&#39;, q3_PYREDACCOUNTS.&#39;Subcloud&#39;, q2_CYT_P.&#39;Subcloud&#39;, q2_PYT_P.&#39;Subcloud&#39;, q3_CYT_P.&#39;Subcloud&#39;, q3_PYT_P.&#39;Subcloud&#39;, q2_CYAVAILABILITY.&#39;Subcloud&#39;, q2_PYAVAILABILITY.&#39;Subcloud&#39;, q3_CYAVAILABILITY.&#39;Subcloud&#39;, q3_PYAVAILABILITY.&#39;Subcloud&#39;, q2_CYTRANSACTIONS.&#39;Subcloud&#39;, q2_PYTRANSACTIONS.&#39;Subcloud&#39;, q3_CYTRANSACTIONS.&#39;Subcloud&#39;, q3_PYTRANSACTIONS.&#39;Subcloud&#39;, q2_CYAVAILABILITY.&#39;Subcloud&#39;, q2_PYAVAILABILITY.&#39;Subcloud&#39;, q3_CYAVAILABILITY.&#39;Subcloud&#39;, q3_PYAVAILABILITY.&#39;Subcloud&#39;, q2_CYCUSTOMER.&#39;Subcloud&#39;, q2_PYCUSTOMER.&#39;Subcloud&#39;, q3_CYCUSTOMER.&#39;Subcloud&#39;, q3_PYCUSTOMER.&#39;Subcloud&#39;, q2_CYSHARE.&#39;Subcloud&#39;, q2_PYSHARE.&#39;Subcloud&#39;, q3_CYSHARE.&#39;Subcloud&#39;, q3_PYSHARE.&#39;Subcloud&#39;) as &#39;Cloud&#39;,  coalesce(sum(q2_CYACV.&#39;ACV&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} ACV Absolute&#39;, coalesce(sum(q3_CYACV.&#39;ACV&#39;), 0) as &#39;YTD ACV Absolute&#39;, ((coalesce(sum(q2_CYACV.&#39;ACV&#39;), 0) - coalesce(sum(q2_PYACV.&#39;ACV&#39;), 0)) / coalesce(sum(q2_PYACV.&#39;ACV&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} ACV Growth&#39;, ((coalesce(sum(q3_CYACV.&#39;ACV&#39;), 0) - coalesce(sum(q3_PYACV.&#39;ACV&#39;), 0)) / coalesce(sum(q3_PYACV.&#39;ACV&#39;), 0)) * 100 as &#39;YTD ACV Growth&#39;, coalesce(sum(q2_CYAOV.&#39;AOV&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AOV Absolute&#39;, coalesce(sum(q3_CYAOV.&#39;AOV&#39;), 0) as &#39;YTD AOV Absolute&#39;, ((coalesce(sum(q2_CYAOV.&#39;AOV&#39;), 0) - coalesce(sum(q2_PYAOV.&#39;AOV&#39;), 0)) / coalesce(sum(q2_PYAOV.&#39;AOV&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} AOV Growth&#39;, ((coalesce(sum(q3_CYAOV.&#39;AOV&#39;), 0) - coalesce(sum(q3_PYAOV.&#39;AOV&#39;), 0)) / coalesce(sum(q3_PYAOV.&#39;AOV&#39;), 0)) * 100 as &#39;YTD AOV Growth&#39;, coalesce(sum(q2_CYPipegen.&#39;Pipegen&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Pipegen Absolute&#39;, coalesce(sum(q3_CYPipegen.&#39;Pipegen&#39;), 0) as &#39;YTD Pipegen Absolute&#39;, ((coalesce(sum(q2_CYPipegen.&#39;Pipegen&#39;), 0) - coalesce(sum(q2_PYPipegen.&#39;Pipegen&#39;), 0)) / coalesce(sum(q2_PYPipegen.&#39;Pipegen&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Pipegen Growth&#39;, ((coalesce(sum(q3_CYPipegen.&#39;Pipegen&#39;), 0) - coalesce(sum(q3_PYPipegen.&#39;Pipegen&#39;), 0)) / coalesce(sum(q3_PYPipegen.&#39;Pipegen&#39;), 0)) * 100 as &#39;YTD Pipegen Growth&#39;,coalesce(sum(q2_CYATT.&#39;Attrition_Product&#39;),0) as &#39;Attrition_CY_Q2&#39;,coalesce(sum(q3_CYATT.&#39;Attrition_Product&#39;),0) as &#39;Attrition_CY_Q3&#39;,coalesce(round(sum(q2_CYATT.&#39;TTM_Product&#39;), 0), 0) as &#39;TTM_Product_CY_Q2&#39; ,coalesce(round(sum(q2_CYATT.&#39;AOV_twelve_month_ago&#39;), 0), 0) as &#39;AOV_twelve_month_ago_CY_Q2&#39;,coalesce(round(sum(q4_CYATT.&#39;TTM_Product&#39;), 0), 0) as &#39;TTM_Product_CY_Q3&#39; ,coalesce(round(sum(q4_CYATT.&#39;AOV_twelve_month_ago&#39;), 0), 0) as &#39;AOV_twelve_month_ago_CY_Q3&#39;,(coalesce(round(sum(q2_CYATT.&#39;TTM_Product&#39;), 0), 0) / coalesce(round(sum(q2_CYATT.&#39;AOV_twelve_month_ago&#39;), 0), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Attrition TTM Rate&#39;, (coalesce(round(sum(q4_CYATT.&#39;TTM_Product&#39;), 0), 0) / coalesce(round(sum(q4_CYATT.&#39;AOV_twelve_month_ago&#39;), 0), 0)) * 100 as &#39;YTD Attrition TTM Rate&#39;, coalesce(sum(q2_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Red_Accounts Absolute&#39;, coalesce(sum(q3_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) as &#39;YTD Red_Accounts Absolute&#39;, ((coalesce(sum(q2_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) - coalesce(sum(q2_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) / coalesce(sum(q2_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Red_Accounts Growth&#39;, ((coalesce(sum(q3_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) - coalesce(sum(q3_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) / coalesce(sum(q3_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) * 100 as &#39;YTD Red_Accounts Growth&#39;, coalesce(sum(q2_CYT_P.&#39;CTS&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} CTS Absolute&#39;, coalesce(sum(q3_CYT_P.&#39;CTS&#39;), 0) as &#39;YTD CTS Absolute&#39;, ((coalesce(sum(q2_CYT_P.&#39;CTS&#39;), 0) - coalesce(sum(q2_PYT_P.&#39;CTS&#39;), 0)) / coalesce(sum(q2_PYT_P.&#39;CTS&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} CTS Growth&#39;, ((coalesce(sum(q3_CYT_P.&#39;CTS&#39;), 0) - coalesce(sum(q3_PYT_P.&#39;CTS&#39;), 0)) / coalesce(sum(q3_PYT_P.&#39;CTS&#39;), 0)) * 100 as &#39;YTD CTS Growth&#39;, coalesce(sum(q2_CYAVAILABILITY.&#39;Availability&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Availability Absolute&#39;, coalesce(sum(q3_CYAVAILABILITY.&#39;Availability&#39;), 0) as &#39;YTD Availability Absolute&#39;, ((coalesce(sum(q2_CYAVAILABILITY.&#39;Availability&#39;), 0) - coalesce(sum(q2_PYAVAILABILITY.&#39;Availability&#39;), 0)) / coalesce(sum(q2_PYAVAILABILITY.&#39;Availability&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Availability Growth&#39;, ((coalesce(sum(q3_CYAVAILABILITY.&#39;Availability&#39;), 0) - coalesce(sum(q3_PYAVAILABILITY.&#39;Availability&#39;), 0)) / coalesce(sum(q3_PYAVAILABILITY.&#39;Availability&#39;), 0)) * 100 as &#39;YTD Availability Growth&#39;, coalesce(sum(q2_CYTRANSACTIONS.&#39;Transactions&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Transactions Absolute&#39;, coalesce(sum(q3_CYTRANSACTIONS.&#39;Transactions&#39;), 0) as &#39;YTD Transactions Absolute&#39;, ((coalesce(sum(q2_CYTRANSACTIONS.&#39;Transactions&#39;), 0) - coalesce(sum(q2_PYTRANSACTIONS.&#39;Transactions&#39;), 0)) / coalesce(sum(q2_PYTRANSACTIONS.&#39;Transactions&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Transactions Growth&#39;, ((coalesce(sum(q3_CYTRANSACTIONS.&#39;Transactions&#39;), 0) - coalesce(sum(q3_PYTRANSACTIONS.&#39;Transactions&#39;), 0)) / coalesce(sum(q3_PYTRANSACTIONS.&#39;Transactions&#39;), 0)) * 100 as &#39;YTD Transactions Growth&#39;, coalesce(sum(q2_CYCUSTOMER.&#39;Customer2&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Customer Absolute&#39;, coalesce(sum(q3_CYCUSTOMER.&#39;Customer2&#39;), 0) as &#39;YTD Customer Absolute&#39;, ((coalesce(sum(q2_CYCUSTOMER.&#39;Customer2&#39;), 0) - coalesce(sum(q2_PYCUSTOMER.&#39;Customer2&#39;), 0)) / coalesce(sum(q2_PYCUSTOMER.&#39;Customer2&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Customer Growth&#39;, ((coalesce(sum(q3_CYCUSTOMER.&#39;Customer2&#39;), 0) - coalesce(sum(q3_PYCUSTOMER.&#39;Customer2&#39;), 0)) / coalesce(sum(q3_PYCUSTOMER.&#39;Customer2&#39;), 0)) * 100 as &#39;YTD Customer Growth&#39;, coalesce(sum(q2_CYSHARE.&#39;TAM2&#39;), 0)  as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} TAM Absolute&#39;, coalesce(sum(q3_CYSHARE.&#39;TAM2&#39;), 0) as &#39;YTD TAM Absolute&#39;, (coalesce(sum(q2_CYAOV.&#39;AOV&#39;),0)/10000) / coalesce(sum(q2_CYSHARE.&#39;TAM2&#39;), 0)  as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} TAM Growth&#39;,(coalesce(sum(q3_CYAOV.&#39;AOV&#39;),0)/10000)/ coalesce(sum(q3_CYSHARE.&#39;TAM2&#39;), 0)   as &#39;YTD TAM Growth&#39;, coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE Absolute&#39;, coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) as &#39;YTD SE Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) - coalesce(sum(q2_PYHC.&#39;SE&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;SE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SE Growth&#39;, ((coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) - coalesce(sum(q3_PYHC.&#39;SE&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;SE&#39;), 0)) * 100 as &#39;YTD SE Growth&#39;,(power(coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;SE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;SE&#39;), 0),(1/2))-1)*100 as &#39;YTD SE CAGR&#39;, coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE Absolute&#39;, coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) as &#39;YTD AE Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) - coalesce(sum(q2_PYHC.&#39;AE&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;AE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} AE Growth&#39;, ((coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) - coalesce(sum(q3_PYHC.&#39;AE&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;AE&#39;), 0)) * 100 as &#39;YTD AE Growth&#39;, (power(coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;AE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;AE&#39;), 0),(1/2))-1)*100 as &#39;YTD AE CAGR&#39;,coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime Absolute&#39;, coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) as &#39;YTD Co_Prime Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) - coalesce(sum(q2_PYHC.&#39;Co_Prime&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;Co_Prime&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Co_Prime Growth&#39;, ((coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) - coalesce(sum(q3_PYHC.&#39;Co_Prime&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;Co_Prime&#39;), 0)) * 100 as &#39;YTD Co_Prime Growth&#39;,(power(coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;Co_Prime&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;Co_Prime&#39;), 0),(1/2))-1)*100 as &#39;YTD Co_Prime CAGR&#39;, coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE Absolute&#39;, coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) as &#39;YTD SWE Absolute&#39;, ((coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) - coalesce(sum(q2_PYSW.&#39;SWE&#39;), 0)) / coalesce(sum(q2_PYSW.&#39;SWE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SWE Growth&#39;, ((coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) - coalesce(sum(q3_PYSW.&#39;SWE&#39;), 0)) / coalesce(sum(q3_PYSW.&#39;SWE&#39;), 0)) * 100 as &#39;YTD SWE Growth&#39;,(power(coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) / coalesce(sum(q2_PY_2_SW.&#39;SWE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE CAGR&#39;,(power(coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) / coalesce(sum(q3_PY_2_SW.&#39;SWE&#39;), 0),(1/2))-1)*100 as &#39;YTD SWE CAGR&#39;, coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA Absolute&#39;, coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) as &#39;YTD INFRA Absolute&#39;, ((coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) - coalesce(sum(q2_PYSW.&#39;INFRA&#39;), 0)) / coalesce(sum(q2_PYSW.&#39;INFRA&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} INFRA Growth&#39;, ((coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) - coalesce(sum(q3_PYSW.&#39;INFRA&#39;), 0)) / coalesce(sum(q3_PYSW.&#39;INFRA&#39;), 0)) * 100 as &#39;YTD INFRA Growth&#39;,(power(coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) / coalesce(sum(q2_PY_2_SW.&#39;INFRA&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA CAGR&#39;,(power(coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) / coalesce(sum(q3_PY_2_SW.&#39;INFRA&#39;), 0),(1/2))-1)*100 as &#39;YTD INFRA CAGR&#39;,last(MasterHierarchy.&#39;Level_2_Sort_Code&#39;)  as &#39;Sort_Code&#39;;\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------GROUPING LEVEL3-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nresult_Cloud_Level3 = group  q2_CYACV by (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q2_PYACV by (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_CYACV by (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_PYACV by (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q2_CYAOV by (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q2_PYAOV by (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_CYAOV by (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_PYAOV by (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full,  q2_CYPipegen by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, q2_PYPipegen by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, q3_CYPipegen by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, q3_PYPipegen by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, q2_CYHC by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, q2_PYHC by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full,q2_PY_2_HC by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, q3_CYHC by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, q3_PYHC by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full,  q3_PY_2_HC by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, q2_CYSW by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, q2_PYSW by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full,q2_PY_2_SW by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, q3_CYSW by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, q3_PYSW by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full,  q3_PY_2_SW by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full,q2_CYATT by (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q2_PYATT by (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_CYATT by (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_PYATT by (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;)full, q2_CYREDACCOUNTS by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q2_PYREDACCOUNTS by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full,q2_PY_2_REDACCOUNTS by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_CYREDACCOUNTS by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_PYREDACCOUNTS by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full,q3_PY_2_REDACCOUNTS by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q2_CYT_P by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q2_PYT_P by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full,q2_PY_2_T_P by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_CYT_P by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_PYT_P by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full,q3_PY_2_T_P by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q2_CYAVAILABILITY by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q2_PYAVAILABILITY by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full,q2_PY_2_AVAILABILITY by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_CYAVAILABILITY by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_PYAVAILABILITY by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full,q3_PY_2_AVAILABILITY by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q2_CYTRANSACTIONS by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q2_PYTRANSACTIONS by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full,q2_PY_2_TRANSACTIONS by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_CYTRANSACTIONS by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_PYTRANSACTIONS by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full,q3_PY_2_TRANSACTIONS by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;)  full, q2_CYCUSTOMER by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q2_PYCUSTOMER by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full,q2_PY_2_CUSTOMER by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_CYCUSTOMER by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_PYCUSTOMER by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full,q3_PY_2_CUSTOMER by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;)full, q2_CYSHARE by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q2_PYSHARE by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full,q2_PY_2_SHARE by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_CYSHARE by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_PYSHARE by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full,q3_PY_2_SHARE by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;),MasterHierarchy by (&#39;Level_1&#39;, &#39;Level_2&#39;,&#39;Level_3&#39;)  ;\nn\nresult_Cloud_Level3 = foreach result_Cloud_Level3 generate &quot;          &quot; + coalesce(MasterHierarchy.&#39;Level_3&#39;, q2_CYACV.&#39;Cloud_2&#39;, q2_PYACV.&#39;Cloud_2&#39;, q3_CYACV.&#39;Cloud_2&#39;, q3_PYACV.&#39;Cloud_2&#39;, q2_CYAOV.&#39;Cloud_2&#39;, q2_PYAOV.&#39;Cloud_2&#39;, q3_CYAOV.&#39;Cloud_2&#39;, q3_PYAOV.&#39;Cloud_2&#39;,q2_CYREDACCOUNTS.&#39;Cloud_2&#39;, q2_PYREDACCOUNTS.&#39;Cloud_2&#39;, q3_CYREDACCOUNTS.&#39;Cloud_2&#39;, q3_PYREDACCOUNTS.&#39;Cloud_2&#39;, q2_CYT_P.&#39;Cloud_2&#39;, q2_PYT_P.&#39;Cloud_2&#39;, q3_CYT_P.&#39;Cloud_2&#39;, q3_PYT_P.&#39;Cloud_2&#39;, q2_CYAVAILABILITY.&#39;Cloud_2&#39;, q2_PYAVAILABILITY.&#39;Cloud_2&#39;, q3_CYAVAILABILITY.&#39;Cloud_2&#39;, q3_PYAVAILABILITY.&#39;Cloud_2&#39;, q2_CYTRANSACTIONS.&#39;Cloud_2&#39;, q2_PYTRANSACTIONS.&#39;Cloud_2&#39;, q3_CYTRANSACTIONS.&#39;Cloud_2&#39;, q3_PYTRANSACTIONS.&#39;Cloud_2&#39;, q2_CYAVAILABILITY.&#39;Cloud_2&#39;, q2_PYAVAILABILITY.&#39;Cloud_2&#39;, q3_CYAVAILABILITY.&#39;Cloud_2&#39;, q3_PYAVAILABILITY.&#39;Cloud_2&#39;, q2_CYCUSTOMER.&#39;Cloud_2&#39;, q2_PYCUSTOMER.&#39;Cloud_2&#39;, q3_CYCUSTOMER.&#39;Cloud_2&#39;, q3_PYCUSTOMER.&#39;Cloud_2&#39;, q2_CYSHARE.&#39;Cloud_2&#39;, q2_PYSHARE.&#39;Cloud_2&#39;, q3_CYSHARE.&#39;Cloud_2&#39;, q3_PYSHARE.&#39;Cloud_2&#39;) as &#39;Cloud&#39;,  coalesce(sum(q2_CYACV.&#39;ACV&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} ACV Absolute&#39;, coalesce(sum(q3_CYACV.&#39;ACV&#39;), 0) as &#39;YTD ACV Absolute&#39;, ((coalesce(sum(q2_CYACV.&#39;ACV&#39;), 0) - coalesce(sum(q2_PYACV.&#39;ACV&#39;), 0)) / coalesce(sum(q2_PYACV.&#39;ACV&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} ACV Growth&#39;, ((coalesce(sum(q3_CYACV.&#39;ACV&#39;), 0) - coalesce(sum(q3_PYACV.&#39;ACV&#39;), 0)) / coalesce(sum(q3_PYACV.&#39;ACV&#39;), 0)) * 100 as &#39;YTD ACV Growth&#39;, coalesce(sum(q2_CYAOV.&#39;AOV&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AOV Absolute&#39;, coalesce(sum(q3_CYAOV.&#39;AOV&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} YTD AOV Absolute&#39;, ((coalesce(sum(q2_CYAOV.&#39;AOV&#39;), 0) - coalesce(sum(q2_PYAOV.&#39;AOV&#39;), 0)) / coalesce(sum(q2_PYAOV.&#39;AOV&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} AOV Growth&#39;, ((coalesce(sum(q3_CYAOV.&#39;AOV&#39;), 0) - coalesce(sum(q3_PYAOV.&#39;AOV&#39;), 0)) / coalesce(sum(q3_PYAOV.&#39;AOV&#39;), 0)) * 100 as &#39;YTD AOV Growth&#39;, coalesce(sum(q2_CYPipegen.&#39;Pipegen&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Pipegen Absolute&#39;, coalesce(sum(q3_CYPipegen.&#39;Pipegen&#39;), 0) as &#39;YTD Pipegen Absolute&#39;, ((coalesce(sum(q2_CYPipegen.&#39;Pipegen&#39;), 0) - coalesce(sum(q2_PYPipegen.&#39;Pipegen&#39;), 0)) / coalesce(sum(q2_PYPipegen.&#39;Pipegen&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Pipegen Growth&#39;, ((coalesce(sum(q3_CYPipegen.&#39;Pipegen&#39;), 0) - coalesce(sum(q3_PYPipegen.&#39;Pipegen&#39;), 0)) / coalesce(sum(q3_PYPipegen.&#39;Pipegen&#39;), 0)) * 100 as &#39;YTD Pipegen Growth&#39;, coalesce(sum(q2_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Red_Accounts Absolute&#39;, coalesce(sum(q3_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) as &#39;YTD Red_Accounts Absolute&#39;, ((coalesce(sum(q2_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) - coalesce(sum(q2_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) / coalesce(sum(q2_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Red_Accounts Growth&#39;, ((coalesce(sum(q3_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) - coalesce(sum(q3_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) / coalesce(sum(q3_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) * 100 as &#39;YTD Red_Accounts Growth&#39;, coalesce(sum(q2_CYT_P.&#39;CTS&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} CTS Absolute&#39;, coalesce(sum(q3_CYT_P.&#39;CTS&#39;), 0) as &#39;YTD CTS Absolute&#39;, ((coalesce(sum(q2_CYT_P.&#39;CTS&#39;), 0) - coalesce(sum(q2_PYT_P.&#39;CTS&#39;), 0)) / coalesce(sum(q2_PYT_P.&#39;CTS&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} CTS Growth&#39;, ((coalesce(sum(q3_CYT_P.&#39;CTS&#39;), 0) - coalesce(sum(q3_PYT_P.&#39;CTS&#39;), 0)) / coalesce(sum(q3_PYT_P.&#39;CTS&#39;), 0)) * 100 as &#39;YTD CTS Growth&#39;, coalesce(sum(q2_CYAVAILABILITY.&#39;Availability&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Availability Absolute&#39;, coalesce(sum(q3_CYAVAILABILITY.&#39;Availability&#39;), 0) as &#39;YTD Availability Absolute&#39;, ((coalesce(sum(q2_CYAVAILABILITY.&#39;Availability&#39;), 0) - coalesce(sum(q2_PYAVAILABILITY.&#39;Availability&#39;), 0)) / coalesce(sum(q2_PYAVAILABILITY.&#39;Availability&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Availability Growth&#39;, ((coalesce(sum(q3_CYAVAILABILITY.&#39;Availability&#39;), 0) - coalesce(sum(q3_PYAVAILABILITY.&#39;Availability&#39;), 0)) / coalesce(sum(q3_PYAVAILABILITY.&#39;Availability&#39;), 0)) * 100 as &#39;YTD Availability Growth&#39;, coalesce(sum(q2_CYTRANSACTIONS.&#39;Transactions&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Transactions Absolute&#39;, coalesce(sum(q3_CYTRANSACTIONS.&#39;Transactions&#39;), 0) as &#39;YTD Transactions Absolute&#39;, ((coalesce(sum(q2_CYTRANSACTIONS.&#39;Transactions&#39;), 0) - coalesce(sum(q2_PYTRANSACTIONS.&#39;Transactions&#39;), 0)) / coalesce(sum(q2_PYTRANSACTIONS.&#39;Transactions&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Transactions Growth&#39;, ((coalesce(sum(q3_CYTRANSACTIONS.&#39;Transactions&#39;), 0) - coalesce(sum(q3_PYTRANSACTIONS.&#39;Transactions&#39;), 0)) / coalesce(sum(q3_PYTRANSACTIONS.&#39;Transactions&#39;), 0)) * 100 as &#39;YTD Transactions Growth&#39;, coalesce(sum(q2_CYCUSTOMER.&#39;Customer3&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Customer Absolute&#39;, coalesce(sum(q3_CYCUSTOMER.&#39;Customer3&#39;), 0) as &#39;YTD Customer Absolute&#39;, ((coalesce(sum(q2_CYCUSTOMER.&#39;Customer3&#39;), 0) - coalesce(sum(q2_PYCUSTOMER.&#39;Customer3&#39;), 0)) / coalesce(sum(q2_PYCUSTOMER.&#39;Customer3&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Customer Growth&#39;, ((coalesce(sum(q3_CYCUSTOMER.&#39;Customer3&#39;), 0) - coalesce(sum(q3_PYCUSTOMER.&#39;Customer3&#39;), 0)) / coalesce(sum(q3_PYCUSTOMER.&#39;Customer3&#39;), 0)) * 100 as &#39;YTD Customer Growth&#39;, coalesce(sum(q2_CYSHARE.&#39;TAM3&#39;), 0)  as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} TAM Absolute&#39;, coalesce(sum(q3_CYSHARE.&#39;TAM3&#39;), 0) as &#39;YTD TAM Absolute&#39;,(coalesce(sum(q2_CYAOV.&#39;AOV&#39;),0)/10000) / coalesce(sum(q2_CYSHARE.&#39;TAM3&#39;), 0)  as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} TAM Growth&#39;, (coalesce(sum(q3_CYAOV.&#39;AOV&#39;),0)/10000)/ coalesce(sum(q3_CYSHARE.&#39;TAM3&#39;), 0)   as &#39;YTD TAM Growth&#39;, coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE Absolute&#39;, coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) as &#39;YTD SE Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) - coalesce(sum(q2_PYHC.&#39;SE&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;SE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SE Growth&#39;, ((coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) - coalesce(sum(q3_PYHC.&#39;SE&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;SE&#39;), 0)) * 100 as &#39;YTD SE Growth&#39;,(power(coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;SE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;SE&#39;), 0),(1/2))-1)*100 as &#39;YTD SE CAGR&#39;, coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE Absolute&#39;, coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) as &#39;YTD AE Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) - coalesce(sum(q2_PYHC.&#39;AE&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;AE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} AE Growth&#39;, ((coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) - coalesce(sum(q3_PYHC.&#39;AE&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;AE&#39;), 0)) * 100 as &#39;YTD AE Growth&#39;, (power(coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;AE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;AE&#39;), 0),(1/2))-1)*100 as &#39;YTD AE CAGR&#39;,coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime Absolute&#39;, coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) as &#39;YTD Co_Prime Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) - coalesce(sum(q2_PYHC.&#39;Co_Prime&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;Co_Prime&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Co_Prime Growth&#39;, ((coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) - coalesce(sum(q3_PYHC.&#39;Co_Prime&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;Co_Prime&#39;), 0)) * 100 as &#39;YTD Co_Prime Growth&#39;,(power(coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;Co_Prime&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;Co_Prime&#39;), 0),(1/2))-1)*100 as &#39;YTD Co_Prime CAGR&#39;, coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE Absolute&#39;, coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) as &#39;YTD SWE Absolute&#39;, ((coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) - coalesce(sum(q2_PYSW.&#39;SWE&#39;), 0)) / coalesce(sum(q2_PYSW.&#39;SWE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SWE Growth&#39;, ((coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) - coalesce(sum(q3_PYSW.&#39;SWE&#39;), 0)) / coalesce(sum(q3_PYSW.&#39;SWE&#39;), 0)) * 100 as &#39;YTD SWE Growth&#39;,(power(coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) / coalesce(sum(q2_PY_2_SW.&#39;SWE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE CAGR&#39;,(power(coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) / coalesce(sum(q3_PY_2_SW.&#39;SWE&#39;), 0),(1/2))-1)*100 as &#39;YTD SWE CAGR&#39;, coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA Absolute&#39;, coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) as &#39;YTD INFRA Absolute&#39;, ((coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) - coalesce(sum(q2_PYSW.&#39;INFRA&#39;), 0)) / coalesce(sum(q2_PYSW.&#39;INFRA&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} INFRA Growth&#39;, ((coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) - coalesce(sum(q3_PYSW.&#39;INFRA&#39;), 0)) / coalesce(sum(q3_PYSW.&#39;INFRA&#39;), 0)) * 100 as &#39;YTD INFRA Growth&#39;,(power(coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) / coalesce(sum(q2_PY_2_SW.&#39;INFRA&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA CAGR&#39;,(power(coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) / coalesce(sum(q3_PY_2_SW.&#39;INFRA&#39;), 0),(1/2))-1)*100 as &#39;YTD INFRA CAGR&#39;,last(MasterHierarchy.&#39;Level_3_Sort_Code&#39;)  as &#39;Sort_Code&#39;,&quot;          &quot; + coalesce(last(MasterHierarchy.&#39;Level_2&#39;), last(q2_CYACV.&#39;Subcloud&#39;), last(q2_PYACV.&#39;Subcloud&#39;), last(q3_CYACV.&#39;Subcloud&#39;), last(q3_PYACV.&#39;Subcloud&#39;), last(q2_CYAOV.&#39;Subcloud&#39;), last(q2_PYAOV.&#39;Subcloud&#39;), last(q3_CYAOV.&#39;Subcloud&#39;), last(q3_PYAOV.&#39;Subcloud&#39;)) as &#39;ParentCloud&#39;;\nresult_Cloud_Level3 = filter result_Cloud_Level3 by &#39;Cloud&#39; != &#39;ParentCloud&#39;;\nline =  group MasterHierarchy by &#39;all&#39;;line= foreach line generate &quot;----------------------------------------------------&quot; as &#39;Cloud&#39;,&quot;{{cell(Selector_Quarter.selection,0,&quot;Line_Rank&quot;).asString()}}&quot;  as &#39;Sort_Code&#39;;\nnFinal = union result, result_SubCloud, result_Cloud_Level3,line;\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------FINAL PROJECTION ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nFinal = filter Final by &#39;Sort_Code&#39; != &quot;&quot;;\nFinal = filter Final by &#39;Cloud&#39; not in {{cell(Selector_Quarter.selection,0,&quot;Filter_Table_2&quot;).asString()}};\nFinal = order Final by (&#39;Sort_Code&#39; asc,  &#39;Cloud&#39; asc);\nFinal = foreach Final generate &#39;Cloud&#39;+&quot;                      &quot; as &#39;Cloud&#39;, &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Customer Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Customer Absolute&#39;,&#39;YTD Customer Absolute&#39; as &#39;YTD Customer Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Customer Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Customer Growth&#39;,   &#39;YTD Customer Growth&#39; as  &#39;YTD Customer Growth&#39;, &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} TAM Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} TAM Absolute&#39;,&quot;-&quot; as &#39;YTD TAM Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} TAM Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} TAM Growth&#39;,   &quot;-&quot; as  &#39;YTD TAM Growth&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Red_Accounts Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Red_Accounts Absolute&#39;,&#39;YTD Red_Accounts Absolute&#39; as &#39;YTD Red_Accounts Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Red_Accounts Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Red_Accounts Growth&#39;,   &#39;YTD Red_Accounts Growth&#39; as  &#39;YTD Red_Accounts Growth&#39;;\n",
        "receiveFacet": true,
        "selectMode": "none",
        "strings": [],
        "type": "saql",
        "useGlobal": true,
        "visualizationParameters": {
          "parameters": {
            "autoFitMode": "none",
            "showValues": true,
            "bins": {
              "breakpoints": {
                "high": 100,
                "low": 0
              },
              "bands": {
                "high": {
                  "color": "#008000",
                  "label": ""
                },
                "low": {
                  "color": "#B22222",
                  "label": ""
                },
                "medium": {
                  "color": "#ffa500",
                  "label": ""
                }
              }
            },
            "legend": {
              "showHeader": true,
              "show": true,
              "customSize": "auto",
              "position": "right-top",
              "inside": false
            },
            "axisMode": "multi",
            "tooltip": {
              "showBinLabel": true,
              "measures": "",
              "showPercentage": true,
              "showDimensions": true,
              "showMeasures": true,
              "customizeTooltip": false,
              "dimensions": ""
            },
            "visualizationType": "hbar",
            "title": {
              "fontSize": 14,
              "subtitleFontSize": 11,
              "label": "",
              "align": "center",
              "subtitleLabel": ""
            },
            "binValues": false,
            "trellis": {
              "flipLabels": false,
              "showGridLines": true,
              "size": [
                100,
                100
              ],
              "enable": false,
              "type": "x",
              "chartsPerLine": 4
            },
            "measureAxis2": {
              "sqrtScale": false,
              "showTitle": true,
              "showAxis": true,
              "title": "",
              "customDomain": {
                "showDomain": false
              }
            },
            "measureAxis1": {
              "sqrtScale": false,
              "showTitle": true,
              "showAxis": true,
              "title": "",
              "customDomain": {
                "showDomain": false
              }
            },
            "theme": "wave",
            "dimensionAxis": {
              "showTitle": true,
              "customSize": "auto",
              "showAxis": true,
              "title": "",
              "icons": {
                "useIcons": false,
                "iconProps": {
                  "fit": "cover",
                  "column": "",
                  "type": "round"
                }
              }
            }
          },
          "type": "chart"
        }
      },
      "Table_Level_2_Measures_3": {
        "broadcastFacet": true,
        "groups": [],
        "label": "Table_Level_2_Measures_3",
        "numbers": [],
        "query": "MasterHierarchy = load &quot;Master_Hierarchy&quot;;\nMasterHierarchy = filter MasterHierarchy by &#39;Level_1&#39; in   {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nnACV = load &quot;APM_ACV&quot;;\nACV = filter ACV by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nACV = filter ACV by {{column(Filter_Lead_1.selection,[&quot;Lead_1&quot;]).asEquality(&#39;Lead_1&#39;)}};\nACV = filter ACV by {{column(Filter_Segment.selection,[&quot;Segment&quot;]).asEquality(&#39;Segment&#39;)}};\nACV = filter ACV by {{column(Filter_Industry.selection,[&quot;Industry&quot;]).asEquality(&#39;Industry&#39;)}};\nACV = filter ACV by {{column(Filter_Lead.selection,[&quot;Lead&quot;]).asEquality(&#39;Lead&#39;)}};\nACV = filter ACV by {{column(Filter_Cloud.selection,[&quot;Cloud&quot;]).asEquality(&#39;Cloud&#39;)}};\nACV = filter ACV by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nACV = group ACV by (&#39;Cloud&#39;,&#39;Cloud_2&#39;,&#39;Subcloud&#39;, &#39;Quarter&#39;,&#39;Month&#39;, &#39;Fiscal_Year&#39;, &#39;Region&#39; , &#39;Country&#39;);\nACV = foreach ACV generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39; ,&#39;Month&#39; as &#39;Month&#39;,sum(&#39;ACV&#39;) as &#39;ACV&#39;, &#39;Region&#39; as &#39;Region&#39;,  {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; ACV = filter ACV by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\nq2_CYACV = filter ACV by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}}  &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYACV = filter ACV by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}}  &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYACV = filter ACV by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;YTD_Month&quot;).asString()}}  &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYACV = filter ACV by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;YTD_Month&quot;).asString()}}  &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}} ;\nnAOV = load &quot;APM_AOV&quot;;\nAOV = filter AOV by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nAOV = filter AOV by &#39;Cloud&#39; in{{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nAOV = group AOV by (&#39;Cloud&#39;,&#39;Subcloud&#39;, &#39;Cloud_2&#39;, &#39;Quarter&#39;, &#39;Month&#39;, &#39;Fiscal_Year&#39;, &#39;Region&#39; , &#39;Country&#39;);\nAOV = foreach AOV generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;AOV&#39;) as &#39;AOV&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; AOV = filter AOV by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\nq2_CYAOV = filter AOV by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}}  &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYAOV = filter AOV by &#39;Month&#39; in   {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}}  &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYAOV = filter AOV by &#39;Month&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Month_cum&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYAOV = filter AOV by &#39;Month&#39; in{{cell(Selector_Quarter.selection,0,&quot;YTD_Month_cum&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nnAttrition = load &quot;APM_Attrition&quot;;\nAttrition = filter Attrition by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nAttrition = filter Attrition by &#39;Segment&#39; != &quot;CSG&quot;;\nAttrition = filter Attrition by &#39;Cloud&#39; in   {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nAttrition = foreach Attrition generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;,&#39;Segment&#39; as &#39;Segment&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Attrition_Product&#39;)*-1 as &#39;Attrition_Product&#39;, sum(&#39;TTM_Product&#39;)*-1 as &#39;TTM_Product&#39;,sum(&#39;AOV_twelve_month_ago_Product&#39;) as &#39;AOV_twelve_month_ago&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39;; Attrition = filter Attrition by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}} ;\nq2_CYATT = filter Attrition by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}}  &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYATT = filter Attrition by &#39;Month&#39; in   {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}}  &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYATT = filter Attrition by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;YTD_Month&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYATT = filter Attrition by &#39;Month&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Month&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq4_CYATT = filter Attrition by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;YTD_Month_cum&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD /FILTER PIPEGEN-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nPipegen = load &quot;APM_Pipegen1&quot;;\nPipegen = filter Pipegen by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nPipegen = group Pipegen by (&#39;Fiscal_Year&#39;,&#39;Quarter&#39;, &#39;Region&#39;, &#39;Cloud&#39;, &#39;Month&#39;,&#39;Subcloud&#39;, &#39;Cloud_2&#39;,&#39;Country&#39;);\nPipegen = foreach Pipegen generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Pipegen&#39;) as &#39;Pipegen&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; Pipegen = filter Pipegen by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\nPipegen = filter Pipegen by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYPipegen = filter Pipegen by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYPipegen = filter Pipegen by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYPipegen = filter Pipegen by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_pipegen&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYPipegen = filter Pipegen by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_pipegen&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nnHC = load &quot;APM_HC&quot;;\nHC = filter HC by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nHC = foreach HC generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;SE&#39;) as &#39;SE&#39;,sum(&#39;AE&#39;) as &#39;AE&#39;,sum(&#39;Co_Prime&#39;) as &#39;Co_Prime&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; HC = filter HC by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\nHC = filter HC by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYHC = filter HC by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYHC = filter HC by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_HC = filter HC by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYHC = filter HC by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_HC&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYHC = filter HC by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_HC&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_HC = filter HC by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_HC&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD SWE INFRA------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nSW = load &quot;APM_SWE_INFRA&quot;;\nSW = filter SW by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nSW = foreach SW generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;SWE&#39;) as &#39;SWE&#39;,sum(&#39;INFRA&#39;) as &#39;INFRA&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; SW = filter SW by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};;\nSW = filter SW by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYSW = filter SW by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYSW = filter SW by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_SW = filter SW by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYSW = filter SW by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_SW&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYSW = filter SW by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_SW&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_SW = filter SW by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_SW&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD REDACCOUNTS------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nREDACCOUNTS = load &quot;APM_REDACCOUNTS&quot;;\nREDACCOUNTS = filter REDACCOUNTS by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nREDACCOUNTS = foreach REDACCOUNTS generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Red_Accounts&#39;) as &#39;Red_Accounts&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39;; REDACCOUNTS = filter REDACCOUNTS by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\nREDACCOUNTS = filter REDACCOUNTS by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYREDACCOUNTS = filter REDACCOUNTS by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYREDACCOUNTS = filter REDACCOUNTS by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_REDACCOUNTS = filter REDACCOUNTS by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYREDACCOUNTS = filter REDACCOUNTS by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYREDACCOUNTS = filter REDACCOUNTS by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_REDACCOUNTS = filter REDACCOUNTS by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD T_P T&amp;P Cost to Serve------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nT_P = load &quot;APM_T_P&quot;;\nT_P = filter T_P by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nT_P = foreach T_P generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;CTS&#39;) as &#39;CTS&#39;,sum(&#39;Cloud_m1_CTS&#39;) as &#39;CTS_L1&#39;,sum(&#39;Cloud_m2_CTS&#39;) as &#39;CTS_L2&#39;,sum(&#39;Cloud_m3_CTS&#39;) as &#39;CTS_L3&#39;,sum(&#39;Cloud_m1_CTS1&#39;) as &#39;CTS1_L1&#39;,sum(&#39;Cloud_m2_CTS1&#39;) as &#39;CTS1_L2&#39;,sum(&#39;Cloud_m3_CTS1&#39;) as &#39;CTS1_L3&#39;,&#39;Region&#39; as &#39;Region&#39;,{{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; T_P = filter T_P by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\nT_P = filter T_P by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYT_P = filter T_P by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYT_P = filter T_P by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_T_P = filter T_P by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYT_P = filter T_P by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_cum&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYT_P = filter T_P by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_cum&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_T_P = filter T_P by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_cum&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD AVAILABILITY------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nAVAILABILITY = load &quot;APM_TECH_AVAILABILITY&quot;;\nAVAILABILITY = filter AVAILABILITY by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nAVAILABILITY = foreach AVAILABILITY generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Availability&#39;) as &#39;Availability&#39;,sum(&#39;Cloud_m1&#39;)*100 as &#39;Availability1&#39;, sum(&#39;Cloud_m2&#39;)*100 as &#39;Availability2&#39;, sum(&#39;Cloud_m3&#39;)*100 as &#39;Availability3&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; AVAILABILITY = filter AVAILABILITY by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\nAVAILABILITY = filter AVAILABILITY by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYAVAILABILITY = filter AVAILABILITY by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYAVAILABILITY = filter AVAILABILITY by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_AVAILABILITY = filter AVAILABILITY by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYAVAILABILITY = filter AVAILABILITY by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYAVAILABILITY = filter AVAILABILITY by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_AVAILABILITY = filter AVAILABILITY by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD TRANSACTIONS------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nTRANSACTIONS = load &quot;APM_T_P_Transactions&quot;;\nTRANSACTIONS = filter TRANSACTIONS by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nTRANSACTIONS = foreach TRANSACTIONS generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Transactions&#39;) as &#39;Transactions&#39;,&#39;Region&#39; as &#39;Region&#39;,{{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39;; TRANSACTIONS = filter TRANSACTIONS by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\nTRANSACTIONS = filter TRANSACTIONS by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYTRANSACTIONS = filter TRANSACTIONS by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYTRANSACTIONS = filter TRANSACTIONS by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_TRANSACTIONS = filter TRANSACTIONS by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYTRANSACTIONS = filter TRANSACTIONS by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYTRANSACTIONS = filter TRANSACTIONS by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_TRANSACTIONS = filter TRANSACTIONS by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD MARKET CUSTOMER------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nCUSTOMER = load &quot;APM_MARKET_CUSTOMER&quot;;\nCUSTOMER = filter CUSTOMER by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nCUSTOMER = foreach CUSTOMER generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Customer&#39;) as &#39;Customer&#39;,&#39;Region&#39; as &#39;Region&#39;,{{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39;; CUSTOMER = filter CUSTOMER by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\nCUSTOMER = filter CUSTOMER by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYCUSTOMER = filter CUSTOMER by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYCUSTOMER = filter CUSTOMER by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_CUSTOMER = filter CUSTOMER by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYCUSTOMER = filter CUSTOMER by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYCUSTOMER = filter CUSTOMER by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_CUSTOMER = filter CUSTOMER by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD MARKET SHARE------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nSHARE= load &quot;APM_MARKET_SHARE&quot;;\nSHARE= filter SHARE by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nSHARE= foreach SHARE generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;TAM&#39;) as &#39;TAM&#39;,&#39;Region&#39; as &#39;Region&#39;,{{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; SHARE= filter SHARE by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\nSHARE = filter SHARE by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYSHARE = filter SHARE by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYSHARE = filter SHARE by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_SHARE = filter SHARE by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYSHARE = filter SHARE by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYSHARE = filter SHARE by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_SHARE = filter SHARE by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nnresult = group  q2_CYACV by &#39;Cloud&#39; full, q2_PYACV by &#39;Cloud&#39; full, q3_CYACV by &#39;Cloud&#39; full, q3_PYACV by &#39;Cloud&#39; full, q2_CYAOV by &#39;Cloud&#39; full, q2_PYAOV by &#39;Cloud&#39; full, q3_CYAOV by &#39;Cloud&#39; full, q3_PYAOV by &#39;Cloud&#39; full,  q2_CYATT by &#39;Cloud&#39; full, q2_PYATT by &#39;Cloud&#39; full, q3_CYATT by &#39;Cloud&#39; full, q3_PYATT by &#39;Cloud&#39; full,q4_CYATT by &#39;Cloud&#39; full, q2_CYPipegen by &#39;Cloud&#39; full, q2_PYPipegen by &#39;Cloud&#39; full, q3_CYPipegen by &#39;Cloud&#39; full, q3_PYPipegen by &#39;Cloud&#39;full,q2_CYHC by &#39;Cloud&#39; full, q2_PYHC by &#39;Cloud&#39; full,q2_PY_2_HC by &#39;Cloud&#39; full, q3_CYHC by &#39;Cloud&#39; full, q3_PYHC by &#39;Cloud&#39; full,q3_PY_2_HC by &#39;Cloud&#39; full, q2_CYSW by &#39;Cloud&#39; full, q2_PYSW by &#39;Cloud&#39; full,q2_PY_2_SW by &#39;Cloud&#39; full, q3_CYSW by &#39;Cloud&#39; full, q3_PYSW by &#39;Cloud&#39; full,q3_PY_2_SW by &#39;Cloud&#39;full, q2_CYREDACCOUNTS by &#39;Cloud&#39; full, q2_PYREDACCOUNTS by &#39;Cloud&#39; full,q2_PY_2_REDACCOUNTS by &#39;Cloud&#39; full, q3_CYREDACCOUNTS by &#39;Cloud&#39; full, q3_PYREDACCOUNTS by &#39;Cloud&#39; full,q3_PY_2_REDACCOUNTS by &#39;Cloud&#39; full, q2_CYT_P by &#39;Cloud&#39; full, q2_PYT_P by &#39;Cloud&#39; full,q2_PY_2_T_P by &#39;Cloud&#39; full, q3_CYT_P by &#39;Cloud&#39; full, q3_PYT_P by &#39;Cloud&#39; full,q3_PY_2_T_P by &#39;Cloud&#39; full, q2_CYAVAILABILITY by &#39;Cloud&#39; full, q2_PYAVAILABILITY by &#39;Cloud&#39; full,q2_PY_2_AVAILABILITY by &#39;Cloud&#39; full, q3_CYAVAILABILITY by &#39;Cloud&#39; full, q3_PYAVAILABILITY by &#39;Cloud&#39; full,q3_PY_2_AVAILABILITY by &#39;Cloud&#39; full, q2_CYTRANSACTIONS by &#39;Cloud&#39; full, q2_PYTRANSACTIONS by &#39;Cloud&#39; full,q2_PY_2_TRANSACTIONS by &#39;Cloud&#39; full, q3_CYTRANSACTIONS by &#39;Cloud&#39; full, q3_PYTRANSACTIONS by &#39;Cloud&#39; full,q3_PY_2_TRANSACTIONS by &#39;Cloud&#39;  full, q2_CYCUSTOMER by &#39;Cloud&#39; full, q2_PYCUSTOMER by &#39;Cloud&#39; full,q2_PY_2_CUSTOMER by &#39;Cloud&#39; full, q3_CYCUSTOMER by &#39;Cloud&#39; full, q3_PYCUSTOMER by &#39;Cloud&#39; full,q3_PY_2_CUSTOMER by &#39;Cloud&#39;full, q2_CYSHARE by &#39;Cloud&#39; full, q2_PYSHARE by &#39;Cloud&#39; full,q2_PY_2_SHARE by &#39;Cloud&#39; full, q3_CYSHARE by &#39;Cloud&#39; full, q3_PYSHARE by &#39;Cloud&#39; full,q3_PY_2_SHARE by &#39;Cloud&#39;,MasterHierarchy by &#39;Level_1&#39;;\nn;\nresult = foreach result generate  &quot;☁ &quot; + coalesce(MasterHierarchy.&#39;Level_1&#39;, q2_CYACV.&#39;Cloud&#39;, q2_PYACV.&#39;Cloud&#39;, q3_CYACV.&#39;Cloud&#39;, q3_PYACV.&#39;Cloud&#39;, q2_CYAOV.&#39;Cloud&#39;, q2_PYAOV.&#39;Cloud&#39;, q3_CYAOV.&#39;Cloud&#39;, q3_PYAOV.&#39;Cloud&#39;,q2_PYATT.&#39;Cloud&#39;,q2_CYATT.&#39;Cloud&#39;,q3_PYATT.&#39;Cloud&#39;,q3_CYATT.&#39;Cloud&#39;,q2_CYPipegen.&#39;Cloud&#39;, q2_PYPipegen.&#39;Cloud&#39;, q3_CYPipegen.&#39;Cloud&#39;, q3_PYPipegen.&#39;Cloud&#39;,q2_CYREDACCOUNTS.&#39;Cloud&#39;, q2_PYREDACCOUNTS.&#39;Cloud&#39;, q3_CYREDACCOUNTS.&#39;Cloud&#39;, q3_PYREDACCOUNTS.&#39;Cloud&#39;, q2_CYT_P.&#39;Cloud&#39;, q2_PYT_P.&#39;Cloud&#39;, q3_CYT_P.&#39;Cloud&#39;, q3_PYT_P.&#39;Cloud&#39;, q2_CYAVAILABILITY.&#39;Cloud&#39;, q2_PYAVAILABILITY.&#39;Cloud&#39;, q3_CYAVAILABILITY.&#39;Cloud&#39;, q3_PYAVAILABILITY.&#39;Cloud&#39;, q2_CYTRANSACTIONS.&#39;Cloud&#39;, q2_PYTRANSACTIONS.&#39;Cloud&#39;, q3_CYTRANSACTIONS.&#39;Cloud&#39;, q3_PYTRANSACTIONS.&#39;Cloud&#39;, q2_CYAVAILABILITY.&#39;Cloud&#39;, q2_PYAVAILABILITY.&#39;Cloud&#39;, q3_CYAVAILABILITY.&#39;Cloud&#39;, q3_PYAVAILABILITY.&#39;Cloud&#39;, q2_CYCUSTOMER.&#39;Cloud&#39;, q2_PYCUSTOMER.&#39;Cloud&#39;, q3_CYCUSTOMER.&#39;Cloud&#39;, q3_PYCUSTOMER.&#39;Cloud&#39;, q2_CYSHARE.&#39;Cloud&#39;, q2_PYSHARE.&#39;Cloud&#39;, q3_CYSHARE.&#39;Cloud&#39;, q3_PYSHARE.&#39;Cloud&#39;) as &#39;Cloud&#39;,  coalesce(sum(q2_CYACV.&#39;ACV&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} ACV Absolute&#39;, coalesce(sum(q3_CYACV.&#39;ACV&#39;), 0) as &#39;YTD ACV Absolute&#39;, ((coalesce(sum(q2_CYACV.&#39;ACV&#39;), 0) - coalesce(sum(q2_PYACV.&#39;ACV&#39;), 0)) / coalesce(sum(q2_PYACV.&#39;ACV&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} ACV Growth&#39;, ((coalesce(sum(q3_CYACV.&#39;ACV&#39;), 0) - coalesce(sum(q3_PYACV.&#39;ACV&#39;), 0)) / coalesce(sum(q3_PYACV.&#39;ACV&#39;), 0)) * 100 as &#39;YTD ACV Growth&#39;, coalesce(sum(q2_CYAOV.&#39;AOV&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AOV Absolute&#39;, coalesce(sum(q3_CYAOV.&#39;AOV&#39;), 0) as &#39;YTD AOV Absolute&#39;, ((coalesce(sum(q2_CYAOV.&#39;AOV&#39;), 0) - coalesce(sum(q2_PYAOV.&#39;AOV&#39;), 0)) / coalesce(sum(q2_PYAOV.&#39;AOV&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} AOV Growth&#39;, ((coalesce(sum(q3_CYAOV.&#39;AOV&#39;), 0) - coalesce(sum(q3_PYAOV.&#39;AOV&#39;), 0)) / coalesce(sum(q3_PYAOV.&#39;AOV&#39;), 0)) * 100 as &#39;YTD AOV Growth&#39;,last(MasterHierarchy.&#39;Level_1_Ranking&#39;) as &#39;Sort_Code&#39;, coalesce(sum(q2_CYATT.&#39;Attrition_Product&#39;),0) as &#39;Attrition_CY_Q2&#39;,coalesce(sum(q3_CYATT.&#39;Attrition_Product&#39;),0) as &#39;Attrition_CY_Q3&#39;,coalesce(round(sum(q2_CYATT.&#39;TTM_Product&#39;), 0), 0) as &#39;TTM_Product_CY_Q2&#39; ,coalesce(round(sum(q2_CYATT.&#39;AOV_twelve_month_ago&#39;), 0), 0) as &#39;AOV_twelve_month_ago_CY_Q2&#39;,coalesce(round(sum(q4_CYATT.&#39;TTM_Product&#39;), 0), 0) as &#39;TTM_Product_CY_Q3&#39; ,coalesce(round(sum(q4_CYATT.&#39;AOV_twelve_month_ago&#39;), 0), 0) as &#39;AOV_twelve_month_ago_CY_Q3&#39;,(coalesce(round(sum(q2_CYATT.&#39;TTM_Product&#39;), 0), 0) / coalesce(round(sum(q2_CYATT.&#39;AOV_twelve_month_ago&#39;), 0), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Attrition TTM Rate&#39;, (coalesce(round(sum(q4_CYATT.&#39;TTM_Product&#39;), 0), 0) / coalesce(round(sum(q4_CYATT.&#39;AOV_twelve_month_ago&#39;), 0), 0)) * 100 as &#39;YTD Attrition TTM Rate&#39;, coalesce(sum(q2_CYPipegen.&#39;Pipegen&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Pipegen Absolute&#39;, coalesce(sum(q3_CYPipegen.&#39;Pipegen&#39;), 0) as &#39;YTD Pipegen Absolute&#39;, ((coalesce(sum(q2_CYPipegen.&#39;Pipegen&#39;), 0) - coalesce(sum(q2_PYPipegen.&#39;Pipegen&#39;), 0)) / coalesce(sum(q2_PYPipegen.&#39;Pipegen&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Pipegen Growth&#39;, ((coalesce(sum(q3_CYPipegen.&#39;Pipegen&#39;), 0) - coalesce(sum(q3_PYPipegen.&#39;Pipegen&#39;), 0)) / coalesce(sum(q3_PYPipegen.&#39;Pipegen&#39;), 0)) * 100 as &#39;YTD Pipegen Growth&#39;, coalesce(sum(q2_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Red_Accounts Absolute&#39;, coalesce(sum(q3_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) as &#39;YTD Red_Accounts Absolute&#39;, ((coalesce(sum(q2_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) - coalesce(sum(q2_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) / coalesce(sum(q2_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Red_Accounts Growth&#39;, ((coalesce(sum(q3_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) - coalesce(sum(q3_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) / coalesce(sum(q3_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) * 100 as &#39;YTD Red_Accounts Growth&#39;, coalesce(sum(q2_CYT_P.&#39;CTS_L1&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} CTS Absolute&#39;, coalesce(sum(q3_CYT_P.&#39;CTS_L1&#39;), 0) as &#39;YTD CTS Absolute&#39;, coalesce(sum(q2_CYT_P.&#39;CTS1_L1&#39;), 0) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} CTS Growth&#39;, coalesce(sum(q3_CYT_P.&#39;CTS1_L1&#39;), 0)  * 100 as &#39;YTD CTS Growth&#39;, coalesce(sum(q2_CYAVAILABILITY.&#39;Availability1&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Availability Absolute&#39;, coalesce(sum(q3_CYAVAILABILITY.&#39;Availability1&#39;), 0) as &#39;YTD Availability Absolute&#39;, ((coalesce(sum(q2_CYAVAILABILITY.&#39;Availability1&#39;), 0) - coalesce(sum(q2_PYAVAILABILITY.&#39;Availability1&#39;), 0)) / coalesce(sum(q2_PYAVAILABILITY.&#39;Availability1&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Availability Growth&#39;, ((coalesce(sum(q3_CYAVAILABILITY.&#39;Availability1&#39;), 0) - coalesce(sum(q3_PYAVAILABILITY.&#39;Availability1&#39;), 0)) / coalesce(sum(q3_PYAVAILABILITY.&#39;Availability1&#39;), 0)) * 100 as &#39;YTD Availability Growth&#39;, coalesce(sum(q2_CYTRANSACTIONS.&#39;Transactions&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Transactions Absolute&#39;, coalesce(sum(q3_CYTRANSACTIONS.&#39;Transactions&#39;), 0) as &#39;YTD Transactions Absolute&#39;, ((coalesce(sum(q2_CYTRANSACTIONS.&#39;Transactions&#39;), 0) - coalesce(sum(q2_PYTRANSACTIONS.&#39;Transactions&#39;), 0)) / coalesce(sum(q2_PYTRANSACTIONS.&#39;Transactions&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Transactions Growth&#39;, ((coalesce(sum(q3_CYTRANSACTIONS.&#39;Transactions&#39;), 0) - coalesce(sum(q3_PYTRANSACTIONS.&#39;Transactions&#39;), 0)) / coalesce(sum(q3_PYTRANSACTIONS.&#39;Transactions&#39;), 0)) * 100 as &#39;YTD Transactions Growth&#39;, coalesce(sum(q2_CYCUSTOMER.&#39;Customer&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Customer Absolute&#39;, coalesce(sum(q3_CYCUSTOMER.&#39;Customer&#39;), 0) as &#39;YTD Customer Absolute&#39;, ((coalesce(sum(q2_CYCUSTOMER.&#39;Customer&#39;), 0) - coalesce(sum(q2_PYCUSTOMER.&#39;Customer&#39;), 0)) / coalesce(sum(q2_PYCUSTOMER.&#39;Customer&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Customer Growth&#39;, ((coalesce(sum(q3_CYCUSTOMER.&#39;Customer&#39;), 0) - coalesce(sum(q3_PYCUSTOMER.&#39;Customer&#39;), 0)) / coalesce(sum(q3_PYCUSTOMER.&#39;Customer&#39;), 0)) * 100 as &#39;YTD Customer Growth&#39;, coalesce(sum(q2_CYSHARE.&#39;TAM&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} TAM Absolute&#39;, coalesce(sum(q3_CYSHARE.&#39;TAM&#39;), 0) as &#39;YTD TAM Absolute&#39;, ((coalesce(sum(q2_CYSHARE.&#39;TAM&#39;), 0) - coalesce(sum(q2_PYSHARE.&#39;TAM&#39;), 0)) / coalesce(sum(q2_PYSHARE.&#39;TAM&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} TAM Growth&#39;, ((coalesce(sum(q3_CYSHARE.&#39;TAM&#39;), 0) - coalesce(sum(q3_PYSHARE.&#39;TAM&#39;), 0)) / coalesce(sum(q3_PYSHARE.&#39;TAM&#39;), 0)) * 100 as &#39;YTD TAM Growth&#39;,coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE Absolute&#39;, coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) as &#39;YTD SE Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) - coalesce(sum(q2_PYHC.&#39;SE&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;SE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SE Growth&#39;, ((coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) - coalesce(sum(q3_PYHC.&#39;SE&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;SE&#39;), 0)) * 100 as &#39;YTD SE Growth&#39;,(power(coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;SE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;SE&#39;), 0),(1/2))-1)*100 as &#39;YTD SE CAGR&#39;, coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE Absolute&#39;, coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) as &#39;YTD AE Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) - coalesce(sum(q2_PYHC.&#39;AE&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;AE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} AE Growth&#39;, ((coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) - coalesce(sum(q3_PYHC.&#39;AE&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;AE&#39;), 0)) * 100 as &#39;YTD AE Growth&#39;, (power(coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;AE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;AE&#39;), 0),(1/2))-1)*100 as &#39;YTD AE CAGR&#39;,coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime Absolute&#39;, coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) as &#39;YTD Co_Prime Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) - coalesce(sum(q2_PYHC.&#39;Co_Prime&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;Co_Prime&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Co_Prime Growth&#39;, ((coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) - coalesce(sum(q3_PYHC.&#39;Co_Prime&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;Co_Prime&#39;), 0)) * 100 as &#39;YTD Co_Prime Growth&#39;,(power(coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;Co_Prime&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;Co_Prime&#39;), 0),(1/2))-1)*100 as &#39;YTD Co_Prime CAGR&#39;, coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE Absolute&#39;, coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) as &#39;YTD SWE Absolute&#39;, ((coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) - coalesce(sum(q2_PYSW.&#39;SWE&#39;), 0)) / coalesce(sum(q2_PYSW.&#39;SWE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SWE Growth&#39;, ((coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) - coalesce(sum(q3_PYSW.&#39;SWE&#39;), 0)) / coalesce(sum(q3_PYSW.&#39;SWE&#39;), 0)) * 100 as &#39;YTD SWE Growth&#39;,(power(coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) / coalesce(sum(q2_PY_2_SW.&#39;SWE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE CAGR&#39;,(power(coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) / coalesce(sum(q3_PY_2_SW.&#39;SWE&#39;), 0),(1/2))-1)*100 as &#39;YTD SWE CAGR&#39;, coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA Absolute&#39;, coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) as &#39;YTD INFRA Absolute&#39;, ((coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) - coalesce(sum(q2_PYSW.&#39;INFRA&#39;), 0)) / coalesce(sum(q2_PYSW.&#39;INFRA&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} INFRA Growth&#39;, ((coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) - coalesce(sum(q3_PYSW.&#39;INFRA&#39;), 0)) / coalesce(sum(q3_PYSW.&#39;INFRA&#39;), 0)) * 100 as &#39;YTD INFRA Growth&#39;,(power(coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) / coalesce(sum(q2_PY_2_SW.&#39;INFRA&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA CAGR&#39;,(power(coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) / coalesce(sum(q3_PY_2_SW.&#39;INFRA&#39;), 0),(1/2))-1)*100 as &#39;YTD INFRA CAGR&#39;;\nnresult_SubCloud = group q2_CYACV by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_PYACV by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_CYACV by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PYACV by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_CYAOV by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_PYAOV by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_CYAOV by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PYAOV by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q2_CYATT by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_PYATT by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_CYATT by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PYATT by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q4_CYATT by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_CYPipegen by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_PYPipegen by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_CYPipegen by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PYPipegen by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q2_CYHC by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_PYHC by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q2_PY_2_HC by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_CYHC by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PYHC by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PY_2_HC by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full ,q2_CYSW by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_PYSW by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q2_PY_2_SW by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_CYSW by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PYSW by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PY_2_SW by (&#39;Cloud&#39;, &#39;Subcloud&#39;)full, q2_CYREDACCOUNTS by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_PYREDACCOUNTS by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q2_PY_2_REDACCOUNTS by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_CYREDACCOUNTS by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PYREDACCOUNTS by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q3_PY_2_REDACCOUNTS by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_CYT_P by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_PYT_P by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q2_PY_2_T_P by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_CYT_P by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PYT_P by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q3_PY_2_T_P by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_CYAVAILABILITY by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_PYAVAILABILITY by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q2_PY_2_AVAILABILITY by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_CYAVAILABILITY by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PYAVAILABILITY by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q3_PY_2_AVAILABILITY by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_CYTRANSACTIONS by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_PYTRANSACTIONS by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q2_PY_2_TRANSACTIONS by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_CYTRANSACTIONS by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PYTRANSACTIONS by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q3_PY_2_TRANSACTIONS by (&#39;Cloud&#39;, &#39;Subcloud&#39;)  full, q2_CYCUSTOMER by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_PYCUSTOMER by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q2_PY_2_CUSTOMER by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_CYCUSTOMER by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PYCUSTOMER by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q3_PY_2_CUSTOMER by (&#39;Cloud&#39;, &#39;Subcloud&#39;)full, q2_CYSHARE by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_PYSHARE by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q2_PY_2_SHARE by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_CYSHARE by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PYSHARE by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q3_PY_2_SHARE by (&#39;Cloud&#39;, &#39;Subcloud&#39;),MasterHierarchy by (&#39;Level_1&#39;, &#39;Level_2&#39;) ;\nn\nresult_SubCloud = foreach result_SubCloud generate &quot;    ↳  &quot; + coalesce(MasterHierarchy.&#39;Level_2&#39;, q2_CYACV.&#39;Subcloud&#39;, q2_PYACV.&#39;Subcloud&#39;, q3_CYACV.&#39;Subcloud&#39;, q3_PYACV.&#39;Subcloud&#39;, q2_CYAOV.&#39;Subcloud&#39;, q2_PYAOV.&#39;Subcloud&#39;, q3_CYAOV.&#39;Subcloud&#39;, q3_PYAOV.&#39;Subcloud&#39;,q2_CYREDACCOUNTS.&#39;Subcloud&#39;, q2_PYREDACCOUNTS.&#39;Subcloud&#39;, q3_CYREDACCOUNTS.&#39;Subcloud&#39;, q3_PYREDACCOUNTS.&#39;Subcloud&#39;, q2_CYT_P.&#39;Subcloud&#39;, q2_PYT_P.&#39;Subcloud&#39;, q3_CYT_P.&#39;Subcloud&#39;, q3_PYT_P.&#39;Subcloud&#39;, q2_CYAVAILABILITY.&#39;Subcloud&#39;, q2_PYAVAILABILITY.&#39;Subcloud&#39;, q3_CYAVAILABILITY.&#39;Subcloud&#39;, q3_PYAVAILABILITY.&#39;Subcloud&#39;, q2_CYTRANSACTIONS.&#39;Subcloud&#39;, q2_PYTRANSACTIONS.&#39;Subcloud&#39;, q3_CYTRANSACTIONS.&#39;Subcloud&#39;, q3_PYTRANSACTIONS.&#39;Subcloud&#39;, q2_CYAVAILABILITY.&#39;Subcloud&#39;, q2_PYAVAILABILITY.&#39;Subcloud&#39;, q3_CYAVAILABILITY.&#39;Subcloud&#39;, q3_PYAVAILABILITY.&#39;Subcloud&#39;, q2_CYCUSTOMER.&#39;Subcloud&#39;, q2_PYCUSTOMER.&#39;Subcloud&#39;, q3_CYCUSTOMER.&#39;Subcloud&#39;, q3_PYCUSTOMER.&#39;Subcloud&#39;, q2_CYSHARE.&#39;Subcloud&#39;, q2_PYSHARE.&#39;Subcloud&#39;, q3_CYSHARE.&#39;Subcloud&#39;, q3_PYSHARE.&#39;Subcloud&#39;) as &#39;Cloud&#39;,  coalesce(sum(q2_CYACV.&#39;ACV&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} ACV Absolute&#39;, coalesce(sum(q3_CYACV.&#39;ACV&#39;), 0) as &#39;YTD ACV Absolute&#39;, ((coalesce(sum(q2_CYACV.&#39;ACV&#39;), 0) - coalesce(sum(q2_PYACV.&#39;ACV&#39;), 0)) / coalesce(sum(q2_PYACV.&#39;ACV&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} ACV Growth&#39;, ((coalesce(sum(q3_CYACV.&#39;ACV&#39;), 0) - coalesce(sum(q3_PYACV.&#39;ACV&#39;), 0)) / coalesce(sum(q3_PYACV.&#39;ACV&#39;), 0)) * 100 as &#39;YTD ACV Growth&#39;, coalesce(sum(q2_CYAOV.&#39;AOV&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AOV Absolute&#39;, coalesce(sum(q3_CYAOV.&#39;AOV&#39;), 0) as &#39;YTD AOV Absolute&#39;, ((coalesce(sum(q2_CYAOV.&#39;AOV&#39;), 0) - coalesce(sum(q2_PYAOV.&#39;AOV&#39;), 0)) / coalesce(sum(q2_PYAOV.&#39;AOV&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} AOV Growth&#39;, ((coalesce(sum(q3_CYAOV.&#39;AOV&#39;), 0) - coalesce(sum(q3_PYAOV.&#39;AOV&#39;), 0)) / coalesce(sum(q3_PYAOV.&#39;AOV&#39;), 0)) * 100 as &#39;YTD AOV Growth&#39;, coalesce(sum(q2_CYPipegen.&#39;Pipegen&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Pipegen Absolute&#39;, coalesce(sum(q3_CYPipegen.&#39;Pipegen&#39;), 0) as &#39;YTD Pipegen Absolute&#39;, ((coalesce(sum(q2_CYPipegen.&#39;Pipegen&#39;), 0) - coalesce(sum(q2_PYPipegen.&#39;Pipegen&#39;), 0)) / coalesce(sum(q2_PYPipegen.&#39;Pipegen&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Pipegen Growth&#39;, ((coalesce(sum(q3_CYPipegen.&#39;Pipegen&#39;), 0) - coalesce(sum(q3_PYPipegen.&#39;Pipegen&#39;), 0)) / coalesce(sum(q3_PYPipegen.&#39;Pipegen&#39;), 0)) * 100 as &#39;YTD Pipegen Growth&#39;,coalesce(sum(q2_CYATT.&#39;Attrition_Product&#39;),0) as &#39;Attrition_CY_Q2&#39;,coalesce(sum(q3_CYATT.&#39;Attrition_Product&#39;),0) as &#39;Attrition_CY_Q3&#39;,coalesce(round(sum(q2_CYATT.&#39;TTM_Product&#39;), 0), 0) as &#39;TTM_Product_CY_Q2&#39; ,coalesce(round(sum(q2_CYATT.&#39;AOV_twelve_month_ago&#39;), 0), 0) as &#39;AOV_twelve_month_ago_CY_Q2&#39;,coalesce(round(sum(q4_CYATT.&#39;TTM_Product&#39;), 0), 0) as &#39;TTM_Product_CY_Q3&#39; ,coalesce(round(sum(q4_CYATT.&#39;AOV_twelve_month_ago&#39;), 0), 0) as &#39;AOV_twelve_month_ago_CY_Q3&#39;,(coalesce(round(sum(q2_CYATT.&#39;TTM_Product&#39;), 0), 0) / coalesce(round(sum(q2_CYATT.&#39;AOV_twelve_month_ago&#39;), 0), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Attrition TTM Rate&#39;, (coalesce(round(sum(q4_CYATT.&#39;TTM_Product&#39;), 0), 0) / coalesce(round(sum(q4_CYATT.&#39;AOV_twelve_month_ago&#39;), 0), 0)) * 100 as &#39;YTD Attrition TTM Rate&#39;, coalesce(sum(q2_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Red_Accounts Absolute&#39;, coalesce(sum(q3_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) as &#39;YTD Red_Accounts Absolute&#39;, ((coalesce(sum(q2_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) - coalesce(sum(q2_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) / coalesce(sum(q2_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Red_Accounts Growth&#39;, ((coalesce(sum(q3_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) - coalesce(sum(q3_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) / coalesce(sum(q3_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) * 100 as &#39;YTD Red_Accounts Growth&#39;, coalesce(sum(q2_CYT_P.&#39;CTS_L2&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} CTS Absolute&#39;, coalesce(sum(q3_CYT_P.&#39;CTS_L2&#39;), 0) as &#39;YTD CTS Absolute&#39;, coalesce(sum(q2_CYT_P.&#39;CTS1_L2&#39;), 0) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} CTS Growth&#39;, coalesce(sum(q3_CYT_P.&#39;CTS1_L2&#39;), 0)  * 100 as &#39;YTD CTS Growth&#39;, coalesce(sum(q2_CYAVAILABILITY.&#39;Availability2&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Availability Absolute&#39;, coalesce(sum(q3_CYAVAILABILITY.&#39;Availability2&#39;), 0) as &#39;YTD Availability Absolute&#39;, ((coalesce(sum(q2_CYAVAILABILITY.&#39;Availability2&#39;), 0) - coalesce(sum(q2_PYAVAILABILITY.&#39;Availability2&#39;), 0)) / coalesce(sum(q2_PYAVAILABILITY.&#39;Availability2&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Availability Growth&#39;, ((coalesce(sum(q3_CYAVAILABILITY.&#39;Availability2&#39;), 0) - coalesce(sum(q3_PYAVAILABILITY.&#39;Availability2&#39;), 0)) / coalesce(sum(q3_PYAVAILABILITY.&#39;Availability2&#39;), 0)) * 100 as &#39;YTD Availability Growth&#39;, coalesce(sum(q2_CYTRANSACTIONS.&#39;Transactions&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Transactions Absolute&#39;, coalesce(sum(q3_CYTRANSACTIONS.&#39;Transactions&#39;), 0) as &#39;YTD Transactions Absolute&#39;, ((coalesce(sum(q2_CYTRANSACTIONS.&#39;Transactions&#39;), 0) - coalesce(sum(q2_PYTRANSACTIONS.&#39;Transactions&#39;), 0)) / coalesce(sum(q2_PYTRANSACTIONS.&#39;Transactions&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Transactions Growth&#39;, ((coalesce(sum(q3_CYTRANSACTIONS.&#39;Transactions&#39;), 0) - coalesce(sum(q3_PYTRANSACTIONS.&#39;Transactions&#39;), 0)) / coalesce(sum(q3_PYTRANSACTIONS.&#39;Transactions&#39;), 0)) * 100 as &#39;YTD Transactions Growth&#39;, coalesce(sum(q2_CYCUSTOMER.&#39;Customer&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Customer Absolute&#39;, coalesce(sum(q3_CYCUSTOMER.&#39;Customer&#39;), 0) as &#39;YTD Customer Absolute&#39;, ((coalesce(sum(q2_CYCUSTOMER.&#39;Customer&#39;), 0) - coalesce(sum(q2_PYCUSTOMER.&#39;Customer&#39;), 0)) / coalesce(sum(q2_PYCUSTOMER.&#39;Customer&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Customer Growth&#39;, ((coalesce(sum(q3_CYCUSTOMER.&#39;Customer&#39;), 0) - coalesce(sum(q3_PYCUSTOMER.&#39;Customer&#39;), 0)) / coalesce(sum(q3_PYCUSTOMER.&#39;Customer&#39;), 0)) * 100 as &#39;YTD Customer Growth&#39;, coalesce(sum(q2_CYSHARE.&#39;TAM&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} TAM Absolute&#39;, coalesce(sum(q3_CYSHARE.&#39;TAM&#39;), 0) as &#39;YTD TAM Absolute&#39;, ((coalesce(sum(q2_CYSHARE.&#39;TAM&#39;), 0) - coalesce(sum(q2_PYSHARE.&#39;TAM&#39;), 0)) / coalesce(sum(q2_PYSHARE.&#39;TAM&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} TAM Growth&#39;, ((coalesce(sum(q3_CYSHARE.&#39;TAM&#39;), 0) - coalesce(sum(q3_PYSHARE.&#39;TAM&#39;), 0)) / coalesce(sum(q3_PYSHARE.&#39;TAM&#39;), 0)) * 100 as &#39;YTD TAM Growth&#39;, coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE Absolute&#39;, coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) as &#39;YTD SE Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) - coalesce(sum(q2_PYHC.&#39;SE&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;SE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SE Growth&#39;, ((coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) - coalesce(sum(q3_PYHC.&#39;SE&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;SE&#39;), 0)) * 100 as &#39;YTD SE Growth&#39;,(power(coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;SE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;SE&#39;), 0),(1/2))-1)*100 as &#39;YTD SE CAGR&#39;, coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE Absolute&#39;, coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) as &#39;YTD AE Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) - coalesce(sum(q2_PYHC.&#39;AE&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;AE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} AE Growth&#39;, ((coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) - coalesce(sum(q3_PYHC.&#39;AE&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;AE&#39;), 0)) * 100 as &#39;YTD AE Growth&#39;, (power(coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;AE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;AE&#39;), 0),(1/2))-1)*100 as &#39;YTD AE CAGR&#39;,coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime Absolute&#39;, coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) as &#39;YTD Co_Prime Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) - coalesce(sum(q2_PYHC.&#39;Co_Prime&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;Co_Prime&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Co_Prime Growth&#39;, ((coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) - coalesce(sum(q3_PYHC.&#39;Co_Prime&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;Co_Prime&#39;), 0)) * 100 as &#39;YTD Co_Prime Growth&#39;,(power(coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;Co_Prime&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;Co_Prime&#39;), 0),(1/2))-1)*100 as &#39;YTD Co_Prime CAGR&#39;, coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE Absolute&#39;, coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) as &#39;YTD SWE Absolute&#39;, ((coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) - coalesce(sum(q2_PYSW.&#39;SWE&#39;), 0)) / coalesce(sum(q2_PYSW.&#39;SWE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SWE Growth&#39;, ((coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) - coalesce(sum(q3_PYSW.&#39;SWE&#39;), 0)) / coalesce(sum(q3_PYSW.&#39;SWE&#39;), 0)) * 100 as &#39;YTD SWE Growth&#39;,(power(coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) / coalesce(sum(q2_PY_2_SW.&#39;SWE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE CAGR&#39;,(power(coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) / coalesce(sum(q3_PY_2_SW.&#39;SWE&#39;), 0),(1/2))-1)*100 as &#39;YTD SWE CAGR&#39;, coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA Absolute&#39;, coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) as &#39;YTD INFRA Absolute&#39;, ((coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) - coalesce(sum(q2_PYSW.&#39;INFRA&#39;), 0)) / coalesce(sum(q2_PYSW.&#39;INFRA&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} INFRA Growth&#39;, ((coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) - coalesce(sum(q3_PYSW.&#39;INFRA&#39;), 0)) / coalesce(sum(q3_PYSW.&#39;INFRA&#39;), 0)) * 100 as &#39;YTD INFRA Growth&#39;,(power(coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) / coalesce(sum(q2_PY_2_SW.&#39;INFRA&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA CAGR&#39;,(power(coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) / coalesce(sum(q3_PY_2_SW.&#39;INFRA&#39;), 0),(1/2))-1)*100 as &#39;YTD INFRA CAGR&#39;,last(MasterHierarchy.&#39;Level_2_Sort_Code&#39;)  as &#39;Sort_Code&#39;;\nnresult_Cloud_Level3 = group  q2_CYACV by (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q2_PYACV by (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_CYACV by (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_PYACV by (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q2_CYAOV by (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q2_PYAOV by (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_CYAOV by (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_PYAOV by (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full,  q2_CYPipegen by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, q2_PYPipegen by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, q3_CYPipegen by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, q3_PYPipegen by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, q2_CYHC by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, q2_PYHC by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full,q2_PY_2_HC by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, q3_CYHC by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, q3_PYHC by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full,  q3_PY_2_HC by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, q2_CYSW by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, q2_PYSW by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full,q2_PY_2_SW by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, q3_CYSW by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, q3_PYSW by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full,  q3_PY_2_SW by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full,q2_CYATT by (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q2_PYATT by (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_CYATT by (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_PYATT by (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;)full, q2_CYREDACCOUNTS by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q2_PYREDACCOUNTS by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full,q2_PY_2_REDACCOUNTS by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_CYREDACCOUNTS by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_PYREDACCOUNTS by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full,q3_PY_2_REDACCOUNTS by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q2_CYT_P by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q2_PYT_P by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full,q2_PY_2_T_P by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_CYT_P by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_PYT_P by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full,q3_PY_2_T_P by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q2_CYAVAILABILITY by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q2_PYAVAILABILITY by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full,q2_PY_2_AVAILABILITY by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_CYAVAILABILITY by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_PYAVAILABILITY by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full,q3_PY_2_AVAILABILITY by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q2_CYTRANSACTIONS by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q2_PYTRANSACTIONS by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full,q2_PY_2_TRANSACTIONS by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_CYTRANSACTIONS by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_PYTRANSACTIONS by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full,q3_PY_2_TRANSACTIONS by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;)  full, q2_CYCUSTOMER by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q2_PYCUSTOMER by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full,q2_PY_2_CUSTOMER by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_CYCUSTOMER by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_PYCUSTOMER by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full,q3_PY_2_CUSTOMER by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;)full, q2_CYSHARE by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q2_PYSHARE by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full,q2_PY_2_SHARE by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_CYSHARE by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_PYSHARE by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full,q3_PY_2_SHARE by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;),MasterHierarchy by (&#39;Level_1&#39;, &#39;Level_2&#39;,&#39;Level_3&#39;)  ;\nn\nresult_Cloud_Level3 = foreach result_Cloud_Level3 generate &quot;          &quot; + coalesce(MasterHierarchy.&#39;Level_3&#39;, q2_CYACV.&#39;Cloud_2&#39;, q2_PYACV.&#39;Cloud_2&#39;, q3_CYACV.&#39;Cloud_2&#39;, q3_PYACV.&#39;Cloud_2&#39;, q2_CYAOV.&#39;Cloud_2&#39;, q2_PYAOV.&#39;Cloud_2&#39;, q3_CYAOV.&#39;Cloud_2&#39;, q3_PYAOV.&#39;Cloud_2&#39;,q2_CYREDACCOUNTS.&#39;Cloud_2&#39;, q2_PYREDACCOUNTS.&#39;Cloud_2&#39;, q3_CYREDACCOUNTS.&#39;Cloud_2&#39;, q3_PYREDACCOUNTS.&#39;Cloud_2&#39;, q2_CYT_P.&#39;Cloud_2&#39;, q2_PYT_P.&#39;Cloud_2&#39;, q3_CYT_P.&#39;Cloud_2&#39;, q3_PYT_P.&#39;Cloud_2&#39;, q2_CYAVAILABILITY.&#39;Cloud_2&#39;, q2_PYAVAILABILITY.&#39;Cloud_2&#39;, q3_CYAVAILABILITY.&#39;Cloud_2&#39;, q3_PYAVAILABILITY.&#39;Cloud_2&#39;, q2_CYTRANSACTIONS.&#39;Cloud_2&#39;, q2_PYTRANSACTIONS.&#39;Cloud_2&#39;, q3_CYTRANSACTIONS.&#39;Cloud_2&#39;, q3_PYTRANSACTIONS.&#39;Cloud_2&#39;, q2_CYAVAILABILITY.&#39;Cloud_2&#39;, q2_PYAVAILABILITY.&#39;Cloud_2&#39;, q3_CYAVAILABILITY.&#39;Cloud_2&#39;, q3_PYAVAILABILITY.&#39;Cloud_2&#39;, q2_CYCUSTOMER.&#39;Cloud_2&#39;, q2_PYCUSTOMER.&#39;Cloud_2&#39;, q3_CYCUSTOMER.&#39;Cloud_2&#39;, q3_PYCUSTOMER.&#39;Cloud_2&#39;, q2_CYSHARE.&#39;Cloud_2&#39;, q2_PYSHARE.&#39;Cloud_2&#39;, q3_CYSHARE.&#39;Cloud_2&#39;, q3_PYSHARE.&#39;Cloud_2&#39;) as &#39;Cloud&#39;,  coalesce(sum(q2_CYACV.&#39;ACV&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} ACV Absolute&#39;, coalesce(sum(q3_CYACV.&#39;ACV&#39;), 0) as &#39;YTD ACV Absolute&#39;, ((coalesce(sum(q2_CYACV.&#39;ACV&#39;), 0) - coalesce(sum(q2_PYACV.&#39;ACV&#39;), 0)) / coalesce(sum(q2_PYACV.&#39;ACV&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} ACV Growth&#39;, ((coalesce(sum(q3_CYACV.&#39;ACV&#39;), 0) - coalesce(sum(q3_PYACV.&#39;ACV&#39;), 0)) / coalesce(sum(q3_PYACV.&#39;ACV&#39;), 0)) * 100 as &#39;YTD ACV Growth&#39;, coalesce(sum(q2_CYAOV.&#39;AOV&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AOV Absolute&#39;, coalesce(sum(q3_CYAOV.&#39;AOV&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} YTD AOV Absolute&#39;, ((coalesce(sum(q2_CYAOV.&#39;AOV&#39;), 0) - coalesce(sum(q2_PYAOV.&#39;AOV&#39;), 0)) / coalesce(sum(q2_PYAOV.&#39;AOV&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} AOV Growth&#39;, ((coalesce(sum(q3_CYAOV.&#39;AOV&#39;), 0) - coalesce(sum(q3_PYAOV.&#39;AOV&#39;), 0)) / coalesce(sum(q3_PYAOV.&#39;AOV&#39;), 0)) * 100 as &#39;YTD AOV Growth&#39;, coalesce(sum(q2_CYPipegen.&#39;Pipegen&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Pipegen Absolute&#39;, coalesce(sum(q3_CYPipegen.&#39;Pipegen&#39;), 0) as &#39;YTD Pipegen Absolute&#39;, ((coalesce(sum(q2_CYPipegen.&#39;Pipegen&#39;), 0) - coalesce(sum(q2_PYPipegen.&#39;Pipegen&#39;), 0)) / coalesce(sum(q2_PYPipegen.&#39;Pipegen&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Pipegen Growth&#39;, ((coalesce(sum(q3_CYPipegen.&#39;Pipegen&#39;), 0) - coalesce(sum(q3_PYPipegen.&#39;Pipegen&#39;), 0)) / coalesce(sum(q3_PYPipegen.&#39;Pipegen&#39;), 0)) * 100 as &#39;YTD Pipegen Growth&#39;, coalesce(sum(q2_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Red_Accounts Absolute&#39;, coalesce(sum(q3_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) as &#39;YTD Red_Accounts Absolute&#39;, ((coalesce(sum(q2_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) - coalesce(sum(q2_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) / coalesce(sum(q2_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Red_Accounts Growth&#39;, ((coalesce(sum(q3_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) - coalesce(sum(q3_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) / coalesce(sum(q3_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) * 100 as &#39;YTD Red_Accounts Growth&#39;, coalesce(sum(q2_CYT_P.&#39;CTS_L3&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} CTS Absolute&#39;, coalesce(sum(q3_CYT_P.&#39;CTS_L3&#39;), 0) as &#39;YTD CTS Absolute&#39;, coalesce(sum(q2_CYT_P.&#39;CTS1_L3&#39;), 0)  * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} CTS Growth&#39;, coalesce(sum(q3_CYT_P.&#39;CTS1_L3&#39;), 0)  * 100 as &#39;YTD CTS Growth&#39;, coalesce(sum(q2_CYAVAILABILITY.&#39;Availability3&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Availability Absolute&#39;, coalesce(sum(q3_CYAVAILABILITY.&#39;Availability3&#39;), 0) as &#39;YTD Availability Absolute&#39;, ((coalesce(sum(q2_CYAVAILABILITY.&#39;Availability3&#39;), 0) - coalesce(sum(q2_PYAVAILABILITY.&#39;Availability3&#39;), 0)) / coalesce(sum(q2_PYAVAILABILITY.&#39;Availability3&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Availability Growth&#39;, ((coalesce(sum(q3_CYAVAILABILITY.&#39;Availability3&#39;), 0) - coalesce(sum(q3_PYAVAILABILITY.&#39;Availability3&#39;), 0)) / coalesce(sum(q3_PYAVAILABILITY.&#39;Availability3&#39;), 0)) * 100 as &#39;YTD Availability Growth&#39;, coalesce(sum(q2_CYTRANSACTIONS.&#39;Transactions&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Transactions Absolute&#39;, coalesce(sum(q3_CYTRANSACTIONS.&#39;Transactions&#39;), 0) as &#39;YTD Transactions Absolute&#39;, ((coalesce(sum(q2_CYTRANSACTIONS.&#39;Transactions&#39;), 0) - coalesce(sum(q2_PYTRANSACTIONS.&#39;Transactions&#39;), 0)) / coalesce(sum(q2_PYTRANSACTIONS.&#39;Transactions&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Transactions Growth&#39;, ((coalesce(sum(q3_CYTRANSACTIONS.&#39;Transactions&#39;), 0) - coalesce(sum(q3_PYTRANSACTIONS.&#39;Transactions&#39;), 0)) / coalesce(sum(q3_PYTRANSACTIONS.&#39;Transactions&#39;), 0)) * 100 as &#39;YTD Transactions Growth&#39;, coalesce(sum(q2_CYCUSTOMER.&#39;Customer&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Customer Absolute&#39;, coalesce(sum(q3_CYCUSTOMER.&#39;Customer&#39;), 0) as &#39;YTD Customer Absolute&#39;, ((coalesce(sum(q2_CYCUSTOMER.&#39;Customer&#39;), 0) - coalesce(sum(q2_PYCUSTOMER.&#39;Customer&#39;), 0)) / coalesce(sum(q2_PYCUSTOMER.&#39;Customer&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Customer Growth&#39;, ((coalesce(sum(q3_CYCUSTOMER.&#39;Customer&#39;), 0) - coalesce(sum(q3_PYCUSTOMER.&#39;Customer&#39;), 0)) / coalesce(sum(q3_PYCUSTOMER.&#39;Customer&#39;), 0)) * 100 as &#39;YTD Customer Growth&#39;, coalesce(sum(q2_CYSHARE.&#39;TAM&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} TAM Absolute&#39;, coalesce(sum(q3_CYSHARE.&#39;TAM&#39;), 0) as &#39;YTD TAM Absolute&#39;, ((coalesce(sum(q2_CYSHARE.&#39;TAM&#39;), 0) - coalesce(sum(q2_PYSHARE.&#39;TAM&#39;), 0)) / coalesce(sum(q2_PYSHARE.&#39;TAM&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} TAM Growth&#39;, ((coalesce(sum(q3_CYSHARE.&#39;TAM&#39;), 0) - coalesce(sum(q3_PYSHARE.&#39;TAM&#39;), 0)) / coalesce(sum(q3_PYSHARE.&#39;TAM&#39;), 0)) * 100 as &#39;YTD TAM Growth&#39;, coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE Absolute&#39;, coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) as &#39;YTD SE Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) - coalesce(sum(q2_PYHC.&#39;SE&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;SE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SE Growth&#39;, ((coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) - coalesce(sum(q3_PYHC.&#39;SE&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;SE&#39;), 0)) * 100 as &#39;YTD SE Growth&#39;,(power(coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;SE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;SE&#39;), 0),(1/2))-1)*100 as &#39;YTD SE CAGR&#39;, coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE Absolute&#39;, coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) as &#39;YTD AE Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) - coalesce(sum(q2_PYHC.&#39;AE&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;AE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} AE Growth&#39;, ((coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) - coalesce(sum(q3_PYHC.&#39;AE&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;AE&#39;), 0)) * 100 as &#39;YTD AE Growth&#39;, (power(coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;AE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;AE&#39;), 0),(1/2))-1)*100 as &#39;YTD AE CAGR&#39;,coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime Absolute&#39;, coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) as &#39;YTD Co_Prime Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) - coalesce(sum(q2_PYHC.&#39;Co_Prime&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;Co_Prime&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Co_Prime Growth&#39;, ((coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) - coalesce(sum(q3_PYHC.&#39;Co_Prime&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;Co_Prime&#39;), 0)) * 100 as &#39;YTD Co_Prime Growth&#39;,(power(coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;Co_Prime&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;Co_Prime&#39;), 0),(1/2))-1)*100 as &#39;YTD Co_Prime CAGR&#39;, coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE Absolute&#39;, coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) as &#39;YTD SWE Absolute&#39;, ((coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) - coalesce(sum(q2_PYSW.&#39;SWE&#39;), 0)) / coalesce(sum(q2_PYSW.&#39;SWE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SWE Growth&#39;, ((coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) - coalesce(sum(q3_PYSW.&#39;SWE&#39;), 0)) / coalesce(sum(q3_PYSW.&#39;SWE&#39;), 0)) * 100 as &#39;YTD SWE Growth&#39;,(power(coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) / coalesce(sum(q2_PY_2_SW.&#39;SWE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE CAGR&#39;,(power(coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) / coalesce(sum(q3_PY_2_SW.&#39;SWE&#39;), 0),(1/2))-1)*100 as &#39;YTD SWE CAGR&#39;, coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA Absolute&#39;, coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) as &#39;YTD INFRA Absolute&#39;, ((coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) - coalesce(sum(q2_PYSW.&#39;INFRA&#39;), 0)) / coalesce(sum(q2_PYSW.&#39;INFRA&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} INFRA Growth&#39;, ((coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) - coalesce(sum(q3_PYSW.&#39;INFRA&#39;), 0)) / coalesce(sum(q3_PYSW.&#39;INFRA&#39;), 0)) * 100 as &#39;YTD INFRA Growth&#39;,(power(coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) / coalesce(sum(q2_PY_2_SW.&#39;INFRA&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA CAGR&#39;,(power(coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) / coalesce(sum(q3_PY_2_SW.&#39;INFRA&#39;), 0),(1/2))-1)*100 as &#39;YTD INFRA CAGR&#39;,last(MasterHierarchy.&#39;Level_3_Sort_Code&#39;)  as &#39;Sort_Code&#39;,&quot;          &quot; + coalesce(last(MasterHierarchy.&#39;Level_2&#39;), last(q2_CYACV.&#39;Subcloud&#39;), last(q2_PYACV.&#39;Subcloud&#39;), last(q3_CYACV.&#39;Subcloud&#39;), last(q3_PYACV.&#39;Subcloud&#39;), last(q2_CYAOV.&#39;Subcloud&#39;), last(q2_PYAOV.&#39;Subcloud&#39;), last(q3_CYAOV.&#39;Subcloud&#39;), last(q3_PYAOV.&#39;Subcloud&#39;)) as &#39;ParentCloud&#39;;\nresult_Cloud_Level3 = filter result_Cloud_Level3 by &#39;Cloud&#39; != &#39;ParentCloud&#39;;\nline =  group MasterHierarchy by &#39;all&#39;;line= foreach line generate &quot;----------------------------------------------------&quot; as &#39;Cloud&#39;,&quot;{{cell(Selector_Quarter.selection,0,&quot;Line_Rank&quot;).asString()}}&quot;  as &#39;Sort_Code&#39;;\nnFinal = union result, result_SubCloud, result_Cloud_Level3,line;\nnFinal = filter Final by &#39;Sort_Code&#39; != &quot;&quot;;\nFinal = filter Final by &#39;Cloud&#39; not in {{cell(Selector_Quarter.selection,0,&quot;Filter_Table_2&quot;).asString()}};\nFinal = order Final by (&#39;Sort_Code&#39; asc,  &#39;Cloud&#39; asc);\nFinal = foreach Final generate &#39;Cloud&#39;+&quot;                      &quot; as &#39;Cloud&#39;, &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE&#39;,&#39;YTD SWE Absolute&#39; as &#39;YTD SWE Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SWE Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SWE Growth&#39;,&#39;YTD SWE Growth&#39; as &#39;YTD SWE Growth&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA&#39;,&#39;YTD INFRA Absolute&#39; as &#39;YTD INFRA Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} INFRA Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} INFRA Growth&#39;,&#39;YTD INFRA Growth&#39; as &#39;YTD INFRA Growth&#39;, &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} CTS Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} CTS Absolute&#39;,&#39;YTD CTS Absolute&#39; as &#39;YTD CTS Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} CTS Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} CTS Growth&#39;,   &#39;YTD CTS Growth&#39; as  &#39;YTD CTS Growth&#39;, &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Availability Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Availability Absolute&#39;,&quot;&quot; as &#39;YTD Availability Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Availability Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Availability Growth&#39;,   &quot;&quot; as  &#39;YTD Availability Growth&#39;, &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Transactions Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Transactions Absolute&#39;,&#39;YTD Transactions Absolute&#39; as &#39;YTD Transactions Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Transactions Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Transactions Growth&#39;,   &#39;YTD Transactions Growth&#39; as  &#39;YTD Transactions Growth&#39;;;\n",
        "receiveFacet": true,
        "selectMode": "none",
        "strings": [],
        "type": "saql",
        "useGlobal": true,
        "visualizationParameters": {
          "parameters": {
            "autoFitMode": "none",
            "showValues": true,
            "bins": {
              "breakpoints": {
                "high": 100,
                "low": 0
              },
              "bands": {
                "high": {
                  "color": "#008000",
                  "label": ""
                },
                "low": {
                  "color": "#B22222",
                  "label": ""
                },
                "medium": {
                  "color": "#ffa500",
                  "label": ""
                }
              }
            },
            "legend": {
              "showHeader": true,
              "show": true,
              "customSize": "auto",
              "position": "right-top",
              "inside": false
            },
            "axisMode": "multi",
            "tooltip": {
              "showBinLabel": true,
              "measures": "",
              "showPercentage": true,
              "showDimensions": true,
              "showMeasures": true,
              "customizeTooltip": false,
              "dimensions": ""
            },
            "visualizationType": "hbar",
            "title": {
              "fontSize": 14,
              "subtitleFontSize": 11,
              "label": "",
              "align": "center",
              "subtitleLabel": ""
            },
            "binValues": false,
            "trellis": {
              "flipLabels": false,
              "showGridLines": true,
              "size": [
                100,
                100
              ],
              "enable": false,
              "type": "x",
              "chartsPerLine": 4
            },
            "measureAxis2": {
              "sqrtScale": false,
              "showTitle": true,
              "showAxis": true,
              "title": "",
              "customDomain": {
                "showDomain": false
              }
            },
            "measureAxis1": {
              "sqrtScale": false,
              "showTitle": true,
              "showAxis": true,
              "title": "",
              "customDomain": {
                "showDomain": false
              }
            },
            "theme": "wave",
            "dimensionAxis": {
              "showTitle": true,
              "customSize": "auto",
              "showAxis": true,
              "title": "",
              "icons": {
                "useIcons": false,
                "iconProps": {
                  "fit": "cover",
                  "column": "",
                  "type": "round"
                }
              }
            }
          },
          "type": "chart"
        }
      },
      "Table_Level_2_Measures_2": {
        "broadcastFacet": true,
        "groups": [],
        "label": "Table_Level_2_Measures_2",
        "numbers": [],
        "query": "MasterHierarchy = load &quot;Master_Hierarchy&quot;;\nMasterHierarchy = filter MasterHierarchy by &#39;Level_1&#39; in   {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\n\n---------------------LOAD/FILTER ACV---------------------\nACV = load &quot;APM_ACV&quot;;\nACV = filter ACV by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nACV = filter ACV by {{column(Filter_Lead_1.selection,[&quot;Lead_1&quot;]).asEquality(&#39;Lead_1&#39;)}};\nACV = filter ACV by {{column(Filter_Segment.selection,[&quot;Segment&quot;]).asEquality(&#39;Segment&#39;)}};\nACV = filter ACV by {{column(Filter_Industry.selection,[&quot;Industry&quot;]).asEquality(&#39;Industry&#39;)}};\nACV = filter ACV by {{column(Filter_Lead.selection,[&quot;Lead&quot;]).asEquality(&#39;Lead&#39;)}};\nACV = filter ACV by {{column(Filter_Cloud.selection,[&quot;Cloud&quot;]).asEquality(&#39;Cloud&#39;)}};\nACV = filter ACV by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nACV = group ACV by (&#39;Cloud&#39;,&#39;Cloud_2&#39;,&#39;Subcloud&#39;, &#39;Quarter&#39;,&#39;Month&#39;, &#39;Fiscal_Year&#39;, &#39;Region&#39; , &#39;Country&#39;);\n\nACV = foreach ACV generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39; ,&#39;Month&#39; as &#39;Month&#39;,sum(&#39;ACV&#39;) as &#39;ACV&#39;, &#39;Region&#39; as &#39;Region&#39;,  {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; ACV = filter ACV by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\n\nq2_CYACV = filter ACV by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}}  &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYACV = filter ACV by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}}  &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYACV = filter ACV by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;YTD_Month&quot;).asString()}}  &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYACV = filter ACV by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;YTD_Month&quot;).asString()}}  &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}} ;\n\n-----------------LOAD /FILTER HC-----------------------\nHC = load &quot;APM_HC&quot;;\nHC = filter HC by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nHC = foreach HC generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;SE&#39;) as &#39;SE&#39;, sum(&#39;AE&#39;) as &#39;AE&#39;, sum(&#39;Co_Prime&#39;) as &#39;Co_Prime&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; HC = filter HC by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\nHC = filter HC by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYHC = filter HC by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYHC = filter HC by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_HC = filter HC by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYHC = filter HC by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_HC&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYHC = filter HC by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_HC&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_HC = filter HC by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_HC&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n\n----------------------AE PARTICIPATION-----------------------------\nPARTICIPATION = load &quot;APM_AE&quot;;\nPARTICIPATION = filter PARTICIPATION by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nPARTICIPATION = filter PARTICIPATION by &#39;Region&#39; == &quot;N/A&quot;;\nPARTICIPATION = filter PARTICIPATION by &#39;Lead&#39; == &quot;N/A&quot;;\nPARTICIPATION = foreach PARTICIPATION generate &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Cloud_m1&#39;) as &#39;Cloud_m1&#39;, sum(&#39;Cloud_m2&#39;) as &#39;Cloud_m2&#39;, sum(&#39;Cloud_m3&#39;) as &#39;Cloud_m3&#39;, &#39;Region&#39; as &#39;Region&#39;,  {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39;; \nPARTICIPATION = filter PARTICIPATION by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\nPARTICIPATION = filter PARTICIPATION by &#39;Cloud&#39; in {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\n\nq2_CYPARTICIPATION = filter PARTICIPATION by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYPARTICIPATION = filter PARTICIPATION by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PY_2_PARTICIPATION = filter PARTICIPATION by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYPARTICIPATION = filter PARTICIPATION by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYPARTICIPATION = filter PARTICIPATION by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PY_2_PARTICIPATION = filter PARTICIPATION by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\n\n------------------------GROUPING LEVEL_1 -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nresult = group \nq2_CYACV by &#39;Cloud&#39; full, \nq2_PYACV by &#39;Cloud&#39; full, \nq3_CYACV by &#39;Cloud&#39; full, \nq3_PYACV by &#39;Cloud&#39; full, \n\nq2_CYHC by &#39;Cloud&#39; full, \nq2_PYHC by &#39;Cloud&#39; full,\nq2_PY_2_HC by &#39;Cloud&#39; full, \nq3_CYHC by &#39;Cloud&#39; full, \nq3_PYHC by &#39;Cloud&#39; full,\nq3_PY_2_HC by &#39;Cloud&#39; full,\n\nq2_CYPARTICIPATION by &#39;Cloud&#39; full, \nq2_PYPARTICIPATION by &#39;Cloud&#39; full, \nq2_PY_2_PARTICIPATION by &#39;Cloud&#39; full, \nq3_CYPARTICIPATION by &#39;Cloud&#39; full, \nq3_PYPARTICIPATION by &#39;Cloud&#39; full, \nq3_PY_2_PARTICIPATION by &#39;Cloud&#39; full, \n\nMasterHierarchy by &#39;Level_1&#39;;\n\n-------------------PROJECTION CLOUD-----------------------------------\nresult = foreach result generate \n&quot;☁ &quot; + coalesce(MasterHierarchy.&#39;Level_1&#39;, q2_CYACV.&#39;Cloud&#39;, q2_PYACV.&#39;Cloud&#39;, q3_CYACV.&#39;Cloud&#39;, q3_PYACV.&#39;Cloud&#39;) as &#39;Cloud&#39;,  \n\ncoalesce(sum(q2_CYACV.&#39;ACV&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} ACV Absolute&#39;, coalesce(sum(q3_CYACV.&#39;ACV&#39;), 0) as &#39;YTD ACV Absolute&#39;, ((coalesce(sum(q2_CYACV.&#39;ACV&#39;), 0) - coalesce(sum(q2_PYACV.&#39;ACV&#39;), 0)) / coalesce(sum(q2_PYACV.&#39;ACV&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} ACV Growth&#39;, ((coalesce(sum(q3_CYACV.&#39;ACV&#39;), 0) - coalesce(sum(q3_PYACV.&#39;ACV&#39;), 0)) / coalesce(sum(q3_PYACV.&#39;ACV&#39;), 0)) * 100 as &#39;YTD ACV Growth&#39;,\n\ncoalesce(sum(q2_CYHC.&#39;SE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE Absolute&#39;, \ncoalesce(sum(q3_CYHC.&#39;SE&#39;), 0) as &#39;YTD SE Absolute&#39;, \n((coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) - coalesce(sum(q2_PYHC.&#39;SE&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;SE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SE Growth&#39;, \n((coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) - coalesce(sum(q3_PYHC.&#39;SE&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;SE&#39;), 0)) * 100 as &#39;YTD SE Growth&#39;,\n(power(coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;SE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE CAGR&#39;,\n(power(coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;SE&#39;), 0),(1/2))-1)*100 as &#39;YTD SE CAGR&#39;, \n\ncoalesce(sum(q2_CYHC.&#39;AE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE Absolute&#39;, \ncoalesce(sum(q3_CYHC.&#39;AE&#39;), 0) as &#39;YTD AE Absolute&#39;, \n((coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) - coalesce(sum(q2_PYHC.&#39;AE&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;AE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} AE Growth&#39;, \n((coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) - coalesce(sum(q3_PYHC.&#39;AE&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;AE&#39;), 0)) * 100 as &#39;YTD AE Growth&#39;, \n(power(coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;AE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE CAGR&#39;,\n(power(coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;AE&#39;), 0),(1/2))-1)*100 as &#39;YTD AE CAGR&#39;,\n\ncoalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime Absolute&#39;, coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) as &#39;YTD Co_Prime Absolute&#39;, \n((coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) - coalesce(sum(q2_PYHC.&#39;Co_Prime&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;Co_Prime&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Co_Prime Growth&#39;, \n((coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) - coalesce(sum(q3_PYHC.&#39;Co_Prime&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;Co_Prime&#39;), 0)) * 100 as &#39;YTD Co_Prime Growth&#39;,\n(power(coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;Co_Prime&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime CAGR&#39;,\n(power(coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;Co_Prime&#39;), 0),(1/2))-1)*100 as &#39;YTD Co_Prime CAGR&#39;,\n\ncoalesce(sum(q2_CYPARTICIPATION.&#39;Cloud_m1&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Participation Absolute&#39;, \ncoalesce(sum(q3_CYPARTICIPATION.&#39;Cloud_m1&#39;), 0) as &#39;YTD Participation Absolute&#39;, \n((coalesce(sum(q2_CYPARTICIPATION.&#39;Cloud_m1&#39;), 0) - coalesce(sum(q2_PYPARTICIPATION.&#39;Cloud_m1&#39;), 0)) / coalesce(sum(q2_PYPARTICIPATION.&#39;Cloud_m1&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Participation Growth&#39;, \n((coalesce(sum(q3_CYPARTICIPATION.&#39;Cloud_m1&#39;), 0) - coalesce(sum(q3_PYPARTICIPATION.&#39;Cloud_m1&#39;), 0)) / coalesce(sum(q3_PYPARTICIPATION.&#39;Cloud_m1&#39;), 0)) * 100 as &#39;YTD Participation Growth&#39;\n\n;\n\n-------------------------------GROUPING LEVEL_2-------------------\nresult_SubCloud = group \nq2_CYACV by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, \nq2_PYACV by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, \nq3_CYACV by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, \nq3_PYACV by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, \n\nq2_CYHC by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, \nq2_PYHC by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,\nq2_PY_2_HC by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, \nq3_CYHC by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, \nq3_PYHC by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, \nq3_PY_2_HC by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full ,\n\nq2_CYPARTICIPATION by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, \nq2_PYPARTICIPATION by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, \nq2_PY_2_PARTICIPATION by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, \nq3_CYPARTICIPATION by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, \nq3_PYPARTICIPATION by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, \nq3_PY_2_PARTICIPATION by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, \n\nMasterHierarchy by (&#39;Level_1&#39;, &#39;Level_2&#39;) ;\n\n--------------------------------PROJECTION LEVEL_2------------------------------------\nresult_SubCloud = foreach result_SubCloud generate \n&quot;    ↳  &quot; + coalesce(MasterHierarchy.&#39;Level_2&#39;, q2_CYACV.&#39;Subcloud&#39;, q2_PYACV.&#39;Subcloud&#39;, q3_CYACV.&#39;Subcloud&#39;, q3_PYACV.&#39;Subcloud&#39;) as &#39;Cloud&#39;,  \n\ncoalesce(sum(q2_CYACV.&#39;ACV&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} ACV Absolute&#39;, coalesce(sum(q3_CYACV.&#39;ACV&#39;), 0) as &#39;YTD ACV Absolute&#39;, ((coalesce(sum(q2_CYACV.&#39;ACV&#39;), 0) - coalesce(sum(q2_PYACV.&#39;ACV&#39;), 0)) / coalesce(sum(q2_PYACV.&#39;ACV&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} ACV Growth&#39;, ((coalesce(sum(q3_CYACV.&#39;ACV&#39;), 0) - coalesce(sum(q3_PYACV.&#39;ACV&#39;), 0)) / coalesce(sum(q3_PYACV.&#39;ACV&#39;), 0)) * 100 as &#39;YTD ACV Growth&#39;, \n\ncoalesce(sum(q2_CYHC.&#39;SE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE Absolute&#39;, \ncoalesce(sum(q3_CYHC.&#39;SE&#39;), 0) as &#39;YTD SE Absolute&#39;, \n((coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) - coalesce(sum(q2_PYHC.&#39;SE&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;SE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SE Growth&#39;, \n((coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) - coalesce(sum(q3_PYHC.&#39;SE&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;SE&#39;), 0)) * 100 as &#39;YTD SE Growth&#39;,\n(power(coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;SE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE CAGR&#39;,\n(power(coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;SE&#39;), 0),(1/2))-1)*100 as &#39;YTD SE CAGR&#39;, \n\ncoalesce(sum(q2_CYHC.&#39;AE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE Absolute&#39;, \ncoalesce(sum(q3_CYHC.&#39;AE&#39;), 0) as &#39;YTD AE Absolute&#39;, \n((coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) - coalesce(sum(q2_PYHC.&#39;AE&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;AE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} AE Growth&#39;, \n((coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) - coalesce(sum(q3_PYHC.&#39;AE&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;AE&#39;), 0)) * 100 as &#39;YTD AE Growth&#39;, \n(power(coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;AE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE CAGR&#39;,\n(power(coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;AE&#39;), 0),(1/2))-1)*100 as &#39;YTD AE CAGR&#39;,\n\ncoalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime Absolute&#39;, \ncoalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) as &#39;YTD Co_Prime Absolute&#39;, \n((coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) - coalesce(sum(q2_PYHC.&#39;Co_Prime&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;Co_Prime&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Co_Prime Growth&#39;, \n((coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) - coalesce(sum(q3_PYHC.&#39;Co_Prime&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;Co_Prime&#39;), 0)) * 100 as &#39;YTD Co_Prime Growth&#39;,\n(power(coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;Co_Prime&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime CAGR&#39;,\n(power(coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;Co_Prime&#39;), 0),(1/2))-1)*100 as &#39;YTD Co_Prime CAGR&#39;, \n\ncoalesce(sum(q2_CYPARTICIPATION.&#39;Cloud_m2&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Participation Absolute&#39;, \ncoalesce(sum(q3_CYPARTICIPATION.&#39;Cloud_m2&#39;), 0) as &#39;YTD Participation Absolute&#39;, \n((coalesce(sum(q2_CYPARTICIPATION.&#39;Cloud_m2&#39;), 0) - coalesce(sum(q2_PYPARTICIPATION.&#39;Cloud_m2&#39;), 0)) / coalesce(sum(q2_PYPARTICIPATION.&#39;Cloud_m2&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Participation Growth&#39;, \n((coalesce(sum(q3_CYPARTICIPATION.&#39;Cloud_m2&#39;), 0) - coalesce(sum(q3_PYPARTICIPATION.&#39;Cloud_m2&#39;), 0)) / coalesce(sum(q3_PYPARTICIPATION.&#39;Cloud_m2&#39;), 0)) * 100 as &#39;YTD Participation Growth&#39;,\n\nlast(MasterHierarchy.&#39;Level_2_Sort_Code&#39;)  as &#39;Sort_Code&#39;;\nnresult_Cloud_Level3 = group  \nq2_CYACV by (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, \nq2_PYACV by (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, \nq3_CYACV by (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, \nq3_PYACV by (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, \n\nq2_CYHC by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, \nq2_PYHC by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full,\nq2_PY_2_HC by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, \nq3_CYHC by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, \nq3_PYHC by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full,  \nq3_PY_2_HC by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full,\n\nq2_CYPARTICIPATION by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, \nq2_PYPARTICIPATION by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, \nq2_PY_2_PARTICIPATION by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, \nq3_CYPARTICIPATION by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, \nq3_PYPARTICIPATION by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, \nq3_PY_2_PARTICIPATION by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full,  \n\nMasterHierarchy by (&#39;Level_1&#39;, &#39;Level_2&#39;,&#39;Level_3&#39;)  ;\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------PROJECTION LEVEL3-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nresult_Cloud_Level3 = foreach result_Cloud_Level3 generate \n&quot;          &quot; + coalesce(MasterHierarchy.&#39;Level_3&#39;, q2_CYACV.&#39;Cloud_2&#39;, q2_PYACV.&#39;Cloud_2&#39;, q3_CYACV.&#39;Cloud_2&#39;, q3_PYACV.&#39;Cloud_2&#39;) as &#39;Cloud&#39;,  \n\ncoalesce(sum(q2_CYACV.&#39;ACV&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} ACV Absolute&#39;, coalesce(sum(q3_CYACV.&#39;ACV&#39;), 0) as &#39;YTD ACV Absolute&#39;, ((coalesce(sum(q2_CYACV.&#39;ACV&#39;), 0) - coalesce(sum(q2_PYACV.&#39;ACV&#39;), 0)) / coalesce(sum(q2_PYACV.&#39;ACV&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} ACV Growth&#39;, ((coalesce(sum(q3_CYACV.&#39;ACV&#39;), 0) - coalesce(sum(q3_PYACV.&#39;ACV&#39;), 0)) / coalesce(sum(q3_PYACV.&#39;ACV&#39;), 0)) * 100 as &#39;YTD ACV Growth&#39;, \n\ncoalesce(sum(q2_CYHC.&#39;SE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE Absolute&#39;, \ncoalesce(sum(q3_CYHC.&#39;SE&#39;), 0) as &#39;YTD SE Absolute&#39;, \n((coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) - coalesce(sum(q2_PYHC.&#39;SE&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;SE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SE Growth&#39;, \n((coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) - coalesce(sum(q3_PYHC.&#39;SE&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;SE&#39;), 0)) * 100 as &#39;YTD SE Growth&#39;,\n(power(coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;SE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE CAGR&#39;,\n(power(coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;SE&#39;), 0),(1/2))-1)*100 as &#39;YTD SE CAGR&#39;, \n\ncoalesce(sum(q2_CYHC.&#39;AE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE Absolute&#39;, \ncoalesce(sum(q3_CYHC.&#39;AE&#39;), 0) as &#39;YTD AE Absolute&#39;, \n((coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) - coalesce(sum(q2_PYHC.&#39;AE&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;AE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} AE Growth&#39;, \n((coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) - coalesce(sum(q3_PYHC.&#39;AE&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;AE&#39;), 0)) * 100 as &#39;YTD AE Growth&#39;, \n(power(coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;AE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE CAGR&#39;,\n(power(coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;AE&#39;), 0),(1/2))-1)*100 as &#39;YTD AE CAGR&#39;,\n\ncoalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime Absolute&#39;, \ncoalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) as &#39;YTD Co_Prime Absolute&#39;, \n((coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) - coalesce(sum(q2_PYHC.&#39;Co_Prime&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;Co_Prime&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Co_Prime Growth&#39;, \n((coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) - coalesce(sum(q3_PYHC.&#39;Co_Prime&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;Co_Prime&#39;), 0)) * 100 as &#39;YTD Co_Prime Growth&#39;,\n(power(coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;Co_Prime&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime CAGR&#39;,\n(power(coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;Co_Prime&#39;), 0),(1/2))-1)*100 as &#39;YTD Co_Prime CAGR&#39;,\n\ncoalesce(sum(q2_CYPARTICIPATION.&#39;Cloud_m3&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Participation Absolute&#39;, \ncoalesce(sum(q3_CYPARTICIPATION.&#39;Cloud_m3&#39;), 0) as &#39;YTD Participation Absolute&#39;, \n((coalesce(sum(q2_CYPARTICIPATION.&#39;Cloud_m3&#39;), 0) - coalesce(sum(q2_PYPARTICIPATION.&#39;Cloud_m3&#39;), 0)) / coalesce(sum(q2_PYPARTICIPATION.&#39;Cloud_m3&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Participation Growth&#39;, \n((coalesce(sum(q3_CYPARTICIPATION.&#39;Cloud_m3&#39;), 0) - coalesce(sum(q3_PYPARTICIPATION.&#39;Cloud_m3&#39;), 0)) / coalesce(sum(q3_PYPARTICIPATION.&#39;Cloud_m3&#39;), 0)) * 100 as &#39;YTD Participation Growth&#39;,\n\nlast(MasterHierarchy.&#39;Level_3_Sort_Code&#39;)  as &#39;Sort_Code&#39;,\n&quot;          &quot; + coalesce(last(MasterHierarchy.&#39;Level_2&#39;), last(q2_CYACV.&#39;Subcloud&#39;), last(q2_PYACV.&#39;Subcloud&#39;), last(q3_CYACV.&#39;Subcloud&#39;), last(q3_PYACV.&#39;Subcloud&#39;) ) as &#39;ParentCloud&#39;;\n\nresult_Cloud_Level3 = filter result_Cloud_Level3 by &#39;Cloud&#39; != &#39;ParentCloud&#39;;\n\nline = group MasterHierarchy by &#39;all&#39;;\nline = foreach line generate &quot;----------------------------------------------------&quot; as &#39;Cloud&#39;,\n&quot;{{cell(Selector_Quarter.selection,0,&quot;Line_Rank&quot;).asString()}}&quot; as &#39;Sort_Code&#39;;\n\n-----------UNION-----------\nFinal = union result, result_SubCloud, result_Cloud_Level3,line;\n\n----------------------------FINAL PROJECTION ---------------------------\nFinal = filter Final by &#39;Sort_Code&#39; != &quot;&quot;;\nFinal = filter Final by &#39;Cloud&#39; not in {{cell(Selector_Quarter.selection,0,&quot;Filter_Table_2&quot;).asString()}};\nFinal = order Final by (&#39;Sort_Code&#39; asc,  &#39;Cloud&#39; asc);\nFinal = foreach Final generate \n&#39;Cloud&#39;+&quot;                      &quot; as &#39;Cloud&#39;,\n\n&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AEs&#39;,\n&#39;YTD AE Absolute&#39; as &#39;YTD AE Absolute&#39;,\n&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE CAGR&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE CAGR&#39;,\n&#39;YTD AE CAGR&#39; as &#39;YTD AE CAGR&#39;,\n\n&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime&#39;,\n&#39;YTD Co_Prime Absolute&#39; as &#39;YTD Co_Prime Absolute&#39;,\n&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime CAGR&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime CAGR&#39;,\n&#39;YTD Co_Prime CAGR&#39; as &#39;YTD Co_Prime CAGR&#39; , \n\n&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SEs&#39;,\n&#39;YTD SE Absolute&#39; as &#39;YTD SE Absolute&#39;,\n&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE CAGR&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE CAGR&#39;,\n&#39;YTD SE CAGR&#39; as &#39;YTD SE CAGR&#39;,\n\n&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Participation Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Participation Absolute&#39;,\n&#39;YTD Participation Absolute&#39; as &#39;YTD Participation Absolute&#39;,\n&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Participation Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Participation Growth&#39;,\n&#39;YTD Participation Growth&#39; as &#39;YTD Participation Growth&#39; ;\n",
        "receiveFacet": true,
        "selectMode": "none",
        "strings": [],
        "type": "saql",
        "useGlobal": true,
        "visualizationParameters": {
          "parameters": {
            "autoFitMode": "none",
            "showValues": true,
            "bins": {
              "breakpoints": {
                "high": 100,
                "low": 0
              },
              "bands": {
                "high": {
                  "color": "#008000",
                  "label": ""
                },
                "low": {
                  "color": "#B22222",
                  "label": ""
                },
                "medium": {
                  "color": "#ffa500",
                  "label": ""
                }
              }
            },
            "legend": {
              "showHeader": true,
              "show": true,
              "customSize": "auto",
              "position": "right-top",
              "inside": false
            },
            "axisMode": "multi",
            "tooltip": {
              "showBinLabel": true,
              "measures": "",
              "showPercentage": true,
              "showDimensions": true,
              "showMeasures": true,
              "customizeTooltip": false,
              "dimensions": ""
            },
            "visualizationType": "hbar",
            "title": {
              "fontSize": 14,
              "subtitleFontSize": 11,
              "label": "",
              "align": "center",
              "subtitleLabel": ""
            },
            "binValues": false,
            "trellis": {
              "flipLabels": false,
              "showGridLines": true,
              "size": [
                100,
                100
              ],
              "enable": false,
              "type": "x",
              "chartsPerLine": 4
            },
            "measureAxis2": {
              "sqrtScale": false,
              "showTitle": true,
              "showAxis": true,
              "title": "",
              "customDomain": {
                "showDomain": false
              }
            },
            "measureAxis1": {
              "sqrtScale": false,
              "showTitle": true,
              "showAxis": true,
              "title": "",
              "customDomain": {
                "showDomain": false
              }
            },
            "theme": "wave",
            "dimensionAxis": {
              "showTitle": true,
              "customSize": "auto",
              "showAxis": true,
              "title": "",
              "icons": {
                "useIcons": false,
                "iconProps": {
                  "fit": "cover",
                  "column": "",
                  "type": "round"
                }
              }
            }
          },
          "type": "chart"
        }
      },
      "Table_Level_2_Measures_1": {
        "broadcastFacet": true,
        "groups": [],
        "label": "Table_Level_2_Measures_1",
        "numbers": [],
        "query": "MasterHierarchy = load &quot;Master_Hierarchy&quot;;\nMasterHierarchy = filter MasterHierarchy by &#39;Level_1&#39; in   {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nnACV = load &quot;APM_ACV&quot;;\nACV = filter ACV by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nACV = filter ACV by {{column(Filter_Lead_1.selection,[&quot;Lead_1&quot;]).asEquality(&#39;Lead_1&#39;)}};\nACV = filter ACV by {{column(Filter_Segment.selection,[&quot;Segment&quot;]).asEquality(&#39;Segment&#39;)}};\nACV = filter ACV by {{column(Filter_Industry.selection,[&quot;Industry&quot;]).asEquality(&#39;Industry&#39;)}};\nACV = filter ACV by {{column(Filter_Lead.selection,[&quot;Lead&quot;]).asEquality(&#39;Lead&#39;)}};\nACV = filter ACV by {{column(Filter_Cloud.selection,[&quot;Cloud&quot;]).asEquality(&#39;Cloud&#39;)}};\nACV = filter ACV by &#39;Cloud&#39; in {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nACV = group ACV by (&#39;Cloud&#39;,&#39;Cloud_2&#39;,&#39;Subcloud&#39;, &#39;Quarter&#39;,&#39;Month&#39;, &#39;Fiscal_Year&#39;, &#39;Region&#39; , &#39;Country&#39;);\nACV = foreach ACV generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39; ,&#39;Month&#39; as &#39;Month&#39;,sum(&#39;ACV&#39;) as &#39;ACV&#39;, &#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; ACV = filter ACV by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\nq2_CYACV = filter ACV by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}}  &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYACV = filter ACV by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}}  &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYACV = filter ACV by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;YTD_Month&quot;).asString()}}  &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYACV = filter ACV by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;YTD_Month&quot;).asString()}}  &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}} ;\nnAOV = load &quot;APM_AOV&quot;;\nAOV = filter AOV by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nAOV = filter AOV by &#39;Cloud&#39; in{{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nAOV = group AOV by (&#39;Cloud&#39;,&#39;Subcloud&#39;, &#39;Cloud_2&#39;, &#39;Quarter&#39;, &#39;Month&#39;, &#39;Fiscal_Year&#39;, &#39;Region&#39; , &#39;Country&#39;);\nAOV = foreach AOV generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;AOV&#39;) as &#39;AOV&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39;; AOV = filter AOV by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\nq2_CYAOV = filter AOV by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}}  &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYAOV = filter AOV by &#39;Month&#39; in   {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}}  &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYAOV = filter AOV by &#39;Month&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Month_cum&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYAOV = filter AOV by &#39;Month&#39; in{{cell(Selector_Quarter.selection,0,&quot;YTD_Month_cum&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nnAttrition = load &quot;APM_Attrition&quot;;\nAttrition = filter Attrition by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\n--Attrition = filter Attrition by &#39;Segment&#39; != &quot;CSG&quot;;\nAttrition = filter Attrition by &#39;Cloud&#39; in   {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nAttrition = group Attrition by (&#39;Fiscal_Year&#39;,&#39;Quarter&#39;, &#39;Region&#39;, &#39;Cloud&#39;, &#39;Month&#39;,&#39;Subcloud&#39;, &#39;Cloud_2&#39;,&#39;Country&#39;);\nAttrition = foreach Attrition generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Attrition_Product&#39;)*-1 as &#39;Attrition_Product&#39;, sum(&#39;TTM_Product&#39;)*-1 as &#39;TTM_Product&#39;,sum(&#39;AOV_twelve_month_ago_Product&#39;) as &#39;AOV_twelve_month_ago&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; Attrition = filter Attrition by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}} ;\nq2_CYATT = filter Attrition by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}}  &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq2_PYATT = filter Attrition by &#39;Month&#39; in   {{cell(Selector_Quarter.selection,0,&quot;Month&quot;).asString()}}  &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_CYATT = filter Attrition by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;YTD_Month&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq3_PYATT = filter Attrition by &#39;Month&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Month&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\nq4_CYATT = filter Attrition by &#39;Month&#39; in  {{cell(Selector_Quarter.selection,0,&quot;YTD_Month_cum_attrit&quot;).asString()}} &amp;&amp; {{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}};\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD /FILTER PIPEGEN-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nPipegen = load &quot;APM_Pipegen1&quot;;\nPipegen = filter Pipegen by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nPipegen = group Pipegen by (&#39;Fiscal_Year&#39;,&#39;Quarter&#39;, &#39;Region&#39;, &#39;Cloud&#39;, &#39;Month&#39;,&#39;Subcloud&#39;, &#39;Cloud_2&#39;,&#39;Country&#39;);\nPipegen = foreach Pipegen generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Pipegen&#39;) as &#39;Pipegen&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; Pipegen = filter Pipegen by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\nPipegen = filter Pipegen by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYPipegen = filter Pipegen by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYPipegen = filter Pipegen by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYPipegen = filter Pipegen by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_pipegen&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYPipegen = filter Pipegen by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_pipegen&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nnHC = load &quot;APM_HC&quot;;\nHC = filter HC by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nHC = foreach HC generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;SE&#39;) as &#39;SE&#39;,sum(&#39;AE&#39;) as &#39;AE&#39;,sum(&#39;Co_Prime&#39;) as &#39;Co_Prime&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39;; HC = filter HC by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\nHC = filter HC by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYHC = filter HC by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYHC = filter HC by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_HC = filter HC by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYHC = filter HC by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_HC&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYHC = filter HC by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_HC&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_HC = filter HC by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_HC&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD SWE INFRA------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nSW = load &quot;APM_SWE_INFRA&quot;;\nSW = filter SW by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nSW = foreach SW generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;SWE&#39;) as &#39;SWE&#39;,sum(&#39;INFRA&#39;) as &#39;INFRA&#39;,&#39;Region&#39; as &#39;Region&#39;,{{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; SW = filter SW by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};;\nSW = filter SW by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYSW = filter SW by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYSW = filter SW by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_SW = filter SW by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYSW = filter SW by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_SW&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYSW = filter SW by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_SW&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_SW = filter SW by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter_SW&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD REDACCOUNTS------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nREDACCOUNTS = load &quot;APM_REDACCOUNTS&quot;;\nREDACCOUNTS = filter REDACCOUNTS by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nREDACCOUNTS = foreach REDACCOUNTS generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Red_Accounts&#39;) as &#39;Red_Accounts&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39;; REDACCOUNTS = filter REDACCOUNTS by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\nREDACCOUNTS = filter REDACCOUNTS by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYREDACCOUNTS = filter REDACCOUNTS by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYREDACCOUNTS = filter REDACCOUNTS by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_REDACCOUNTS = filter REDACCOUNTS by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYREDACCOUNTS = filter REDACCOUNTS by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYREDACCOUNTS = filter REDACCOUNTS by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_REDACCOUNTS = filter REDACCOUNTS by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD T_P T&amp;P Cost to Serve------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nT_P = load &quot;APM_T_P&quot;;\nT_P = filter T_P by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nT_P = foreach T_P generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;CTS&#39;) as &#39;CTS&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; T_P = filter T_P by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\nT_P = filter T_P by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYT_P = filter T_P by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYT_P = filter T_P by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_T_P = filter T_P by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYT_P = filter T_P by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYT_P = filter T_P by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_T_P = filter T_P by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD AVAILABILITY------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nAVAILABILITY = load &quot;APM_TECH_AVAILABILITY&quot;;\nAVAILABILITY = filter AVAILABILITY by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nAVAILABILITY = foreach AVAILABILITY generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Availability&#39;) as &#39;Availability&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; AVAILABILITY = filter AVAILABILITY by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\nAVAILABILITY = filter AVAILABILITY by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYAVAILABILITY = filter AVAILABILITY by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYAVAILABILITY = filter AVAILABILITY by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_AVAILABILITY = filter AVAILABILITY by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYAVAILABILITY = filter AVAILABILITY by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYAVAILABILITY = filter AVAILABILITY by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_AVAILABILITY = filter AVAILABILITY by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD TRANSACTIONS------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nTRANSACTIONS = load &quot;APM_T_P_Transactions&quot;;\nTRANSACTIONS = filter TRANSACTIONS by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nTRANSACTIONS = foreach TRANSACTIONS generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Transactions&#39;) as &#39;Transactions&#39;,&#39;Region&#39; as &#39;Region&#39;,{{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; TRANSACTIONS = filter TRANSACTIONS by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\nTRANSACTIONS = filter TRANSACTIONS by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYTRANSACTIONS = filter TRANSACTIONS by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYTRANSACTIONS = filter TRANSACTIONS by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_TRANSACTIONS = filter TRANSACTIONS by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYTRANSACTIONS = filter TRANSACTIONS by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYTRANSACTIONS = filter TRANSACTIONS by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_TRANSACTIONS = filter TRANSACTIONS by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD MARKET CUSTOMER------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nCUSTOMER = load &quot;APM_MARKET_CUSTOMER&quot;;\nCUSTOMER = filter CUSTOMER by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nCUSTOMER = foreach CUSTOMER generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;Customer&#39;) as &#39;Customer&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; CUSTOMER = filter CUSTOMER by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\nCUSTOMER = filter CUSTOMER by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYCUSTOMER = filter CUSTOMER by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYCUSTOMER = filter CUSTOMER by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_CUSTOMER = filter CUSTOMER by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYCUSTOMER = filter CUSTOMER by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYCUSTOMER = filter CUSTOMER by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_CUSTOMER = filter CUSTOMER by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------LOAD MARKET SHARE------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nSHARE= load &quot;APM_MARKET_SHARE&quot;;\nSHARE= filter SHARE by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Region&#39;)}};\nSHARE= foreach SHARE generate  &#39;Cloud&#39; as &#39;Cloud&#39;, &#39;Subcloud&#39; as &#39;Subcloud&#39;,&#39;Cloud_2&#39; as &#39;Cloud_2&#39;, &#39;Quarter&#39; as &#39;Quarter&#39;, &#39;Fiscal_Year&#39; as &#39;Fiscal_Year&#39;,&#39;Month&#39; as &#39;Month&#39; ,sum(&#39;TAM&#39;) as &#39;TAM&#39;,&#39;Region&#39; as &#39;Region&#39;, {{cell(Static_Cloud_Filter.selection,0,&quot;static_country_logic&quot;).asString()}} as &#39;Country&#39; ; SHARE= filter SHARE by  {{column(lens_1.selection,[&quot;Country&quot;]).asEquality(&#39;Country&#39;)}};\nSHARE = filter SHARE by &#39;Cloud&#39; in  {{cell(Static_Cloud_Filter.selection,0,&quot;filter&quot;).asString()}};\nq2_CYSHARE = filter SHARE by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PYSHARE = filter SHARE by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq2_PY_2_SHARE = filter SHARE by &#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;Quarter&quot;).asString()}} &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_CYSHARE = filter SHARE by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;CY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PYSHARE = filter SHARE by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nq3_PY_2_SHARE = filter SHARE by (&#39;Quarter&#39; in {{cell(Selector_Quarter.selection,0,&quot;YTD_Quarter&quot;).asString()}}) &amp;&amp; ({{cell(Fiscal_Year_1.selection,0,&quot;PY_2&quot;).asEquality(&#39;Fiscal_Year&#39;)}});\nnresult = group  q2_CYACV by &#39;Cloud&#39; full, q2_PYACV by &#39;Cloud&#39; full, q3_CYACV by &#39;Cloud&#39; full, q3_PYACV by &#39;Cloud&#39; full, q2_CYAOV by &#39;Cloud&#39; full, q2_PYAOV by &#39;Cloud&#39; full, q3_CYAOV by &#39;Cloud&#39; full, q3_PYAOV by &#39;Cloud&#39; full,  q2_CYATT by &#39;Cloud&#39; full, q2_PYATT by &#39;Cloud&#39; full, q3_CYATT by &#39;Cloud&#39; full, q3_PYATT by &#39;Cloud&#39; full,q4_CYATT by &#39;Cloud&#39; full, q2_CYPipegen by &#39;Cloud&#39; full, q2_PYPipegen by &#39;Cloud&#39; full, q3_CYPipegen by &#39;Cloud&#39; full, q3_PYPipegen by &#39;Cloud&#39;full,q2_CYHC by &#39;Cloud&#39; full, q2_PYHC by &#39;Cloud&#39; full,q2_PY_2_HC by &#39;Cloud&#39; full, q3_CYHC by &#39;Cloud&#39; full, q3_PYHC by &#39;Cloud&#39; full,q3_PY_2_HC by &#39;Cloud&#39; full, q2_CYSW by &#39;Cloud&#39; full, q2_PYSW by &#39;Cloud&#39; full,q2_PY_2_SW by &#39;Cloud&#39; full, q3_CYSW by &#39;Cloud&#39; full, q3_PYSW by &#39;Cloud&#39; full,q3_PY_2_SW by &#39;Cloud&#39;full, q2_CYREDACCOUNTS by &#39;Cloud&#39; full, q2_PYREDACCOUNTS by &#39;Cloud&#39; full,q2_PY_2_REDACCOUNTS by &#39;Cloud&#39; full, q3_CYREDACCOUNTS by &#39;Cloud&#39; full, q3_PYREDACCOUNTS by &#39;Cloud&#39; full,q3_PY_2_REDACCOUNTS by &#39;Cloud&#39; full, q2_CYT_P by &#39;Cloud&#39; full, q2_PYT_P by &#39;Cloud&#39; full,q2_PY_2_T_P by &#39;Cloud&#39; full, q3_CYT_P by &#39;Cloud&#39; full, q3_PYT_P by &#39;Cloud&#39; full,q3_PY_2_T_P by &#39;Cloud&#39; full, q2_CYAVAILABILITY by &#39;Cloud&#39; full, q2_PYAVAILABILITY by &#39;Cloud&#39; full,q2_PY_2_AVAILABILITY by &#39;Cloud&#39; full, q3_CYAVAILABILITY by &#39;Cloud&#39; full, q3_PYAVAILABILITY by &#39;Cloud&#39; full,q3_PY_2_AVAILABILITY by &#39;Cloud&#39; full, q2_CYTRANSACTIONS by &#39;Cloud&#39; full, q2_PYTRANSACTIONS by &#39;Cloud&#39; full,q2_PY_2_TRANSACTIONS by &#39;Cloud&#39; full, q3_CYTRANSACTIONS by &#39;Cloud&#39; full, q3_PYTRANSACTIONS by &#39;Cloud&#39; full,q3_PY_2_TRANSACTIONS by &#39;Cloud&#39;  full, q2_CYCUSTOMER by &#39;Cloud&#39; full, q2_PYCUSTOMER by &#39;Cloud&#39; full,q2_PY_2_CUSTOMER by &#39;Cloud&#39; full, q3_CYCUSTOMER by &#39;Cloud&#39; full, q3_PYCUSTOMER by &#39;Cloud&#39; full,q3_PY_2_CUSTOMER by &#39;Cloud&#39;full, q2_CYSHARE by &#39;Cloud&#39; full, q2_PYSHARE by &#39;Cloud&#39; full,q2_PY_2_SHARE by &#39;Cloud&#39; full, q3_CYSHARE by &#39;Cloud&#39; full, q3_PYSHARE by &#39;Cloud&#39; full,q3_PY_2_SHARE by &#39;Cloud&#39;,MasterHierarchy by &#39;Level_1&#39;;\nn;\nresult = foreach result generate  &quot;☁ &quot; + coalesce(MasterHierarchy.&#39;Level_1&#39;, q2_CYACV.&#39;Cloud&#39;, q2_PYACV.&#39;Cloud&#39;, q3_CYACV.&#39;Cloud&#39;, q3_PYACV.&#39;Cloud&#39;, q2_CYAOV.&#39;Cloud&#39;, q2_PYAOV.&#39;Cloud&#39;, q3_CYAOV.&#39;Cloud&#39;, q3_PYAOV.&#39;Cloud&#39;,q2_PYATT.&#39;Cloud&#39;,q2_CYATT.&#39;Cloud&#39;,q3_PYATT.&#39;Cloud&#39;,q3_CYATT.&#39;Cloud&#39;,q2_CYPipegen.&#39;Cloud&#39;, q2_PYPipegen.&#39;Cloud&#39;, q3_CYPipegen.&#39;Cloud&#39;, q3_PYPipegen.&#39;Cloud&#39;,q2_CYREDACCOUNTS.&#39;Cloud&#39;, q2_PYREDACCOUNTS.&#39;Cloud&#39;, q3_CYREDACCOUNTS.&#39;Cloud&#39;, q3_PYREDACCOUNTS.&#39;Cloud&#39;, q2_CYT_P.&#39;Cloud&#39;, q2_PYT_P.&#39;Cloud&#39;, q3_CYT_P.&#39;Cloud&#39;, q3_PYT_P.&#39;Cloud&#39;, q2_CYAVAILABILITY.&#39;Cloud&#39;, q2_PYAVAILABILITY.&#39;Cloud&#39;, q3_CYAVAILABILITY.&#39;Cloud&#39;, q3_PYAVAILABILITY.&#39;Cloud&#39;, q2_CYTRANSACTIONS.&#39;Cloud&#39;, q2_PYTRANSACTIONS.&#39;Cloud&#39;, q3_CYTRANSACTIONS.&#39;Cloud&#39;, q3_PYTRANSACTIONS.&#39;Cloud&#39;, q2_CYAVAILABILITY.&#39;Cloud&#39;, q2_PYAVAILABILITY.&#39;Cloud&#39;, q3_CYAVAILABILITY.&#39;Cloud&#39;, q3_PYAVAILABILITY.&#39;Cloud&#39;, q2_CYCUSTOMER.&#39;Cloud&#39;, q2_PYCUSTOMER.&#39;Cloud&#39;, q3_CYCUSTOMER.&#39;Cloud&#39;, q3_PYCUSTOMER.&#39;Cloud&#39;, q2_CYSHARE.&#39;Cloud&#39;, q2_PYSHARE.&#39;Cloud&#39;, q3_CYSHARE.&#39;Cloud&#39;, q3_PYSHARE.&#39;Cloud&#39;) as &#39;Cloud&#39;,  coalesce(sum(q2_CYACV.&#39;ACV&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} ACV Absolute&#39;, coalesce(sum(q3_CYACV.&#39;ACV&#39;), 0) as &#39;YTD ACV Absolute&#39;, ((coalesce(sum(q2_CYACV.&#39;ACV&#39;), 0) - coalesce(sum(q2_PYACV.&#39;ACV&#39;), 0)) / coalesce(sum(q2_PYACV.&#39;ACV&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} ACV Growth&#39;, ((coalesce(sum(q3_CYACV.&#39;ACV&#39;), 0) - coalesce(sum(q3_PYACV.&#39;ACV&#39;), 0)) / coalesce(sum(q3_PYACV.&#39;ACV&#39;), 0)) * 100 as &#39;YTD ACV Growth&#39;, coalesce(sum(q2_CYAOV.&#39;AOV&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AOV Absolute&#39;, coalesce(sum(q3_CYAOV.&#39;AOV&#39;), 0) as &#39;YTD AOV Absolute&#39;, ((coalesce(sum(q2_CYAOV.&#39;AOV&#39;), 0) - coalesce(sum(q2_PYAOV.&#39;AOV&#39;), 0)) / coalesce(sum(q2_PYAOV.&#39;AOV&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} AOV Growth&#39;, ((coalesce(sum(q3_CYAOV.&#39;AOV&#39;), 0) - coalesce(sum(q3_PYAOV.&#39;AOV&#39;), 0)) / coalesce(sum(q3_PYAOV.&#39;AOV&#39;), 0)) * 100 as &#39;YTD AOV Growth&#39;,last(MasterHierarchy.&#39;Level_1_Ranking&#39;) as &#39;Sort_Code&#39;, coalesce(sum(q2_CYATT.&#39;Attrition_Product&#39;),0) as &#39;Attrition_CY_Q2&#39;,coalesce(sum(q3_CYATT.&#39;Attrition_Product&#39;),0) as &#39;Attrition_CY_Q3&#39;,coalesce(round(sum(q2_CYATT.&#39;TTM_Product&#39;), 0), 0) as &#39;TTM_Product_CY_Q2&#39; ,coalesce(round(sum(q2_CYATT.&#39;AOV_twelve_month_ago&#39;), 0), 0) as &#39;AOV_twelve_month_ago_CY_Q2&#39;,coalesce(round(sum(q4_CYATT.&#39;TTM_Product&#39;), 0), 0) as &#39;TTM_Product_CY_Q3&#39; ,coalesce(round(sum(q4_CYATT.&#39;AOV_twelve_month_ago&#39;), 0), 0) as &#39;AOV_twelve_month_ago_CY_Q3&#39;,(coalesce(round(sum(q2_CYATT.&#39;TTM_Product&#39;), 0), 0) / coalesce(round(sum(q2_CYATT.&#39;AOV_twelve_month_ago&#39;), 0), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Attrition TTM Rate&#39;, (coalesce(round(sum(q4_CYATT.&#39;TTM_Product&#39;), 0), 0) / coalesce(round(sum(q4_CYATT.&#39;AOV_twelve_month_ago&#39;), 0), 0)) * 100 as &#39;YTD Attrition TTM Rate&#39;, coalesce(sum(q2_CYPipegen.&#39;Pipegen&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Pipegen Absolute&#39;, coalesce(sum(q3_CYPipegen.&#39;Pipegen&#39;), 0) as &#39;YTD Pipegen Absolute&#39;, ((coalesce(sum(q2_CYPipegen.&#39;Pipegen&#39;), 0) - coalesce(sum(q2_PYPipegen.&#39;Pipegen&#39;), 0)) / coalesce(sum(q2_PYPipegen.&#39;Pipegen&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Pipegen Growth&#39;, ((coalesce(sum(q3_CYPipegen.&#39;Pipegen&#39;), 0) - coalesce(sum(q3_PYPipegen.&#39;Pipegen&#39;), 0)) / coalesce(sum(q3_PYPipegen.&#39;Pipegen&#39;), 0)) * 100 as &#39;YTD Pipegen Growth&#39;, coalesce(sum(q2_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Red_Accounts Absolute&#39;, coalesce(sum(q3_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) as &#39;YTD Red_Accounts Absolute&#39;, ((coalesce(sum(q2_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) - coalesce(sum(q2_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) / coalesce(sum(q2_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Red_Accounts Growth&#39;, ((coalesce(sum(q3_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) - coalesce(sum(q3_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) / coalesce(sum(q3_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) * 100 as &#39;YTD Red_Accounts Growth&#39;, coalesce(sum(q2_CYT_P.&#39;CTS&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} CTS Absolute&#39;, coalesce(sum(q3_CYT_P.&#39;CTS&#39;), 0) as &#39;YTD CTS Absolute&#39;, ((coalesce(sum(q2_CYT_P.&#39;CTS&#39;), 0) - coalesce(sum(q2_PYT_P.&#39;CTS&#39;), 0)) / coalesce(sum(q2_PYT_P.&#39;CTS&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} CTS Growth&#39;, ((coalesce(sum(q3_CYT_P.&#39;CTS&#39;), 0) - coalesce(sum(q3_PYT_P.&#39;CTS&#39;), 0)) / coalesce(sum(q3_PYT_P.&#39;CTS&#39;), 0)) * 100 as &#39;YTD CTS Growth&#39;, coalesce(sum(q2_CYAVAILABILITY.&#39;Availability&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Availability Absolute&#39;, coalesce(sum(q3_CYAVAILABILITY.&#39;Availability&#39;), 0) as &#39;YTD Availability Absolute&#39;, ((coalesce(sum(q2_CYAVAILABILITY.&#39;Availability&#39;), 0) - coalesce(sum(q2_PYAVAILABILITY.&#39;Availability&#39;), 0)) / coalesce(sum(q2_PYAVAILABILITY.&#39;Availability&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Availability Growth&#39;, ((coalesce(sum(q3_CYAVAILABILITY.&#39;Availability&#39;), 0) - coalesce(sum(q3_PYAVAILABILITY.&#39;Availability&#39;), 0)) / coalesce(sum(q3_PYAVAILABILITY.&#39;Availability&#39;), 0)) * 100 as &#39;YTD Availability Growth&#39;, coalesce(sum(q2_CYTRANSACTIONS.&#39;Transactions&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Transactions Absolute&#39;, coalesce(sum(q3_CYTRANSACTIONS.&#39;Transactions&#39;), 0) as &#39;YTD Transactions Absolute&#39;, ((coalesce(sum(q2_CYTRANSACTIONS.&#39;Transactions&#39;), 0) - coalesce(sum(q2_PYTRANSACTIONS.&#39;Transactions&#39;), 0)) / coalesce(sum(q2_PYTRANSACTIONS.&#39;Transactions&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Transactions Growth&#39;, ((coalesce(sum(q3_CYTRANSACTIONS.&#39;Transactions&#39;), 0) - coalesce(sum(q3_PYTRANSACTIONS.&#39;Transactions&#39;), 0)) / coalesce(sum(q3_PYTRANSACTIONS.&#39;Transactions&#39;), 0)) * 100 as &#39;YTD Transactions Growth&#39;, coalesce(sum(q2_CYCUSTOMER.&#39;Customer&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Customer Absolute&#39;, coalesce(sum(q3_CYCUSTOMER.&#39;Customer&#39;), 0) as &#39;YTD Customer Absolute&#39;, ((coalesce(sum(q2_CYCUSTOMER.&#39;Customer&#39;), 0) - coalesce(sum(q2_PYCUSTOMER.&#39;Customer&#39;), 0)) / coalesce(sum(q2_PYCUSTOMER.&#39;Customer&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Customer Growth&#39;, ((coalesce(sum(q3_CYCUSTOMER.&#39;Customer&#39;), 0) - coalesce(sum(q3_PYCUSTOMER.&#39;Customer&#39;), 0)) / coalesce(sum(q3_PYCUSTOMER.&#39;Customer&#39;), 0)) * 100 as &#39;YTD Customer Growth&#39;, coalesce(sum(q2_CYSHARE.&#39;TAM&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} TAM Absolute&#39;, coalesce(sum(q3_CYSHARE.&#39;TAM&#39;), 0) as &#39;YTD TAM Absolute&#39;, ((coalesce(sum(q2_CYSHARE.&#39;TAM&#39;), 0) - coalesce(sum(q2_PYSHARE.&#39;TAM&#39;), 0)) / coalesce(sum(q2_PYSHARE.&#39;TAM&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} TAM Growth&#39;, ((coalesce(sum(q3_CYSHARE.&#39;TAM&#39;), 0) - coalesce(sum(q3_PYSHARE.&#39;TAM&#39;), 0)) / coalesce(sum(q3_PYSHARE.&#39;TAM&#39;), 0)) * 100 as &#39;YTD TAM Growth&#39;,coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE Absolute&#39;, coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) as &#39;YTD SE Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) - coalesce(sum(q2_PYHC.&#39;SE&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;SE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SE Growth&#39;, ((coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) - coalesce(sum(q3_PYHC.&#39;SE&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;SE&#39;), 0)) * 100 as &#39;YTD SE Growth&#39;,(power(coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;SE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;SE&#39;), 0),(1/2))-1)*100 as &#39;YTD SE CAGR&#39;, coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE Absolute&#39;, coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) as &#39;YTD AE Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) - coalesce(sum(q2_PYHC.&#39;AE&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;AE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} AE Growth&#39;, ((coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) - coalesce(sum(q3_PYHC.&#39;AE&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;AE&#39;), 0)) * 100 as &#39;YTD AE Growth&#39;, (power(coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;AE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;AE&#39;), 0),(1/2))-1)*100 as &#39;YTD AE CAGR&#39;,coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime Absolute&#39;, coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) as &#39;YTD Co_Prime Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) - coalesce(sum(q2_PYHC.&#39;Co_Prime&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;Co_Prime&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Co_Prime Growth&#39;, ((coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) - coalesce(sum(q3_PYHC.&#39;Co_Prime&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;Co_Prime&#39;), 0)) * 100 as &#39;YTD Co_Prime Growth&#39;,(power(coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;Co_Prime&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;Co_Prime&#39;), 0),(1/2))-1)*100 as &#39;YTD Co_Prime CAGR&#39;, coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE Absolute&#39;, coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) as &#39;YTD SWE Absolute&#39;, ((coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) - coalesce(sum(q2_PYSW.&#39;SWE&#39;), 0)) / coalesce(sum(q2_PYSW.&#39;SWE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SWE Growth&#39;, ((coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) - coalesce(sum(q3_PYSW.&#39;SWE&#39;), 0)) / coalesce(sum(q3_PYSW.&#39;SWE&#39;), 0)) * 100 as &#39;YTD SWE Growth&#39;,(power(coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) / coalesce(sum(q2_PY_2_SW.&#39;SWE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE CAGR&#39;,(power(coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) / coalesce(sum(q3_PY_2_SW.&#39;SWE&#39;), 0),(1/2))-1)*100 as &#39;YTD SWE CAGR&#39;, coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA Absolute&#39;, coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) as &#39;YTD INFRA Absolute&#39;, ((coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) - coalesce(sum(q2_PYSW.&#39;INFRA&#39;), 0)) / coalesce(sum(q2_PYSW.&#39;INFRA&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} INFRA Growth&#39;, ((coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) - coalesce(sum(q3_PYSW.&#39;INFRA&#39;), 0)) / coalesce(sum(q3_PYSW.&#39;INFRA&#39;), 0)) * 100 as &#39;YTD INFRA Growth&#39;,(power(coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) / coalesce(sum(q2_PY_2_SW.&#39;INFRA&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA CAGR&#39;,(power(coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) / coalesce(sum(q3_PY_2_SW.&#39;INFRA&#39;), 0),(1/2))-1)*100 as &#39;YTD INFRA CAGR&#39;;\nnresult_SubCloud = group q2_CYACV by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_PYACV by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_CYACV by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PYACV by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_CYAOV by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_PYAOV by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_CYAOV by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PYAOV by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q2_CYATT by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_PYATT by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_CYATT by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PYATT by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q4_CYATT by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_CYPipegen by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_PYPipegen by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_CYPipegen by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PYPipegen by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q2_CYHC by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_PYHC by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q2_PY_2_HC by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_CYHC by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PYHC by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PY_2_HC by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full ,q2_CYSW by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_PYSW by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q2_PY_2_SW by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_CYSW by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PYSW by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PY_2_SW by (&#39;Cloud&#39;, &#39;Subcloud&#39;)full, q2_CYREDACCOUNTS by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_PYREDACCOUNTS by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q2_PY_2_REDACCOUNTS by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_CYREDACCOUNTS by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PYREDACCOUNTS by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q3_PY_2_REDACCOUNTS by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_CYT_P by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_PYT_P by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q2_PY_2_T_P by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_CYT_P by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PYT_P by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q3_PY_2_T_P by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_CYAVAILABILITY by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_PYAVAILABILITY by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q2_PY_2_AVAILABILITY by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_CYAVAILABILITY by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PYAVAILABILITY by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q3_PY_2_AVAILABILITY by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_CYTRANSACTIONS by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_PYTRANSACTIONS by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q2_PY_2_TRANSACTIONS by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_CYTRANSACTIONS by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PYTRANSACTIONS by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q3_PY_2_TRANSACTIONS by (&#39;Cloud&#39;, &#39;Subcloud&#39;)  full, q2_CYCUSTOMER by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_PYCUSTOMER by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q2_PY_2_CUSTOMER by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_CYCUSTOMER by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PYCUSTOMER by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q3_PY_2_CUSTOMER by (&#39;Cloud&#39;, &#39;Subcloud&#39;)full, q2_CYSHARE by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q2_PYSHARE by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q2_PY_2_SHARE by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_CYSHARE by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full, q3_PYSHARE by (&#39;Cloud&#39;, &#39;Subcloud&#39;) full,q3_PY_2_SHARE by (&#39;Cloud&#39;, &#39;Subcloud&#39;),MasterHierarchy by (&#39;Level_1&#39;, &#39;Level_2&#39;) ;\nn\nresult_SubCloud = foreach result_SubCloud generate &quot;    ↳  &quot; + coalesce(MasterHierarchy.&#39;Level_2&#39;, q2_CYACV.&#39;Subcloud&#39;, q2_PYACV.&#39;Subcloud&#39;, q3_CYACV.&#39;Subcloud&#39;, q3_PYACV.&#39;Subcloud&#39;, q2_CYAOV.&#39;Subcloud&#39;, q2_PYAOV.&#39;Subcloud&#39;, q3_CYAOV.&#39;Subcloud&#39;, q3_PYAOV.&#39;Subcloud&#39;,q2_CYREDACCOUNTS.&#39;Subcloud&#39;, q2_PYREDACCOUNTS.&#39;Subcloud&#39;, q3_CYREDACCOUNTS.&#39;Subcloud&#39;, q3_PYREDACCOUNTS.&#39;Subcloud&#39;, q2_CYT_P.&#39;Subcloud&#39;, q2_PYT_P.&#39;Subcloud&#39;, q3_CYT_P.&#39;Subcloud&#39;, q3_PYT_P.&#39;Subcloud&#39;, q2_CYAVAILABILITY.&#39;Subcloud&#39;, q2_PYAVAILABILITY.&#39;Subcloud&#39;, q3_CYAVAILABILITY.&#39;Subcloud&#39;, q3_PYAVAILABILITY.&#39;Subcloud&#39;, q2_CYTRANSACTIONS.&#39;Subcloud&#39;, q2_PYTRANSACTIONS.&#39;Subcloud&#39;, q3_CYTRANSACTIONS.&#39;Subcloud&#39;, q3_PYTRANSACTIONS.&#39;Subcloud&#39;, q2_CYAVAILABILITY.&#39;Subcloud&#39;, q2_PYAVAILABILITY.&#39;Subcloud&#39;, q3_CYAVAILABILITY.&#39;Subcloud&#39;, q3_PYAVAILABILITY.&#39;Subcloud&#39;, q2_CYCUSTOMER.&#39;Subcloud&#39;, q2_PYCUSTOMER.&#39;Subcloud&#39;, q3_CYCUSTOMER.&#39;Subcloud&#39;, q3_PYCUSTOMER.&#39;Subcloud&#39;, q2_CYSHARE.&#39;Subcloud&#39;, q2_PYSHARE.&#39;Subcloud&#39;, q3_CYSHARE.&#39;Subcloud&#39;, q3_PYSHARE.&#39;Subcloud&#39;) as &#39;Cloud&#39;,  coalesce(sum(q2_CYACV.&#39;ACV&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} ACV Absolute&#39;, coalesce(sum(q3_CYACV.&#39;ACV&#39;), 0) as &#39;YTD ACV Absolute&#39;, ((coalesce(sum(q2_CYACV.&#39;ACV&#39;), 0) - coalesce(sum(q2_PYACV.&#39;ACV&#39;), 0)) / coalesce(sum(q2_PYACV.&#39;ACV&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} ACV Growth&#39;, ((coalesce(sum(q3_CYACV.&#39;ACV&#39;), 0) - coalesce(sum(q3_PYACV.&#39;ACV&#39;), 0)) / coalesce(sum(q3_PYACV.&#39;ACV&#39;), 0)) * 100 as &#39;YTD ACV Growth&#39;, coalesce(sum(q2_CYAOV.&#39;AOV&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AOV Absolute&#39;, coalesce(sum(q3_CYAOV.&#39;AOV&#39;), 0) as &#39;YTD AOV Absolute&#39;, ((coalesce(sum(q2_CYAOV.&#39;AOV&#39;), 0) - coalesce(sum(q2_PYAOV.&#39;AOV&#39;), 0)) / coalesce(sum(q2_PYAOV.&#39;AOV&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} AOV Growth&#39;, ((coalesce(sum(q3_CYAOV.&#39;AOV&#39;), 0) - coalesce(sum(q3_PYAOV.&#39;AOV&#39;), 0)) / coalesce(sum(q3_PYAOV.&#39;AOV&#39;), 0)) * 100 as &#39;YTD AOV Growth&#39;, coalesce(sum(q2_CYPipegen.&#39;Pipegen&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Pipegen Absolute&#39;, coalesce(sum(q3_CYPipegen.&#39;Pipegen&#39;), 0) as &#39;YTD Pipegen Absolute&#39;, ((coalesce(sum(q2_CYPipegen.&#39;Pipegen&#39;), 0) - coalesce(sum(q2_PYPipegen.&#39;Pipegen&#39;), 0)) / coalesce(sum(q2_PYPipegen.&#39;Pipegen&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Pipegen Growth&#39;, ((coalesce(sum(q3_CYPipegen.&#39;Pipegen&#39;), 0) - coalesce(sum(q3_PYPipegen.&#39;Pipegen&#39;), 0)) / coalesce(sum(q3_PYPipegen.&#39;Pipegen&#39;), 0)) * 100 as &#39;YTD Pipegen Growth&#39;,coalesce(sum(q2_CYATT.&#39;Attrition_Product&#39;),0) as &#39;Attrition_CY_Q2&#39;,coalesce(sum(q3_CYATT.&#39;Attrition_Product&#39;),0) as &#39;Attrition_CY_Q3&#39;,coalesce(round(sum(q2_CYATT.&#39;TTM_Product&#39;), 0), 0) as &#39;TTM_Product_CY_Q2&#39; ,coalesce(round(sum(q2_CYATT.&#39;AOV_twelve_month_ago&#39;), 0), 0) as &#39;AOV_twelve_month_ago_CY_Q2&#39;,coalesce(round(sum(q4_CYATT.&#39;TTM_Product&#39;), 0), 0) as &#39;TTM_Product_CY_Q3&#39; ,coalesce(round(sum(q4_CYATT.&#39;AOV_twelve_month_ago&#39;), 0), 0) as &#39;AOV_twelve_month_ago_CY_Q3&#39;,(coalesce(round(sum(q2_CYATT.&#39;TTM_Product&#39;), 0), 0) / coalesce(round(sum(q2_CYATT.&#39;AOV_twelve_month_ago&#39;), 0), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Attrition TTM Rate&#39;, (coalesce(round(sum(q4_CYATT.&#39;TTM_Product&#39;), 0), 0) / coalesce(round(sum(q4_CYATT.&#39;AOV_twelve_month_ago&#39;), 0), 0)) * 100 as &#39;YTD Attrition TTM Rate&#39;, coalesce(sum(q2_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Red_Accounts Absolute&#39;, coalesce(sum(q3_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) as &#39;YTD Red_Accounts Absolute&#39;, ((coalesce(sum(q2_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) - coalesce(sum(q2_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) / coalesce(sum(q2_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Red_Accounts Growth&#39;, ((coalesce(sum(q3_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) - coalesce(sum(q3_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) / coalesce(sum(q3_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) * 100 as &#39;YTD Red_Accounts Growth&#39;, coalesce(sum(q2_CYT_P.&#39;CTS&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} CTS Absolute&#39;, coalesce(sum(q3_CYT_P.&#39;CTS&#39;), 0) as &#39;YTD CTS Absolute&#39;, ((coalesce(sum(q2_CYT_P.&#39;CTS&#39;), 0) - coalesce(sum(q2_PYT_P.&#39;CTS&#39;), 0)) / coalesce(sum(q2_PYT_P.&#39;CTS&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} CTS Growth&#39;, ((coalesce(sum(q3_CYT_P.&#39;CTS&#39;), 0) - coalesce(sum(q3_PYT_P.&#39;CTS&#39;), 0)) / coalesce(sum(q3_PYT_P.&#39;CTS&#39;), 0)) * 100 as &#39;YTD CTS Growth&#39;, coalesce(sum(q2_CYAVAILABILITY.&#39;Availability&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Availability Absolute&#39;, coalesce(sum(q3_CYAVAILABILITY.&#39;Availability&#39;), 0) as &#39;YTD Availability Absolute&#39;, ((coalesce(sum(q2_CYAVAILABILITY.&#39;Availability&#39;), 0) - coalesce(sum(q2_PYAVAILABILITY.&#39;Availability&#39;), 0)) / coalesce(sum(q2_PYAVAILABILITY.&#39;Availability&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Availability Growth&#39;, ((coalesce(sum(q3_CYAVAILABILITY.&#39;Availability&#39;), 0) - coalesce(sum(q3_PYAVAILABILITY.&#39;Availability&#39;), 0)) / coalesce(sum(q3_PYAVAILABILITY.&#39;Availability&#39;), 0)) * 100 as &#39;YTD Availability Growth&#39;, coalesce(sum(q2_CYTRANSACTIONS.&#39;Transactions&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Transactions Absolute&#39;, coalesce(sum(q3_CYTRANSACTIONS.&#39;Transactions&#39;), 0) as &#39;YTD Transactions Absolute&#39;, ((coalesce(sum(q2_CYTRANSACTIONS.&#39;Transactions&#39;), 0) - coalesce(sum(q2_PYTRANSACTIONS.&#39;Transactions&#39;), 0)) / coalesce(sum(q2_PYTRANSACTIONS.&#39;Transactions&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Transactions Growth&#39;, ((coalesce(sum(q3_CYTRANSACTIONS.&#39;Transactions&#39;), 0) - coalesce(sum(q3_PYTRANSACTIONS.&#39;Transactions&#39;), 0)) / coalesce(sum(q3_PYTRANSACTIONS.&#39;Transactions&#39;), 0)) * 100 as &#39;YTD Transactions Growth&#39;, coalesce(sum(q2_CYCUSTOMER.&#39;Customer&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Customer Absolute&#39;, coalesce(sum(q3_CYCUSTOMER.&#39;Customer&#39;), 0) as &#39;YTD Customer Absolute&#39;, ((coalesce(sum(q2_CYCUSTOMER.&#39;Customer&#39;), 0) - coalesce(sum(q2_PYCUSTOMER.&#39;Customer&#39;), 0)) / coalesce(sum(q2_PYCUSTOMER.&#39;Customer&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Customer Growth&#39;, ((coalesce(sum(q3_CYCUSTOMER.&#39;Customer&#39;), 0) - coalesce(sum(q3_PYCUSTOMER.&#39;Customer&#39;), 0)) / coalesce(sum(q3_PYCUSTOMER.&#39;Customer&#39;), 0)) * 100 as &#39;YTD Customer Growth&#39;, coalesce(sum(q2_CYSHARE.&#39;TAM&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} TAM Absolute&#39;, coalesce(sum(q3_CYSHARE.&#39;TAM&#39;), 0) as &#39;YTD TAM Absolute&#39;, ((coalesce(sum(q2_CYSHARE.&#39;TAM&#39;), 0) - coalesce(sum(q2_PYSHARE.&#39;TAM&#39;), 0)) / coalesce(sum(q2_PYSHARE.&#39;TAM&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} TAM Growth&#39;, ((coalesce(sum(q3_CYSHARE.&#39;TAM&#39;), 0) - coalesce(sum(q3_PYSHARE.&#39;TAM&#39;), 0)) / coalesce(sum(q3_PYSHARE.&#39;TAM&#39;), 0)) * 100 as &#39;YTD TAM Growth&#39;, coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE Absolute&#39;, coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) as &#39;YTD SE Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) - coalesce(sum(q2_PYHC.&#39;SE&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;SE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SE Growth&#39;, ((coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) - coalesce(sum(q3_PYHC.&#39;SE&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;SE&#39;), 0)) * 100 as &#39;YTD SE Growth&#39;,(power(coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;SE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;SE&#39;), 0),(1/2))-1)*100 as &#39;YTD SE CAGR&#39;, coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE Absolute&#39;, coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) as &#39;YTD AE Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) - coalesce(sum(q2_PYHC.&#39;AE&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;AE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} AE Growth&#39;, ((coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) - coalesce(sum(q3_PYHC.&#39;AE&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;AE&#39;), 0)) * 100 as &#39;YTD AE Growth&#39;, (power(coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;AE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;AE&#39;), 0),(1/2))-1)*100 as &#39;YTD AE CAGR&#39;,coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime Absolute&#39;, coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) as &#39;YTD Co_Prime Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) - coalesce(sum(q2_PYHC.&#39;Co_Prime&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;Co_Prime&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Co_Prime Growth&#39;, ((coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) - coalesce(sum(q3_PYHC.&#39;Co_Prime&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;Co_Prime&#39;), 0)) * 100 as &#39;YTD Co_Prime Growth&#39;,(power(coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;Co_Prime&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;Co_Prime&#39;), 0),(1/2))-1)*100 as &#39;YTD Co_Prime CAGR&#39;, coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE Absolute&#39;, coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) as &#39;YTD SWE Absolute&#39;, ((coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) - coalesce(sum(q2_PYSW.&#39;SWE&#39;), 0)) / coalesce(sum(q2_PYSW.&#39;SWE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SWE Growth&#39;, ((coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) - coalesce(sum(q3_PYSW.&#39;SWE&#39;), 0)) / coalesce(sum(q3_PYSW.&#39;SWE&#39;), 0)) * 100 as &#39;YTD SWE Growth&#39;,(power(coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) / coalesce(sum(q2_PY_2_SW.&#39;SWE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE CAGR&#39;,(power(coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) / coalesce(sum(q3_PY_2_SW.&#39;SWE&#39;), 0),(1/2))-1)*100 as &#39;YTD SWE CAGR&#39;, coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA Absolute&#39;, coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) as &#39;YTD INFRA Absolute&#39;, ((coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) - coalesce(sum(q2_PYSW.&#39;INFRA&#39;), 0)) / coalesce(sum(q2_PYSW.&#39;INFRA&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} INFRA Growth&#39;, ((coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) - coalesce(sum(q3_PYSW.&#39;INFRA&#39;), 0)) / coalesce(sum(q3_PYSW.&#39;INFRA&#39;), 0)) * 100 as &#39;YTD INFRA Growth&#39;,(power(coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) / coalesce(sum(q2_PY_2_SW.&#39;INFRA&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA CAGR&#39;,(power(coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) / coalesce(sum(q3_PY_2_SW.&#39;INFRA&#39;), 0),(1/2))-1)*100 as &#39;YTD INFRA CAGR&#39;,last(MasterHierarchy.&#39;Level_2_Sort_Code&#39;)  as &#39;Sort_Code&#39;;\nnresult_Cloud_Level3 = group  q2_CYACV by (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q2_PYACV by (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_CYACV by (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_PYACV by (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q2_CYAOV by (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q2_PYAOV by (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_CYAOV by (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_PYAOV by (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full,  q2_CYPipegen by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, q2_PYPipegen by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, q3_CYPipegen by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, q3_PYPipegen by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, q2_CYHC by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, q2_PYHC by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full,q2_PY_2_HC by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, q3_CYHC by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, q3_PYHC by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full,  q3_PY_2_HC by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, q2_CYSW by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, q2_PYSW by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full,q2_PY_2_SW by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, q3_CYSW by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, q3_PYSW by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full,  q3_PY_2_SW by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full,q2_CYATT by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, q2_PYATT by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, q3_CYATT by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, q3_PYATT by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full,q4_CYATT by (&#39;Cloud&#39;, &#39;Subcloud&#39;,&#39;Cloud_2&#39;) full, q2_CYREDACCOUNTS by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q2_PYREDACCOUNTS by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full,q2_PY_2_REDACCOUNTS by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_CYREDACCOUNTS by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_PYREDACCOUNTS by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full,q3_PY_2_REDACCOUNTS by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q2_CYT_P by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q2_PYT_P by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full,q2_PY_2_T_P by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_CYT_P by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_PYT_P by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full,q3_PY_2_T_P by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q2_CYAVAILABILITY by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q2_PYAVAILABILITY by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full,q2_PY_2_AVAILABILITY by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_CYAVAILABILITY by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_PYAVAILABILITY by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full,q3_PY_2_AVAILABILITY by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q2_CYTRANSACTIONS by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q2_PYTRANSACTIONS by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full,q2_PY_2_TRANSACTIONS by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_CYTRANSACTIONS by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_PYTRANSACTIONS by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full,q3_PY_2_TRANSACTIONS by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;)  full, q2_CYCUSTOMER by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q2_PYCUSTOMER by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full,q2_PY_2_CUSTOMER by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_CYCUSTOMER by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_PYCUSTOMER by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full,q3_PY_2_CUSTOMER by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;)full, q2_CYSHARE by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q2_PYSHARE by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full,q2_PY_2_SHARE by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_CYSHARE by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full, q3_PYSHARE by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;) full,q3_PY_2_SHARE by  (&#39;Cloud&#39;, &#39;Subcloud&#39;, &#39;Cloud_2&#39;),MasterHierarchy by (&#39;Level_1&#39;, &#39;Level_2&#39;,&#39;Level_3&#39;)  ;\nn\nresult_Cloud_Level3 = foreach result_Cloud_Level3 generate &quot;          &quot; + coalesce(MasterHierarchy.&#39;Level_3&#39;, q2_CYACV.&#39;Cloud_2&#39;, q2_PYACV.&#39;Cloud_2&#39;, q3_CYACV.&#39;Cloud_2&#39;, q3_PYACV.&#39;Cloud_2&#39;, q2_CYAOV.&#39;Cloud_2&#39;, q2_PYAOV.&#39;Cloud_2&#39;, q3_CYAOV.&#39;Cloud_2&#39;, q3_PYAOV.&#39;Cloud_2&#39;,q2_CYREDACCOUNTS.&#39;Cloud_2&#39;, q2_PYREDACCOUNTS.&#39;Cloud_2&#39;, q3_CYREDACCOUNTS.&#39;Cloud_2&#39;, q3_PYREDACCOUNTS.&#39;Cloud_2&#39;, q2_CYT_P.&#39;Cloud_2&#39;, q2_PYT_P.&#39;Cloud_2&#39;, q3_CYT_P.&#39;Cloud_2&#39;, q3_PYT_P.&#39;Cloud_2&#39;, q2_CYAVAILABILITY.&#39;Cloud_2&#39;, q2_PYAVAILABILITY.&#39;Cloud_2&#39;, q3_CYAVAILABILITY.&#39;Cloud_2&#39;, q3_PYAVAILABILITY.&#39;Cloud_2&#39;, q2_CYTRANSACTIONS.&#39;Cloud_2&#39;, q2_PYTRANSACTIONS.&#39;Cloud_2&#39;, q3_CYTRANSACTIONS.&#39;Cloud_2&#39;, q3_PYTRANSACTIONS.&#39;Cloud_2&#39;, q2_CYAVAILABILITY.&#39;Cloud_2&#39;, q2_PYAVAILABILITY.&#39;Cloud_2&#39;, q3_CYAVAILABILITY.&#39;Cloud_2&#39;, q3_PYAVAILABILITY.&#39;Cloud_2&#39;, q2_CYCUSTOMER.&#39;Cloud_2&#39;, q2_PYCUSTOMER.&#39;Cloud_2&#39;, q3_CYCUSTOMER.&#39;Cloud_2&#39;, q3_PYCUSTOMER.&#39;Cloud_2&#39;, q2_CYSHARE.&#39;Cloud_2&#39;, q2_PYSHARE.&#39;Cloud_2&#39;, q3_CYSHARE.&#39;Cloud_2&#39;, q3_PYSHARE.&#39;Cloud_2&#39;,q2_CYATT.&#39;Cloud_2&#39;, q2_PYATT.&#39;Cloud_2&#39;, q3_CYATT.&#39;Cloud_2&#39;, q3_PYATT.&#39;Cloud_2&#39;) as &#39;Cloud&#39;,  coalesce(sum(q2_CYACV.&#39;ACV&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} ACV Absolute&#39;, coalesce(sum(q3_CYACV.&#39;ACV&#39;), 0) as &#39;YTD ACV Absolute&#39;, ((coalesce(sum(q2_CYACV.&#39;ACV&#39;), 0) - coalesce(sum(q2_PYACV.&#39;ACV&#39;), 0)) / coalesce(sum(q2_PYACV.&#39;ACV&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} ACV Growth&#39;, ((coalesce(sum(q3_CYACV.&#39;ACV&#39;), 0) - coalesce(sum(q3_PYACV.&#39;ACV&#39;), 0)) / coalesce(sum(q3_PYACV.&#39;ACV&#39;), 0)) * 100 as &#39;YTD ACV Growth&#39;, coalesce(sum(q2_CYAOV.&#39;AOV&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AOV Absolute&#39;, coalesce(sum(q3_CYAOV.&#39;AOV&#39;), 0) as &#39;YTD AOV Absolute&#39;, ((coalesce(sum(q2_CYAOV.&#39;AOV&#39;), 0) - coalesce(sum(q2_PYAOV.&#39;AOV&#39;), 0)) / coalesce(sum(q2_PYAOV.&#39;AOV&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} AOV Growth&#39;, ((coalesce(sum(q3_CYAOV.&#39;AOV&#39;), 0) - coalesce(sum(q3_PYAOV.&#39;AOV&#39;), 0)) / coalesce(sum(q3_PYAOV.&#39;AOV&#39;), 0)) * 100 as &#39;YTD AOV Growth&#39;, coalesce(sum(q2_CYPipegen.&#39;Pipegen&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Pipegen Absolute&#39;, coalesce(sum(q3_CYPipegen.&#39;Pipegen&#39;), 0) as &#39;YTD Pipegen Absolute&#39;, ((coalesce(sum(q2_CYPipegen.&#39;Pipegen&#39;), 0) - coalesce(sum(q2_PYPipegen.&#39;Pipegen&#39;), 0)) / coalesce(sum(q2_PYPipegen.&#39;Pipegen&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Pipegen Growth&#39;, ((coalesce(sum(q3_CYPipegen.&#39;Pipegen&#39;), 0) - coalesce(sum(q3_PYPipegen.&#39;Pipegen&#39;), 0)) / coalesce(sum(q3_PYPipegen.&#39;Pipegen&#39;), 0)) * 100 as &#39;YTD Pipegen Growth&#39;, coalesce(sum(q2_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Red_Accounts Absolute&#39;, coalesce(sum(q3_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) as &#39;YTD Red_Accounts Absolute&#39;, ((coalesce(sum(q2_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) - coalesce(sum(q2_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) / coalesce(sum(q2_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Red_Accounts Growth&#39;, ((coalesce(sum(q3_CYREDACCOUNTS.&#39;Red_Accounts&#39;), 0) - coalesce(sum(q3_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) / coalesce(sum(q3_PYREDACCOUNTS.&#39;Red_Accounts&#39;), 0)) * 100 as &#39;YTD Red_Accounts Growth&#39;, coalesce(sum(q2_CYT_P.&#39;CTS&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} CTS Absolute&#39;, coalesce(sum(q3_CYT_P.&#39;CTS&#39;), 0) as &#39;YTD CTS Absolute&#39;, ((coalesce(sum(q2_CYT_P.&#39;CTS&#39;), 0) - coalesce(sum(q2_PYT_P.&#39;CTS&#39;), 0)) / coalesce(sum(q2_PYT_P.&#39;CTS&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} CTS Growth&#39;, ((coalesce(sum(q3_CYT_P.&#39;CTS&#39;), 0) - coalesce(sum(q3_PYT_P.&#39;CTS&#39;), 0)) / coalesce(sum(q3_PYT_P.&#39;CTS&#39;), 0)) * 100 as &#39;YTD CTS Growth&#39;, coalesce(sum(q2_CYAVAILABILITY.&#39;Availability&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Availability Absolute&#39;, coalesce(sum(q3_CYAVAILABILITY.&#39;Availability&#39;), 0) as &#39;YTD Availability Absolute&#39;, ((coalesce(sum(q2_CYAVAILABILITY.&#39;Availability&#39;), 0) - coalesce(sum(q2_PYAVAILABILITY.&#39;Availability&#39;), 0)) / coalesce(sum(q2_PYAVAILABILITY.&#39;Availability&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Availability Growth&#39;, ((coalesce(sum(q3_CYAVAILABILITY.&#39;Availability&#39;), 0) - coalesce(sum(q3_PYAVAILABILITY.&#39;Availability&#39;), 0)) / coalesce(sum(q3_PYAVAILABILITY.&#39;Availability&#39;), 0)) * 100 as &#39;YTD Availability Growth&#39;, coalesce(sum(q2_CYTRANSACTIONS.&#39;Transactions&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Transactions Absolute&#39;, coalesce(sum(q3_CYTRANSACTIONS.&#39;Transactions&#39;), 0) as &#39;YTD Transactions Absolute&#39;, ((coalesce(sum(q2_CYTRANSACTIONS.&#39;Transactions&#39;), 0) - coalesce(sum(q2_PYTRANSACTIONS.&#39;Transactions&#39;), 0)) / coalesce(sum(q2_PYTRANSACTIONS.&#39;Transactions&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Transactions Growth&#39;, ((coalesce(sum(q3_CYTRANSACTIONS.&#39;Transactions&#39;), 0) - coalesce(sum(q3_PYTRANSACTIONS.&#39;Transactions&#39;), 0)) / coalesce(sum(q3_PYTRANSACTIONS.&#39;Transactions&#39;), 0)) * 100 as &#39;YTD Transactions Growth&#39;, coalesce(sum(q2_CYCUSTOMER.&#39;Customer&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Customer Absolute&#39;, coalesce(sum(q3_CYCUSTOMER.&#39;Customer&#39;), 0) as &#39;YTD Customer Absolute&#39;, ((coalesce(sum(q2_CYCUSTOMER.&#39;Customer&#39;), 0) - coalesce(sum(q2_PYCUSTOMER.&#39;Customer&#39;), 0)) / coalesce(sum(q2_PYCUSTOMER.&#39;Customer&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Customer Growth&#39;, ((coalesce(sum(q3_CYCUSTOMER.&#39;Customer&#39;), 0) - coalesce(sum(q3_PYCUSTOMER.&#39;Customer&#39;), 0)) / coalesce(sum(q3_PYCUSTOMER.&#39;Customer&#39;), 0)) * 100 as &#39;YTD Customer Growth&#39;, coalesce(sum(q2_CYSHARE.&#39;TAM&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} TAM Absolute&#39;, coalesce(sum(q3_CYSHARE.&#39;TAM&#39;), 0) as &#39;YTD TAM Absolute&#39;, ((coalesce(sum(q2_CYSHARE.&#39;TAM&#39;), 0) - coalesce(sum(q2_PYSHARE.&#39;TAM&#39;), 0)) / coalesce(sum(q2_PYSHARE.&#39;TAM&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} TAM Growth&#39;, ((coalesce(sum(q3_CYSHARE.&#39;TAM&#39;), 0) - coalesce(sum(q3_PYSHARE.&#39;TAM&#39;), 0)) / coalesce(sum(q3_PYSHARE.&#39;TAM&#39;), 0)) * 100 as &#39;YTD TAM Growth&#39;, coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE Absolute&#39;, coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) as &#39;YTD SE Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) - coalesce(sum(q2_PYHC.&#39;SE&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;SE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SE Growth&#39;, ((coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) - coalesce(sum(q3_PYHC.&#39;SE&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;SE&#39;), 0)) * 100 as &#39;YTD SE Growth&#39;,(power(coalesce(sum(q2_CYHC.&#39;SE&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;SE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SE CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;SE&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;SE&#39;), 0),(1/2))-1)*100 as &#39;YTD SE CAGR&#39;, coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE Absolute&#39;, coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) as &#39;YTD AE Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) - coalesce(sum(q2_PYHC.&#39;AE&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;AE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} AE Growth&#39;, ((coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) - coalesce(sum(q3_PYHC.&#39;AE&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;AE&#39;), 0)) * 100 as &#39;YTD AE Growth&#39;, (power(coalesce(sum(q2_CYHC.&#39;AE&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;AE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AE CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;AE&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;AE&#39;), 0),(1/2))-1)*100 as &#39;YTD AE CAGR&#39;,coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime Absolute&#39;, coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) as &#39;YTD Co_Prime Absolute&#39;, ((coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) - coalesce(sum(q2_PYHC.&#39;Co_Prime&#39;), 0)) / coalesce(sum(q2_PYHC.&#39;Co_Prime&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Co_Prime Growth&#39;, ((coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) - coalesce(sum(q3_PYHC.&#39;Co_Prime&#39;), 0)) / coalesce(sum(q3_PYHC.&#39;Co_Prime&#39;), 0)) * 100 as &#39;YTD Co_Prime Growth&#39;,(power(coalesce(sum(q2_CYHC.&#39;Co_Prime&#39;), 0) / coalesce(sum(q2_PY_2_HC.&#39;Co_Prime&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Co_Prime CAGR&#39;,(power(coalesce(sum(q3_CYHC.&#39;Co_Prime&#39;), 0) / coalesce(sum(q3_PY_2_HC.&#39;Co_Prime&#39;), 0),(1/2))-1)*100 as &#39;YTD Co_Prime CAGR&#39;, coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE Absolute&#39;, coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) as &#39;YTD SWE Absolute&#39;, ((coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) - coalesce(sum(q2_PYSW.&#39;SWE&#39;), 0)) / coalesce(sum(q2_PYSW.&#39;SWE&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} SWE Growth&#39;, ((coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) - coalesce(sum(q3_PYSW.&#39;SWE&#39;), 0)) / coalesce(sum(q3_PYSW.&#39;SWE&#39;), 0)) * 100 as &#39;YTD SWE Growth&#39;,(power(coalesce(sum(q2_CYSW.&#39;SWE&#39;), 0) / coalesce(sum(q2_PY_2_SW.&#39;SWE&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} SWE CAGR&#39;,(power(coalesce(sum(q3_CYSW.&#39;SWE&#39;), 0) / coalesce(sum(q3_PY_2_SW.&#39;SWE&#39;), 0),(1/2))-1)*100 as &#39;YTD SWE CAGR&#39;, coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA Absolute&#39;, coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) as &#39;YTD INFRA Absolute&#39;, ((coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) - coalesce(sum(q2_PYSW.&#39;INFRA&#39;), 0)) / coalesce(sum(q2_PYSW.&#39;INFRA&#39;), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} INFRA Growth&#39;, ((coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) - coalesce(sum(q3_PYSW.&#39;INFRA&#39;), 0)) / coalesce(sum(q3_PYSW.&#39;INFRA&#39;), 0)) * 100 as &#39;YTD INFRA Growth&#39;,(power(coalesce(sum(q2_CYSW.&#39;INFRA&#39;), 0) / coalesce(sum(q2_PY_2_SW.&#39;INFRA&#39;), 0),(1/2))-1)*100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} INFRA CAGR&#39;,(power(coalesce(sum(q3_CYSW.&#39;INFRA&#39;), 0) / coalesce(sum(q3_PY_2_SW.&#39;INFRA&#39;), 0),(1/2))-1)*100 as &#39;YTD INFRA CAGR&#39;,coalesce(sum(q2_CYATT.&#39;Attrition_Product&#39;),0) as &#39;Attrition_CY_Q2&#39;,coalesce(sum(q3_CYATT.&#39;Attrition_Product&#39;),0) as &#39;Attrition_CY_Q3&#39;,coalesce(round(sum(q2_CYATT.&#39;TTM_Product&#39;), 0), 0) as &#39;TTM_Product_CY_Q2&#39; ,coalesce(round(sum(q2_CYATT.&#39;AOV_twelve_month_ago&#39;), 0), 0) as &#39;AOV_twelve_month_ago_CY_Q2&#39;,coalesce(round(sum(q4_CYATT.&#39;TTM_Product&#39;), 0), 0) as &#39;TTM_Product_CY_Q3&#39; ,coalesce(round(sum(q4_CYATT.&#39;AOV_twelve_month_ago&#39;), 0), 0) as &#39;AOV_twelve_month_ago_CY_Q3&#39;,(coalesce(round(sum(q2_CYATT.&#39;TTM_Product&#39;), 0), 0) / coalesce(round(sum(q2_CYATT.&#39;AOV_twelve_month_ago&#39;), 0), 0)) * 100 as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Attrition TTM Rate&#39;, (coalesce(round(sum(q4_CYATT.&#39;TTM_Product&#39;), 0), 0) / coalesce(round(sum(q4_CYATT.&#39;AOV_twelve_month_ago&#39;), 0), 0)) * 100 as &#39;YTD Attrition TTM Rate&#39;,last(MasterHierarchy.&#39;Level_3_Sort_Code&#39;)  as &#39;Sort_Code&#39;,&quot;          &quot; + coalesce(last(MasterHierarchy.&#39;Level_2&#39;), last(q2_CYACV.&#39;Subcloud&#39;), last(q2_PYACV.&#39;Subcloud&#39;), last(q3_CYACV.&#39;Subcloud&#39;), last(q3_PYACV.&#39;Subcloud&#39;), last(q2_CYAOV.&#39;Subcloud&#39;), last(q2_PYAOV.&#39;Subcloud&#39;), last(q3_CYAOV.&#39;Subcloud&#39;), last(q3_PYAOV.&#39;Subcloud&#39;)) as &#39;ParentCloud&#39;;\nresult_Cloud_Level3 = filter result_Cloud_Level3 by &#39;Cloud&#39; != &#39;ParentCloud&#39;;\nline =  group MasterHierarchy by &#39;all&#39;;line= foreach line generate &quot;--------------------------------------------------------------------------&quot; as &#39;Cloud&#39;,&quot;{{cell(Selector_Quarter.selection,0,&quot;Line_Rank&quot;).asString()}}&quot;  as &#39;Sort_Code&#39;;\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------UNION--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nFinal = union result, result_SubCloud, result_Cloud_Level3,line;\nnFinal = filter Final by &#39;Sort_Code&#39; != &quot;&quot;;\nFinal = filter Final by &#39;Cloud&#39; not in {{cell(Selector_Quarter.selection,0,&quot;Filter_Table_2&quot;).asString()}};\nFinal = order Final by (&#39;Sort_Code&#39; asc,  &#39;Cloud&#39; asc);\nFinal = foreach Final generate &#39;Cloud&#39;+&quot;                      &quot; as &#39;Cloud&#39;, &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} ACV Absolute&#39;, &#39;YTD ACV Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} ACV Growth&#39;, &#39;YTD ACV Growth&#39;, &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} AOV Absolute&#39;, &#39;YTD AOV Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} AOV Growth&#39;,&#39;YTD AOV Growth&#39;, sum(&#39;Attrition_CY_Q2&#39;) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Attrition Absolute&#39;, sum(&#39;Attrition_CY_Q3&#39;) as &#39;YTD Attrition Absolute&#39;,sum(&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Attrition TTM Rate&#39;) as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Attrition TTM Rate&#39;, sum(&#39;YTD Attrition TTM Rate&#39;) as &#39;YTD Attrition TTM Rate&#39;, &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} Pipegen Absolute&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_absolute&quot;).asString()}} PipeGen Absolute&#39;,&#39;YTD Pipegen Absolute&#39; as &#39;YTD PipeGen Absolute&#39;,&#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} Pipegen Growth&#39; as &#39;{{cell(Selector_Quarter.selection,0,&quot;Header_name_rate&quot;).asString()}} PipeGen Growth&#39;,   &#39;YTD Pipegen Growth&#39; as  &#39;YTD PipeGen Growth&#39;;\n",
        "receiveFacet": true,
        "selectMode": "none",
        "strings": [],
        "type": "saql",
        "useGlobal": true,
        "visualizationParameters": {
          "parameters": {
            "autoFitMode": "none",
            "showValues": true,
            "bins": {
              "breakpoints": {
                "high": 100,
                "low": 0
              },
              "bands": {
                "high": {
                  "color": "#008000",
                  "label": ""
                },
                "low": {
                  "color": "#B22222",
                  "label": ""
                },
                "medium": {
                  "color": "#ffa500",
                  "label": ""
                }
              }
            },
            "legend": {
              "showHeader": true,
              "show": true,
              "customSize": "auto",
              "position": "right-top",
              "inside": false
            },
            "axisMode": "multi",
            "tooltip": {
              "showBinLabel": true,
              "measures": "",
              "showPercentage": true,
              "showDimensions": true,
              "showMeasures": true,
              "customizeTooltip": false,
              "dimensions": ""
            },
            "visualizationType": "hbar",
            "title": {
              "fontSize": 14,
              "subtitleFontSize": 11,
              "label": "",
              "align": "center",
              "subtitleLabel": ""
            },
            "binValues": false,
            "trellis": {
              "flipLabels": false,
              "showGridLines": true,
              "size": [
                100,
                100
              ],
              "enable": false,
              "type": "x",
              "chartsPerLine": 4
            },
            "measureAxis2": {
              "sqrtScale": false,
              "showTitle": true,
              "showAxis": true,
              "title": "",
              "customDomain": {
                "showDomain": false
              }
            },
            "measureAxis1": {
              "sqrtScale": false,
              "showTitle": true,
              "showAxis": true,
              "title": "",
              "customDomain": {
                "showDomain": false
              }
            },
            "theme": "wave",
            "dimensionAxis": {
              "showTitle": true,
              "customSize": "auto",
              "showAxis": true,
              "title": "",
              "icons": {
                "useIcons": false,
                "iconProps": {
                  "fit": "cover",
                  "column": "",
                  "type": "round"
                }
              }
            }
          },
          "type": "chart"
        }
      },
      "Table_Page_3_Header_Top": {
        "broadcastFacet": true,
        "groups": [],
        "label": "Table_Page_3_Header_Top",
        "numbers": [],
        "query": "MasterHierarchy = load &quot;Master_Hierarchy&quot;;\nresult_Total = group MasterHierarchy by all;\nresult_Total = foreach result_Total generate &quot;   &quot; as &#39;$ values in millions&#39;, &quot;SWE                     &quot; as &#39;SWE&#39;,&quot;INFRA                     &quot; as &#39;INFRA&#39;,&quot;T&amp;P Cost to Serve                     &quot; as &#39;T&amp;P Cost to Serve&#39;, &quot;Availability %                     &quot; as &#39;Availability %&#39;, &quot;Transactions / Requests                     &quot; as &#39;Transactions / Requests&#39;;",
        "receiveFacet": true,
        "selectMode": "none",
        "strings": [],
        "type": "saql",
        "useGlobal": true,
        "visualizationParameters": {
          "parameters": {
            "autoFitMode": "none",
            "showValues": true,
            "bins": {
              "breakpoints": {
                "high": 100,
                "low": 0
              },
              "bands": {
                "high": {
                  "color": "#008000",
                  "label": ""
                },
                "low": {
                  "color": "#B22222",
                  "label": ""
                },
                "medium": {
                  "color": "#ffa500",
                  "label": ""
                }
              }
            },
            "legend": {
              "showHeader": true,
              "show": true,
              "customSize": "auto",
              "position": "right-top",
              "inside": false
            },
            "axisMode": "multi",
            "tooltip": {
              "showBinLabel": true,
              "measures": "",
              "showPercentage": true,
              "showDimensions": true,
              "showMeasures": true,
              "customizeTooltip": false,
              "dimensions": ""
            },
            "visualizationType": "hbar",
            "title": {
              "fontSize": 14,
              "subtitleFontSize": 11,
              "label": "",
              "align": "center",
              "subtitleLabel": ""
            },
            "binValues": false,
            "trellis": {
              "flipLabels": false,
              "showGridLines": true,
              "size": [
                100,
                100
              ],
              "enable": false,
              "type": "x",
              "chartsPerLine": 4
            },
            "measureAxis2": {
              "sqrtScale": false,
              "showTitle": true,
              "showAxis": true,
              "title": "",
              "customDomain": {
                "showDomain": false
              }
            },
            "measureAxis1": {
              "sqrtScale": false,
              "showTitle": true,
              "showAxis": true,
              "title": "",
              "customDomain": {
                "showDomain": false
              }
            },
            "theme": "wave",
            "dimensionAxis": {
              "showTitle": true,
              "customSize": "auto",
              "showAxis": true,
              "title": "",
              "icons": {
                "useIcons": false,
                "iconProps": {
                  "fit": "cover",
                  "column": "",
                  "type": "round"
                }
              }
            }
          },
          "type": "chart",
          "visualizationType": "hbar"
        }
      },
      "Filter_Segment": {
        "broadcastFacet": true,
        "datasets": [
          {
            "id": "0Fbf2000000HtY7CAK",
            "label": "APM_ACV1",
            "name": "APM_ACV",
            "url": "/services/data/v42.0/wave/datasets/0Fbf2000000HtY7CAK"
          }
        ],
        "isGlobal": false,
        "query": {
          "query": "{&quot;measures&quot;:[[&quot;count&quot;,&quot;*&quot;]],&quot;groups&quot;:[&quot;Segment&quot;]}",
          "version": -1
        },
        "receiveFacet": true,
        "selectMode": "multi",
        "type": "aggregateflex",
        "useGlobal": true,
        "visualizationParameters": {}
      },
      "Filter_Industry": {
        "broadcastFacet": true,
        "datasets": [
          {
            "id": "0Fbf2000000HtY7CAK",
            "label": "APM_ACV1",
            "name": "APM_ACV",
            "url": "/services/data/v42.0/wave/datasets/0Fbf2000000HtY7CAK"
          }
        ],
        "isGlobal": false,
        "query": {
          "query": "{&quot;measures&quot;:[[&quot;count&quot;,&quot;*&quot;]],&quot;groups&quot;:[&quot;Industry&quot;]}",
          "version": -1
        },
        "receiveFacet": true,
        "selectMode": "multi",
        "type": "aggregateflex",
        "useGlobal": true,
        "visualizationParameters": {}
      },
      "lens_1": {
        "broadcastFacet": true,
        "groups": [
          "Country"
        ],
        "label": "Country logic",
        "numbers": [],
        "query": "q = load &quot;Master_Hierarchy&quot;;\nq = filter q by &#39;Level_1&#39; in  {{cell(Static_Region_Filter.selection,0,&quot;filter&quot;).asString()}};\nq = filter q by {{column(lens_2.selection,[&quot;Region&quot;]).asEquality(&#39;Level_1&#39;)}};\nq = group q by (&#39;Level_1&#39;, &#39;Level_2&#39;);\n\nq = foreach q generate \ncase when (&#39;Level_1&#39; == &quot;AMER&quot; &amp;&amp; (&#39;Level_2&#39; ==  &quot;Canada&quot; )) then &quot;Canada&quot; \nwhen (&#39;Level_1&#39; == &quot;AMER&quot; &amp;&amp; (&#39;Level_2&#39; ==  &quot;United States&quot; )) then &quot;United States&quot; \nwhen (&#39;Level_1&#39; == &quot;AMER&quot;)then &quot;RO AMER&quot; \nwhen (&#39;Level_1&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Level_2&#39; ==  &quot;United Kingdom&quot; )) then &quot;United Kingdom&quot;  \nwhen (&#39;Level_1&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Level_2&#39; ==  &quot;France&quot; )) then &quot;France&quot; \nwhen (&#39;Level_1&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Level_2&#39; ==  &quot;Germany&quot; )) then &quot;Germany&quot; \nwhen (&#39;Level_1&#39; == &quot;EMEA&quot; &amp;&amp; (&#39;Level_2&#39; ==  &quot;Netherlands&quot; )) then &quot;Netherlands&quot; \nwhen (&#39;Level_1&#39; == &quot;EMEA&quot; ) then &quot;RO EMEA&quot; \nwhen (&#39;Level_1&#39; == &quot;APAC&quot; &amp;&amp; (&#39;Level_2&#39; ==  &quot;Australia&quot; )) then &quot;ANZ&quot;  \nwhen (&#39;Level_1&#39; == &quot;APAC&quot; &amp;&amp; (&#39;Level_2&#39; ==  &quot;ANZ&quot; )) then &quot;ANZ&quot;  \nwhen (&#39;Level_1&#39; == &quot;APAC&quot; &amp;&amp; (&#39;Level_2&#39; ==  &quot;India&quot; )) then &quot;India&quot; \nwhen (&#39;Level_1&#39; == &quot;APAC&quot; ) then &quot;RO APAC&quot; \nwhen (&#39;Level_1&#39; == &quot;APAC&quot; ) then &quot;RO APAC&quot;  \nwhen (&#39;Level_1&#39; == &quot;JP&quot; &amp;&amp; (&#39;Level_2&#39; == &quot;Japan&quot; )) then &quot;Japan&quot;\nwhen (&#39;Level_1&#39; == &quot;JP&quot; &amp;&amp; (&#39;Level_2&#39; == &quot;South Korea&quot;)) then &quot;South Korea&quot;\nwhen (&#39;Level_1&#39; == &quot;JP&quot;) then &quot;RO JP&quot;  \nwhen (&#39;Level_1&#39; == &quot;LACA&quot; &amp;&amp; (&#39;Level_2&#39; ==  &quot;Brazil&quot; )) then &quot;Brazil&quot; \nwhen (&#39;Level_1&#39; == &quot;LACA&quot; ) then &quot;RO LACA&quot; \nwhen (&#39;Level_1&#39; == &quot;Other&quot; ) then &quot;Other&quot; else &quot;ERROR&quot; end as &#39;Country&#39;;\n\nq = group q by &#39;Country&#39;; \nq = foreach q generate &#39;Country&#39;; \nq = order q by (&#39;Country&#39; asc);",
        "receiveFacet": true,
        "selectMode": "multi",
        "strings": [
          "Country"
        ],
        "type": "saql",
        "useGlobal": true,
        "visualizationParameters": {
          "parameters": {
            "autoFitMode": "none",
            "showValues": true,
            "bins": {
              "breakpoints": {
                "high": 100,
                "low": 0
              },
              "bands": {
                "high": {
                  "color": "#008000",
                  "label": ""
                },
                "low": {
                  "color": "#B22222",
                  "label": ""
                },
                "medium": {
                  "color": "#ffa500",
                  "label": ""
                }
              }
            },
            "legend": {
              "showHeader": true,
              "show": true,
              "customSize": "auto",
              "position": "right-top",
              "inside": false
            },
            "axisMode": "multi",
            "tooltip": {
              "showBinLabel": true,
              "measures": "",
              "showPercentage": true,
              "showDimensions": true,
              "showMeasures": true,
              "customizeTooltip": false,
              "dimensions": ""
            },
            "visualizationType": "hbar",
            "title": {
              "fontSize": 14,
              "subtitleFontSize": 11,
              "label": "",
              "align": "center",
              "subtitleLabel": ""
            },
            "binValues": false,
            "trellis": {
              "flipLabels": false,
              "showGridLines": true,
              "size": [
                100,
                100
              ],
              "enable": false,
              "type": "x",
              "chartsPerLine": 4
            },
            "measureAxis2": {
              "sqrtScale": false,
              "showTitle": true,
              "showAxis": true,
              "title": "",
              "customDomain": {
                "showDomain": false
              }
            },
            "measureAxis1": {
              "sqrtScale": false,
              "showTitle": true,
              "showAxis": true,
              "title": "",
              "customDomain": {
                "showDomain": false
              }
            },
            "theme": "wave",
            "dimensionAxis": {
              "showTitle": true,
              "customSize": "auto",
              "showAxis": true,
              "title": "",
              "icons": {
                "useIcons": false,
                "iconProps": {
                  "fit": "cover",
                  "column": "",
                  "type": "round"
                }
              }
            }
          },
          "type": "chart"
        }
      },
      "Table_Dimension_Header": {
        "broadcastFacet": true,
        "groups": [],
        "label": "Table_Dimension_Header",
        "numbers": [],
        "query": "MasterHierarchy = load &quot;Master_Hierarchy&quot;; q= group MasterHierarchy by &#39;all&#39;;\nq = foreach q generate &quot;    TOTAL    &quot; as &#39;Cloud&#39;;",
        "receiveFacet": true,
        "selectMode": "none",
        "strings": [],
        "type": "saql",
        "useGlobal": true,
        "visualizationParameters": {
          "visualizationType": "hbar"
        }
      },
      "lens_2": {
        "broadcastFacet": true,
        "groups": [
          "Region"
        ],
        "numbers": [],
        "query": "q = load &quot;Master_Hierarchy&quot;;\nq = filter q by &#39;Level_1&#39; in  {{cell(Static_Region_Filter.selection,0,&quot;filter&quot;).asString()}};q = group q by &#39;Level_1&#39; ;q = foreach q generate &#39;Level_1&#39; as &#39;Region&#39;; ; q = order q by (&#39;Region&#39; asc) ;",
        "receiveFacet": false,
        "selectMode": "multi",
        "strings": [
          "Region"
        ],
        "type": "saql",
        "useGlobal": true,
        "visualizationParameters": {
          "parameters": {
            "autoFitMode": "none",
            "showValues": true,
            "bins": {
              "breakpoints": {
                "high": 100,
                "low": 0
              },
              "bands": {
                "high": {
                  "color": "#008000",
                  "label": ""
                },
                "low": {
                  "color": "#B22222",
                  "label": ""
                },
                "medium": {
                  "color": "#ffa500",
                  "label": ""
                }
              }
            },
            "legend": {
              "showHeader": true,
              "show": true,
              "customSize": "auto",
              "position": "right-top",
              "inside": false
            },
            "axisMode": "multi",
            "tooltip": {
              "showBinLabel": true,
              "measures": "",
              "showPercentage": true,
              "showDimensions": true,
              "showMeasures": true,
              "customizeTooltip": false,
              "dimensions": ""
            },
            "visualizationType": "hbar",
            "title": {
              "fontSize": 14,
              "subtitleFontSize": 11,
              "label": "",
              "align": "center",
              "subtitleLabel": ""
            },
            "binValues": false,
            "trellis": {
              "flipLabels": false,
              "showGridLines": true,
              "size": [
                100,
                100
              ],
              "enable": false,
              "type": "x",
              "chartsPerLine": 4
            },
            "measureAxis2": {
              "sqrtScale": false,
              "showTitle": true,
              "showAxis": true,
              "title": "",
              "customDomain": {
                "showDomain": false
              }
            },
            "measureAxis1": {
              "sqrtScale": false,
              "showTitle": true,
              "showAxis": true,
              "title": "",
              "customDomain": {
                "showDomain": false
              }
            },
            "theme": "wave",
            "dimensionAxis": {
              "showTitle": true,
              "customSize": "auto",
              "showAxis": true,
              "title": "",
              "icons": {
                "useIcons": false,
                "iconProps": {
                  "fit": "cover",
                  "column": "",
                  "type": "round"
                }
              }
            }
          },
          "type": "chart"
        }
      }
    },
    "widgetStyle": {
      "backgroundColor": "#FFFFFF",
      "borderColor": "#E6ECF2",
      "borderEdges": [],
      "borderRadius": 0,
      "borderWidth": 1
    },
    "widgets": {
      "link_18": {
        "parameters": {
          "destinationLink": {
            "name": "db7c532f-d5f4-4511-a109-e262585c6082"
          },
          "destinationType": "page",
          "fontSize": 12,
          "includeState": false,
          "text": "Market Details and Red Accounts",
          "textAlignment": "center",
          "textColor": "#44A2F5"
        },
        "type": "link"
      },
      "link_19": {
        "parameters": {
          "destinationLink": {
            "name": "a32a622b-f247-47ef-92af-1ce8fe739626"
          },
          "destinationType": "page",
          "fontSize": 12,
          "includeState": false,
          "text": "▼ Show Filters ▼",
          "textAlignment": "center",
          "textColor": "#44A2F5"
        },
        "type": "link"
      },
      "link_16": {
        "parameters": {
          "destinationLink": {
            "name": "a32a622b-f247-47ef-92af-1ce8fe739626"
          },
          "destinationType": "page",
          "fontSize": 12,
          "includeState": false,
          "text": "Distribution HC",
          "textAlignment": "center",
          "textColor": "#44A2F5"
        },
        "type": "link"
      },
      "link_17": {
        "parameters": {
          "destinationLink": {
            "name": "20eda594-98ea-486b-aa1c-9d12c3aa2b7a"
          },
          "destinationType": "page",
          "fontSize": 12,
          "includeState": false,
          "text": "T&amp;P HC and Measures",
          "textAlignment": "center",
          "textColor": "#44A2F5"
        },
        "type": "link"
      },
      "link_14": {
        "parameters": {
          "destinationLink": {
            "name": "328a689d-17a8-489e-b41c-d6dbaedbf3ac"
          },
          "destinationType": "page",
          "fontSize": 12,
          "includeState": false,
          "text": "Financial Measures and Pipeline",
          "textAlignment": "center",
          "textColor": "#7D98B3"
        },
        "type": "link"
      },
      "link_15": {
        "parameters": {
          "destinationLink": {
            "name": "4fad4e26-13b7-4d45-bae5-fa096fab3892"
          },
          "destinationType": "page",
          "fontSize": 12,
          "includeState": false,
          "text": "▲ Hide Filters ▲",
          "textAlignment": "center",
          "textColor": "rgb(225, 243, 251)"
        },
        "type": "link"
      },
      "link_12": {
        "parameters": {
          "destinationLink": {
            "name": "328a689d-17a8-489e-b41c-d6dbaedbf3ac"
          },
          "destinationType": "page",
          "fontSize": 12,
          "includeState": false,
          "text": "▼ Show Filters ▼",
          "textAlignment": "center",
          "textColor": "#44A2F5"
        },
        "type": "link"
      },
      "link_13": {
        "parameters": {
          "destinationLink": {
            "name": "APM_Cloud_Summary_Dashboard_Level_1"
          },
          "destinationType": "dashboard",
          "fontSize": 14,
          "includeState": true,
          "text": "Cloud",
          "textAlignment": "center",
          "textColor": "rgb(0, 135, 255)"
        },
        "type": "link"
      },
      "link_10": {
        "parameters": {
          "destinationLink": {
            "name": "APM_Cloud_Summary_Dashboard_Level_1"
          },
          "destinationType": "dashboard",
          "fontSize": 14,
          "includeState": true,
          "text": "Cloud",
          "textAlignment": "center",
          "textColor": "rgb(0, 135, 255)"
        },
        "type": "link"
      },
      "table_12": {
        "parameters": {
          "borderColor": "rgba(255, 255, 255, 0.2)",
          "borderWidth": 1,
          "cell": {
            "backgroundColor": "rgb(43, 71, 114)",
            "fontColor": "#FFFFFF",
            "fontSize": 12
          },
          "columnProperties": {},
          "columns": [],
          "customBulkActions": [],
          "exploreLink": false,
          "header": {
            "backgroundColor": "rgb(22, 50, 92)",
            "fontColor": "#ffffff",
            "fontSize": 10
          },
          "innerMajorBorderColor": "rgba(255, 255, 255, 0.2)",
          "innerMinorBorderColor": "rgba(255, 255, 255, 0.2)",
          "maxColumnWidth": 260,
          "minColumnWidth": 60,
          "mode": "variable",
          "numberOfLines": 1,
          "pivoted": false,
          "showRowIndexColumn": false,
          "step": "Table_Page_2_Header",
          "totals": true,
          "verticalPadding": 4
        },
        "type": "table"
      },
      "container_2": {
        "parameters": {
          "alignmentX": "left",
          "alignmentY": "top",
          "fit": "stretch"
        },
        "type": "container"
      },
      "table_14": {
        "parameters": {
          "borderColor": "rgb(230, 236, 242)",
          "borderWidth": 1,
          "cell": {
            "backgroundColor": "#ffffff",
            "fontColor": "#16325c",
            "fontSize": 12
          },
          "columnProperties": {},
          "columns": [],
          "customBulkActions": [],
          "exploreLink": false,
          "header": {
            "backgroundColor": "rgb(244, 246, 249)",
            "fontColor": "rgb(244, 246, 249)",
            "fontSize": 0
          },
          "innerMajorBorderColor": "rgb(230, 236, 242)",
          "innerMinorBorderColor": "rgb(230, 236, 242)",
          "maxColumnWidth": 250,
          "minColumnWidth": 77,
          "mode": "variable",
          "numberOfLines": 1,
          "pivoted": false,
          "showRowIndexColumn": false,
          "step": "Table_Level_2_Measures_1",
          "verticalPadding": 8
        },
        "type": "table"
      },
      "container_3": {
        "parameters": {
          "alignmentX": "left",
          "alignmentY": "top",
          "fit": "original"
        },
        "type": "container"
      },
      "table_15": {
        "parameters": {
          "borderColor": "#e0e5ee",
          "borderWidth": 1,
          "cell": {
            "backgroundColor": "#ffffff",
            "fontColor": "#16325c",
            "fontSize": 12
          },
          "columnProperties": {},
          "columns": [],
          "customBulkActions": [],
          "exploreLink": false,
          "header": {
            "backgroundColor": "rgb(22, 50, 92)",
            "fontColor": "#FFFFFF",
            "fontSize": 14
          },
          "innerMajorBorderColor": "#a8b7c7",
          "innerMinorBorderColor": "#e0e5ee",
          "maxColumnWidth": 260,
          "minColumnWidth": 240,
          "mode": "variable",
          "numberOfLines": 1,
          "pivoted": false,
          "step": "Table_Page_2_Header_Top",
          "totals": true,
          "verticalPadding": 8
        },
        "type": "table"
      },
      "table_16": {
        "parameters": {
          "borderColor": "rgba(255, 255, 255, 0.2)",
          "borderWidth": 1,
          "cell": {
            "backgroundColor": "rgb(43, 71, 114)",
            "fontColor": "#FFFFFF",
            "fontSize": 12
          },
          "columnProperties": {},
          "columns": [],
          "customBulkActions": [],
          "exploreLink": false,
          "header": {
            "backgroundColor": "rgb(22, 50, 92)",
            "fontColor": "#ffffff",
            "fontSize": 10
          },
          "innerMajorBorderColor": "rgba(255, 255, 255, 0.2)",
          "innerMinorBorderColor": "rgba(255, 255, 255, 0.2)",
          "maxColumnWidth": 175,
          "minColumnWidth": 67,
          "mode": "variable",
          "numberOfLines": 1,
          "pivoted": false,
          "showRowIndexColumn": false,
          "step": "Table_Page_3_Header",
          "totals": true,
          "verticalPadding": 4
        },
        "type": "table"
      },
      "text_3": {
        "parameters": {
          "fontSize": 20,
          "text": "↳",
          "textAlignment": "center",
          "textColor": "#091A3E"
        },
        "type": "text"
      },
      "table_19": {
        "parameters": {
          "borderColor": "rgb(230, 236, 242)",
          "borderWidth": 1,
          "cell": {
            "backgroundColor": "#ffffff",
            "fontColor": "#16325c",
            "fontSize": 12
          },
          "columnProperties": {},
          "columns": [],
          "customBulkActions": [],
          "exploreLink": false,
          "header": {
            "backgroundColor": "rgb(244, 246, 249)",
            "fontColor": "#091A3E",
            "fontSize": 0
          },
          "innerMajorBorderColor": "rgb(230, 236, 242)",
          "innerMinorBorderColor": "rgb(230, 236, 242)",
          "maxColumnWidth": 175,
          "minColumnWidth": 67,
          "mode": "variable",
          "numberOfLines": 1,
          "pivoted": false,
          "showRowIndexColumn": false,
          "step": "Table_Level_2_Measures_3",
          "verticalPadding": 8
        },
        "type": "table"
      },
      "container_7": {
        "parameters": {
          "alignmentX": "left",
          "alignmentY": "top",
          "fit": "original"
        },
        "type": "container"
      },
      "text_2": {
        "parameters": {
          "fontSize": 12,
          "text": "** DATA WILL BE UPDATED AS A PART OF THE REGULAR REFRESH BY MID AUGUST **\n&quot;Core Premier (A la Carte) &amp; Priority&quot; &amp; &quot;Signature&quot; are included in  &quot;☁ Total&quot; \nCustomer = regional parent company excluding non-profit and zero-AOV customers\nAddressable Market = Market size defined by Gartner/SFDC and does not sum across sub-products. Marketshare = AOV / Total Addressable Market.\nRed Accounts: Account escalations that represent attriton risk (AOV)",
          "textAlignment": "left",
          "textColor": "#5C7A99"
        },
        "type": "text"
      },
      "text_5": {
        "parameters": {
          "fontSize": 12,
          "text": "** DATA (T&amp;P Cost to Serve, Availability% and Transactions/requests) WILL BE UPDATED AS A PART OF THE REGULAR REFRESH BY MID AUGUST **\n&quot;Core Premier (A la Carte) &amp; Priority&quot; &amp; &quot;Signature&quot; are included in  &quot;☁ Total&quot;\nSWE = Software Engineering IC&#39;s. Excludes SWE&#39;s Product Trust and Infra that are not working on product.\nInfra: Represents total HC in the infrastructure organization\nT&amp;P Cost to Serve: Includes Infra, 3rd party royalty, and R&amp;D + Products. Metric has 1 quarter lag (Q4 numbers are indicative of Q3 ending)\nAvailability %: Reflects core data centers onlyCPM total reflects core data centers only. Availability for sub-products may reflect total core data centers as well.",
          "textAlignment": "left",
          "textColor": "#5C7A99"
        },
        "type": "text"
      },
      "text_4": {
        "parameters": {
          "fontSize": 20,
          "text": "↳",
          "textAlignment": "center",
          "textColor": "#091A3E"
        },
        "type": "text"
      },
      "container_9": {
        "parameters": {
          "alignmentX": "left",
          "alignmentY": "top",
          "fit": "original"
        },
        "type": "container"
      },
      "text_6": {
        "parameters": {
          "fontSize": 12,
          "text": "&quot;Core Premier (A la Carte) &amp; Priority&quot; &amp; &quot;Signature&quot; are included in  &quot;☁ Total&quot; \nACV: Availability of information in org62 can effect historical trends.\nAOV: Availability of information in org62 can effect historical trends\nAttrition: Trailing 12 months (TTM) attrition. Core only prior to FY15Q1. FY18 total attrition reflects SFDC excluding CC, Krux, and Heroku online business\n** ATTRITION DATA AS OF MARCH FY19\nPipeline: Pipe numbers exclude CSG pipePipe Gen = Sum of $ amount of opportunities that moved to Stage 2. Note: Core pipe gen includes Premiere a-la-carte. The rest of CSG pipe gen is reported within CSG cut. \n",
          "textAlignment": "left",
          "textColor": "#5C7A99"
        },
        "type": "text"
      },
      "text_8": {
        "parameters": {
          "fontSize": 12,
          "text": "&quot;Core Premier (A la Carte) &amp; Priority&quot; &amp; &quot;Signature&quot; are included in  &quot;☁ Total&quot; \nWithin the AE, Co Prime, SE sections, % columns 3 &amp; 4 represent 24 month CAGR (quarterly and YTD)\nAEs: Includes ECS, Marketing Cloud (Messaging/Journies), and Commerce Cloud AE&#39;s\nSEs: Excludes Q Branch, Spark, IPD, and SE Management\nCo Prime: CSG Coprime = APs (account partners) that worked through the Qtr\n",
          "textAlignment": "left",
          "textColor": "#5C7A99"
        },
        "type": "text"
      },
      "link_29": {
        "parameters": {
          "destinationLink": {
            "name": "db7c532f-d5f4-4511-a109-e262585c6082"
          },
          "destinationType": "page",
          "fontSize": 12,
          "includeState": false,
          "text": "▼ Show Filters ▼",
          "textAlignment": "center",
          "textColor": "#44A2F5"
        },
        "type": "link"
      },
      "link_27": {
        "parameters": {
          "destinationLink": {
            "name": "20eda594-98ea-486b-aa1c-9d12c3aa2b7a"
          },
          "destinationType": "page",
          "fontSize": 12,
          "includeState": false,
          "text": "▼ Show Filters ▼",
          "textAlignment": "center",
          "textColor": "#44A2F5"
        },
        "type": "link"
      },
      "image_4": {
        "parameters": {
          "alignmentX": "center",
          "alignmentY": "center",
          "fit": "fitheight",
          "image": {
            "name": "FSpng5png",
            "namespace": ""
          }
        },
        "type": "image"
      },
      "link_28": {
        "parameters": {
          "destinationLink": {
            "name": "34f375e9-4d4a-41f6-8d43-a7a27c89a90f"
          },
          "destinationType": "page",
          "fontSize": 12,
          "includeState": false,
          "text": "▲ Hide Filters ▲",
          "textAlignment": "center",
          "textColor": "rgb(225, 243, 251)"
        },
        "type": "link"
      },
      "text_1": {
        "parameters": {
          "fontSize": 20,
          "text": "↳",
          "textAlignment": "center",
          "textColor": "#091A3E"
        },
        "type": "text"
      },
      "link_25": {
        "parameters": {
          "destinationLink": {
            "name": "20eda594-98ea-486b-aa1c-9d12c3aa2b7a"
          },
          "destinationType": "page",
          "fontSize": 12,
          "includeState": false,
          "text": "T&amp;P HC and Measures",
          "textAlignment": "center",
          "textColor": "#44A2F5"
        },
        "type": "link"
      },
      "link_26": {
        "parameters": {
          "destinationLink": {
            "name": "db7c532f-d5f4-4511-a109-e262585c6082"
          },
          "destinationType": "page",
          "fontSize": 12,
          "includeState": false,
          "text": "Market Details and Red Accounts",
          "textAlignment": "center",
          "textColor": "#44A2F5"
        },
        "type": "link"
      },
      "link_23": {
        "parameters": {
          "destinationLink": {
            "name": "328a689d-17a8-489e-b41c-d6dbaedbf3ac"
          },
          "destinationType": "page",
          "fontSize": 12,
          "includeState": false,
          "text": "Financial Measures and Pipeline",
          "textAlignment": "center",
          "textColor": "#44A2F5"
        },
        "type": "link"
      },
      "link_24": {
        "parameters": {
          "destinationLink": {
            "name": "a32a622b-f247-47ef-92af-1ce8fe739626"
          },
          "destinationType": "page",
          "fontSize": 12,
          "includeState": false,
          "text": "Distribution HC",
          "textAlignment": "center",
          "textColor": "#7D98B3"
        },
        "type": "link"
      },
      "link_21": {
        "parameters": {
          "destinationLink": {
            "name": "4fad4e26-13b7-4d45-bae5-fa096fab3892"
          },
          "destinationType": "page",
          "fontSize": 12,
          "includeState": false,
          "text": "Distribution HC",
          "textAlignment": "center",
          "textColor": "#44A2F5"
        },
        "type": "link"
      },
      "link_22": {
        "parameters": {
          "destinationLink": {
            "name": "fb908427-d26f-49fe-94a4-3ae9d59e11df"
          },
          "destinationType": "page",
          "fontSize": 12,
          "includeState": false,
          "text": "Financial Measures and Pipeline",
          "textAlignment": "center",
          "textColor": "#44A2F5"
        },
        "type": "link"
      },
      "link_20": {
        "parameters": {
          "destinationLink": {
            "name": "d00384c1-6182-44f8-9c73-d72c18c67e14"
          },
          "destinationType": "page",
          "fontSize": 12,
          "includeState": false,
          "text": "▲ Hide Filters ▲",
          "textAlignment": "center",
          "textColor": "rgb(225, 243, 251)"
        },
        "type": "link"
      },
      "image_1": {
        "parameters": {
          "alignmentX": "center",
          "alignmentY": "center",
          "fit": "fitwidth",
          "image": {
            "name": "campfirepng1png",
            "namespace": ""
          }
        },
        "type": "image"
      },
      "listselector_12": {
        "parameters": {
          "compact": false,
          "exploreLink": false,
          "instant": false,
          "measureField": "none",
          "step": "Filter_Lead_1",
          "title": "Lead+1"
        },
        "type": "listselector"
      },
      "image_3": {
        "parameters": {
          "alignmentX": "left",
          "alignmentY": "top",
          "fit": "stretch",
          "image": {
            "name": "FS2_Footerpngpng",
            "namespace": ""
          }
        },
        "type": "image"
      },
      "listselector_10": {
        "parameters": {
          "compact": false,
          "exploreLink": false,
          "instant": false,
          "measureField": "none",
          "step": "Filter_Industry",
          "title": "Industry"
        },
        "type": "listselector"
      },
      "image_2": {
        "parameters": {
          "alignmentX": "center",
          "alignmentY": "center",
          "fit": "fitheight",
          "image": {
            "name": "einsteinsectionpredictIOpng2png",
            "namespace": ""
          }
        },
        "type": "image"
      },
      "link_30": {
        "parameters": {
          "destinationLink": {
            "name": "d00384c1-6182-44f8-9c73-d72c18c67e14"
          },
          "destinationType": "page",
          "fontSize": 12,
          "includeState": false,
          "text": "T&amp;P HC and Measures",
          "textAlignment": "center",
          "textColor": "#44A2F5"
        },
        "type": "link"
      },
      "link_31": {
        "parameters": {
          "destinationLink": {
            "name": "34f375e9-4d4a-41f6-8d43-a7a27c89a90f"
          },
          "destinationType": "page",
          "fontSize": 12,
          "includeState": false,
          "text": "Market Details and Red Accounts",
          "textAlignment": "center",
          "textColor": "#44A2F5"
        },
        "type": "link"
      },
      "listselector_7": {
        "parameters": {
          "compact": false,
          "exploreLink": false,
          "instant": true,
          "step": "Selector_Quarter",
          "title": "Quarter"
        },
        "type": "listselector"
      },
      "listselector_8": {
        "parameters": {
          "compact": false,
          "displayTemplate": "[Region]",
          "exploreLink": false,
          "instant": false,
          "measureField": "none",
          "step": "lens_2",
          "title": "Region "
        },
        "type": "listselector"
      },
      "listselector_3": {
        "parameters": {
          "compact": false,
          "exploreLink": false,
          "instant": false,
          "measureField": "none",
          "step": "Filter_Segment",
          "title": "Segment"
        },
        "type": "listselector"
      },
      "listselector_2": {
        "parameters": {
          "compact": false,
          "displayTemplate": "[Cloud] ",
          "exploreLink": false,
          "instant": false,
          "measureField": "none",
          "step": "Filter_Cloud",
          "title": "Cloud"
        },
        "type": "listselector"
      },
      "listselector_5": {
        "parameters": {
          "compact": false,
          "exploreLink": false,
          "instant": true,
          "measureField": "none",
          "step": "Fiscal_Year_1",
          "title": "Fiscal Year"
        },
        "type": "listselector"
      },
      "listselector_4": {
        "parameters": {
          "compact": false,
          "displayTemplate": "[Country] ",
          "exploreLink": false,
          "instant": false,
          "measureField": "none",
          "step": "lens_1",
          "title": "Country"
        },
        "type": "listselector"
      },
      "link_3": {
        "parameters": {
          "destinationLink": {
            "name": "a32a622b-f247-47ef-92af-1ce8fe739626"
          },
          "destinationType": "page",
          "fontSize": 12,
          "includeState": false,
          "text": "Distribution HC",
          "textAlignment": "center",
          "textColor": "#44A2F5"
        },
        "type": "link"
      },
      "link_4": {
        "parameters": {
          "destinationLink": {
            "name": "20eda594-98ea-486b-aa1c-9d12c3aa2b7a"
          },
          "destinationType": "page",
          "fontSize": 12,
          "includeState": false,
          "text": "T&amp;P HC and Measures",
          "textAlignment": "center",
          "textColor": "#44A2F5"
        },
        "type": "link"
      },
      "link_1": {
        "parameters": {
          "destinationLink": {
            "name": "APM_Landing_Page"
          },
          "destinationType": "dashboard",
          "fontSize": 12,
          "includeState": false,
          "text": "APM Views Landing Page",
          "textAlignment": "center",
          "textColor": "#44A2F5"
        },
        "type": "link"
      },
      "link_2": {
        "parameters": {
          "destinationLink": {
            "name": "328a689d-17a8-489e-b41c-d6dbaedbf3ac"
          },
          "destinationType": "page",
          "fontSize": 12,
          "includeState": false,
          "text": "Financial Measures and Pipeline",
          "textAlignment": "center",
          "textColor": "#44A2F5"
        },
        "type": "link"
      },
      "table_20": {
        "parameters": {
          "borderColor": "#e0e5ee",
          "borderWidth": 1,
          "cell": {
            "backgroundColor": "#ffffff",
            "fontColor": "#FFFFFF",
            "fontSize": 12
          },
          "columnProperties": {},
          "columns": [],
          "customBulkActions": [],
          "exploreLink": false,
          "header": {
            "backgroundColor": "rgb(22, 50, 92)",
            "fontColor": "#FFFFFF",
            "fontSize": 14
          },
          "innerMajorBorderColor": "#a8b7c7",
          "innerMinorBorderColor": "#e0e5ee",
          "maxColumnWidth": 320,
          "minColumnWidth": 260,
          "mode": "variable",
          "numberOfLines": 1,
          "pivoted": false,
          "step": "Table_Page_4_Header_Top",
          "totals": true,
          "verticalPadding": 8
        },
        "type": "table"
      },
      "table_21": {
        "parameters": {
          "borderColor": "rgba(255, 255, 255, 0.2)",
          "borderWidth": 1,
          "cell": {
            "backgroundColor": "rgb(43, 71, 114)",
            "fontColor": "#FFFFFF",
            "fontSize": 12
          },
          "columnProperties": {},
          "columns": [],
          "customBulkActions": [],
          "exploreLink": false,
          "header": {
            "backgroundColor": "rgb(22, 50, 92)",
            "fontColor": "#ffffff",
            "fontSize": 10
          },
          "innerMajorBorderColor": "rgba(255, 255, 255, 0.2)",
          "innerMinorBorderColor": "rgba(255, 255, 255, 0.2)",
          "maxColumnWidth": 260,
          "minColumnWidth": 80,
          "mode": "variable",
          "numberOfLines": 1,
          "pivoted": false,
          "showRowIndexColumn": false,
          "step": "Table_Page_4_Header",
          "totals": true,
          "verticalPadding": 4
        },
        "type": "table"
      },
      "table_3": {
        "parameters": {
          "borderColor": "#e0e5ee",
          "borderWidth": 1,
          "cell": {
            "backgroundColor": "#ffffff",
            "fontColor": "#16325c",
            "fontSize": 12
          },
          "columnProperties": {},
          "columns": [],
          "customBulkActions": [],
          "exploreLink": false,
          "fixedColumnWidth": 125,
          "header": {
            "backgroundColor": "rgb(244, 246, 249)",
            "fontColor": "rgb(244, 246, 249)",
            "fontSize": 0
          },
          "innerMajorBorderColor": "#a8b7c7",
          "innerMinorBorderColor": "#e0e5ee",
          "mode": "fixed",
          "numberOfLines": 1,
          "pivoted": false,
          "showRowIndexColumn": false,
          "step": "Table_Level_1_Measures_1",
          "totals": true,
          "verticalPadding": 8
        },
        "type": "table"
      },
      "table_23": {
        "parameters": {
          "borderColor": "rgb(230, 236, 242)",
          "borderWidth": 1,
          "cell": {
            "backgroundColor": "#ffffff",
            "fontColor": "#16325c",
            "fontSize": 12
          },
          "columnProperties": {},
          "columns": [],
          "customBulkActions": [],
          "exploreLink": false,
          "header": {
            "backgroundColor": "rgb(244, 246, 249)",
            "fontColor": "#091A3E",
            "fontSize": 0
          },
          "innerMajorBorderColor": "rgb(230, 236, 242)",
          "innerMinorBorderColor": "rgb(230, 236, 242)",
          "maxColumnWidth": 260,
          "minColumnWidth": 80,
          "mode": "variable",
          "numberOfLines": 1,
          "pivoted": false,
          "showRowIndexColumn": false,
          "step": "Table_Level_2_Measures_4",
          "verticalPadding": 8
        },
        "type": "table"
      },
      "link_9": {
        "parameters": {
          "destinationLink": {
            "name": "328a689d-17a8-489e-b41c-d6dbaedbf3ac"
          },
          "destinationType": "page",
          "fontSize": 12,
          "includeState": false,
          "text": "Financial Measures and Pipeline",
          "textAlignment": "center",
          "textColor": "#44A2F5"
        },
        "type": "link"
      },
      "table_4": {
        "parameters": {
          "borderColor": "#e0e5ee",
          "borderWidth": 1,
          "cell": {
            "backgroundColor": "#ffffff",
            "fontColor": "#FFFFFF",
            "fontSize": 12
          },
          "columnProperties": {},
          "columns": [],
          "customBulkActions": [],
          "exploreLink": false,
          "header": {
            "backgroundColor": "rgb(22, 50, 92)",
            "fontColor": "#FFFFFF",
            "fontSize": 14
          },
          "innerMajorBorderColor": "#a8b7c7",
          "innerMinorBorderColor": "#e0e5ee",
          "maxColumnWidth": 308,
          "minColumnWidth": 250,
          "mode": "variable",
          "numberOfLines": 1,
          "pivoted": false,
          "step": "Table_Page_1_Header_Top",
          "totals": true,
          "verticalPadding": 8
        },
        "type": "table"
      },
      "table_5": {
        "parameters": {
          "borderColor": "#a8b7c7",
          "borderWidth": 1,
          "cell": {
            "backgroundColor": "#091A3E",
            "fontColor": "#FFFFFF",
            "fontSize": 12
          },
          "columnProperties": {},
          "columns": [],
          "customBulkActions": [],
          "exploreLink": false,
          "fixedColumnWidth": 125,
          "header": {
            "backgroundColor": "rgb(22, 50, 92)",
            "fontColor": "#ffffff",
            "fontSize": 12
          },
          "innerMajorBorderColor": "#54698d",
          "innerMinorBorderColor": "#a8b7c7",
          "mode": "fixed",
          "numberOfLines": 1,
          "pivoted": false,
          "showRowIndexColumn": false,
          "step": "Table_Dimension_Header",
          "totals": true,
          "verticalPadding": 8
        },
        "type": "table"
      },
      "link_7": {
        "parameters": {
          "destinationLink": {
            "name": "20eda594-98ea-486b-aa1c-9d12c3aa2b7a"
          },
          "destinationType": "page",
          "fontSize": 12,
          "includeState": false,
          "text": "T&amp;P HC and Measures",
          "textAlignment": "center",
          "textColor": "#7D98B3"
        },
        "type": "link"
      },
      "pillbox_1": {
        "parameters": {
          "compact": false,
          "exploreLink": false,
          "step": "Static_Cloud_Filter"
        },
        "type": "pillbox"
      },
      "link_8": {
        "parameters": {
          "destinationLink": {
            "name": "a32a622b-f247-47ef-92af-1ce8fe739626"
          },
          "destinationType": "page",
          "fontSize": 12,
          "includeState": false,
          "text": "Distribution HC",
          "textAlignment": "center",
          "textColor": "#44A2F5"
        },
        "type": "link"
      },
      "table_7": {
        "parameters": {
          "borderColor": "rgba(255, 255, 255, 0.2)",
          "borderWidth": 1,
          "cell": {
            "backgroundColor": "rgb(43, 71, 114)",
            "fontColor": "#FFFFFF",
            "fontSize": 12
          },
          "columnProperties": {},
          "columns": [],
          "customBulkActions": [],
          "exploreLink": false,
          "header": {
            "backgroundColor": "rgb(22, 50, 92)",
            "fontColor": "#ffffff",
            "fontSize": 10
          },
          "innerMajorBorderColor": "rgba(255, 255, 255, 0.2)",
          "innerMinorBorderColor": "rgba(255, 255, 255, 0.2)",
          "maxColumnWidth": 250,
          "minColumnWidth": 77,
          "mode": "variable",
          "numberOfLines": 1,
          "pivoted": false,
          "showRowIndexColumn": false,
          "step": "Table_Page_1_Header",
          "totals": true,
          "verticalPadding": 4
        },
        "type": "table"
      },
      "link_5": {
        "parameters": {
          "destinationLink": {
            "name": "db7c532f-d5f4-4511-a109-e262585c6082"
          },
          "destinationType": "page",
          "fontSize": 12,
          "includeState": false,
          "text": "Market Details and Red Accounts",
          "textAlignment": "center",
          "textColor": "#7D98B3"
        },
        "type": "link"
      },
      "table_8": {
        "parameters": {
          "borderColor": "#e0e5ee",
          "borderWidth": 1,
          "cell": {
            "backgroundColor": "#ffffff",
            "fontColor": "#FFFFFF",
            "fontSize": 12
          },
          "columnProperties": {},
          "columns": [],
          "customBulkActions": [],
          "exploreLink": false,
          "header": {
            "backgroundColor": "rgb(22, 50, 92)",
            "fontColor": "#FFFFFF",
            "fontSize": 14
          },
          "innerMajorBorderColor": "#a8b7c7",
          "innerMinorBorderColor": "#e0e5ee",
          "maxColumnWidth": 268,
          "minColumnWidth": 176,
          "mode": "variable",
          "numberOfLines": 1,
          "pivoted": false,
          "step": "Table_Page_3_Header_Top",
          "totals": true,
          "verticalPadding": 8
        },
        "type": "table"
      },
      "link_6": {
        "parameters": {
          "destinationLink": {
            "name": "db7c532f-d5f4-4511-a109-e262585c6082"
          },
          "destinationType": "page",
          "fontSize": 12,
          "includeState": false,
          "text": "Market Details and Red Accounts",
          "textAlignment": "center",
          "textColor": "#44A2F5"
        },
        "type": "link"
      },
      "table_9": {
        "parameters": {
          "borderColor": "#E6ECF2",
          "borderWidth": 1,
          "cell": {
            "backgroundColor": "#ffffff",
            "fontColor": "#16325c",
            "fontSize": 12
          },
          "columnProperties": {},
          "columns": [],
          "customBulkActions": [],
          "exploreLink": false,
          "header": {
            "backgroundColor": "rgb(244, 246, 249)",
            "fontColor": "rgb(244, 246, 249)",
            "fontSize": 0
          },
          "innerMajorBorderColor": "#E6ECF2",
          "innerMinorBorderColor": "#E6ECF2",
          "maxColumnWidth": 260,
          "minColumnWidth": 60,
          "mode": "variable",
          "numberOfLines": 1,
          "pivoted": false,
          "showRowIndexColumn": false,
          "step": "Table_Level_2_Measures_2",
          "totals": true,
          "verticalPadding": 8
        },
        "type": "table"
      },
      "listselector_1": {
        "parameters": {
          "compact": false,
          "exploreLink": false,
          "instant": false,
          "step": "Filter_Lead",
          "title": "Lead"
        },
        "type": "listselector"
      }
    }
  },
  "type": "dashboard",
  "url": "/services/data/v42.0/wave/dashboards/0FKf2000000MKxyGAG"
}